[
  {
    "prompt": "List all employees and their salaries.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, salary FROM employees;"
  },
  {
    "prompt": "List all employees.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT * FROM employees;"
  },
  {
    "prompt": "What is the total salary of all employees?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT SUM(salary) FROM employees;"
  },
  {
    "prompt": "Retrieve the salary of all employees in ascending order.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT salary FROM employees ORDER BY salary ASC;"
  },
  {
    "prompt": "Retrieve the salary of all employees in descending order.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT salary FROM employees ORDER BY salary DESC;"
  },
  {
    "prompt": "Select all employees who are earning more than the average salary.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, salary FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);"
  },
  {
    "prompt": "Select all employees who are earning below the average salary.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, salary FROM employees WHERE salary < (SELECT AVG(salary) FROM employees);"
  },
  {
    "prompt": "Retrieve the salary of all employees in ascending order.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT salary FROM employees ORDER BY salary ASC;"
  },
  {
    "prompt": "Retrieve the salary of all employees in descending order.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT salary FROM employees ORDER BY salary DESC;"
  },
  {
    "prompt": "Select all employees who are earning more than the average salary.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, salary FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);"
  },
  {
    "prompt": "Select all employees who are earning below the average salary.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, salary FROM employees WHERE salary < (SELECT AVG(salary) FROM employees);"
  },
  {
    "prompt": "Retrieve all employees and their joining dates.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, hire_date FROM employees;"
  },
  {
    "prompt": "Retrieve all employees who joined in a specific year.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, hire_date FROM employees WHERE EXTRACT(YEAR FROM hire_date) = :year;"
  },
  {
    "prompt": "Retrieve all employees along with their years of experience.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, FLOOR(MONTHS_BETWEEN(SYSDATE, hire_date) / 12) AS years_of_experience FROM employees;"
  },
  {
    "prompt": "Retrieve all employees who have more than 5 years of experience.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, FLOOR(MONTHS_BETWEEN(SYSDATE, hire_date) / 12) AS years_of_experience FROM employees WHERE FLOOR(MONTHS_BETWEEN(SYSDATE, hire_date) / 12) > 5;"
  },
  {
    "prompt": "List all employees working in the Operations department.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE d.department_name = 'Operations';"
  },
  {
    "prompt": "List all ships currently under maintenance.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT name FROM ships WHERE status = 'Under Maintenance';"
  },
  {
    "prompt": "List all repair tasks for ships owned by 'Oceanic Co.'.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT rt.task_name, rt.description FROM repair_tasks rt JOIN repairs r ON rt.repair_id = r.repair_id JOIN ships s ON r.ship_id = s.ship_id WHERE s.owner = 'Oceanic Co.';"
  },
  {
    "prompt": "Which employees are assigned to repair tasks?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ]
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id;"
  },
  {
    "prompt": "List all trolleys and their status.",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      }
    },
    "query": "SELECT trolley_id, status FROM trolleys;"
  },
  {
    "prompt": "What is the condition of all wheels attached to trolleys?",
    "context": {
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      },
      "trolleys": {
        "columns": ["trolley_id", "status"]
      }
    },
    "query": "SELECT w.wheel_id, w.condition FROM wheels w JOIN trolleys t ON w.trolley_id = t.trolley_id;"
  },
  {
    "prompt": "Which lifts are operational?",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type, capacity FROM lifts WHERE status = 'Operational';"
  },
  {
    "prompt": "List the names and types of all ships built after 2010.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT name, type FROM ships WHERE build_year > 2010;"
  },
  {
    "prompt": "How many cradles are currently in use?",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT COUNT(*) FROM cradles WHERE status = 'In Use';"
  },
  {
    "prompt": "List all employees hired after 2020.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name FROM employees WHERE hire_date > TO_DATE('2020-12-31', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Which employees are unavailable for tasks?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name FROM employees WHERE availability_status = 'Unavailable';"
  },
  {
    "prompt": "What is the total amount of all unpaid invoices?",
    "context": {
      "invoices": {
        "columns": [
          "invoice_id",
          "repair_id",
          "amount",
          "issued_date",
          "status"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT SUM(amount) FROM invoices WHERE status = 'Unpaid';"
  },
  {
    "prompt": "List all repairs and their associated ships.",
    "context": {
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT r.repair_id, s.name FROM repairs r JOIN ships s ON r.ship_id = s.ship_id;"
  },
  {
    "prompt": "Which ships have inspections scheduled after January 1, 2024?",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT s.name FROM ships s JOIN inspection_records ir ON s.ship_id = ir.ship_id WHERE ir.inspection_date > TO_DATE('2024-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "List the names of ships and their types.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT name, type FROM ships;"
  },
  {
    "prompt": "What is the total number of repair tasks?",
    "context": {
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT COUNT(*) FROM repair_tasks;"
  },
  {
    "prompt": "List all employees and their assigned tasks.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ]
      }
    },
    "query": "SELECT e.first_name, e.last_name, rt.task_name FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id JOIN repair_tasks rt ON et.task_id = rt.task_id;"
  },
  {
    "prompt": "Which ships have a status of 'Operational'?",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT name FROM ships WHERE status = 'Operational';"
  },
  {
    "prompt": "List all departments and their employee counts.",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name"]
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      }
    },
    "query": "SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name;"
  },
  {
    "prompt": "What is the maximum salary of employees in each department?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT d.department_name, MAX(e.salary) AS max_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name;"
  },
  {
    "prompt": "List all ships with associated repairs that are in progress.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT s.name, r.status FROM ships s JOIN repairs r ON s.ship_id = r.ship_id WHERE r.status = 'In Progress';"
  },
  {
    "prompt": "List the inspection records for the ship named 'Titan'.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      }
    },
    "query": "SELECT ir.inspection_date, ir.remarks FROM inspection_records ir JOIN ships s ON ir.ship_id = s.ship_id WHERE s.name = 'Titan';"
  },
  {
    "prompt": "What is the average time required for all repair tasks?",
    "context": {
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT AVG(estimated_time) FROM repair_tasks;"
  },
  {
    "prompt": "List all invoices issued after January 1, 2023, and their amounts.",
    "context": {
      "invoices": {
        "columns": [
          "invoice_id",
          "repair_id",
          "amount",
          "issued_date",
          "status"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT invoice_id, amount FROM invoices WHERE issued_date > TO_DATE('2023-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "List all trolleys and their statuses.",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      }
    },
    "query": "SELECT trolley_id, status FROM trolleys;"
  },
  {
    "prompt": "Which trolleys are operational?",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      }
    },
    "query": "SELECT trolley_id FROM trolleys WHERE status = 'Operational';"
  },
  {
    "prompt": "List the condition of all wheels and their associated trolleys.",
    "context": {
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      },
      "trolleys": {
        "columns": ["trolley_id", "status"]
      }
    },
    "query": "SELECT w.wheel_id, w.condition, t.status FROM wheels w JOIN trolleys t ON w.trolley_id = t.trolley_id;"
  },
  {
    "prompt": "How many wheels need replacement?",
    "context": {
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT COUNT(*) FROM wheels WHERE condition = 'Needs Replacement';"
  },
  {
    "prompt": "List all cradles currently in use.",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT cradle_id FROM cradles WHERE status = 'In Use';"
  },
  {
    "prompt": "List the names of ships in cradles currently in use.",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT s.name FROM ships s JOIN cradles c ON s.ship_id = c.ship_id WHERE c.status = 'In Use';"
  },
  {
    "prompt": "List all lifts and their capacities.",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type, capacity FROM lifts;"
  },
  {
    "prompt": "Which lifts are operational and have a capacity greater than 10 tons?",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type, capacity FROM lifts WHERE status = 'Operational' AND capacity > 10;"
  },
  {
    "prompt": "List all lifts that are under maintenance.",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type FROM lifts WHERE status = 'Under Maintenance';"
  },
  {
    "prompt": "How many trolleys are currently under maintenance?",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      }
    },
    "query": "SELECT COUNT(*) FROM trolleys WHERE status = 'Under Maintenance';"
  },
  {
    "prompt": "What is the condition of wheels for trolleys under maintenance?",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT w.wheel_id, w.condition FROM wheels w JOIN trolleys t ON w.trolley_id = t.trolley_id WHERE t.status = 'Under Maintenance';"
  },
  {
    "prompt": "List the IDs and types of all operational lifts.",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type FROM lifts WHERE status = 'Operational';"
  },
  {
    "prompt": "Which lifts can lift more than 15 tons?",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type, capacity FROM lifts WHERE capacity > 15;"
  },
  {
    "prompt": "List all cradles associated with ships under repair.",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT c.cradle_id, s.name FROM cradles c JOIN ships s ON c.ship_id = s.ship_id JOIN repairs r ON s.ship_id = r.ship_id WHERE r.status = 'In Progress';"
  },
  {
    "prompt": "How many operational trolleys have all their wheels in good condition?",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT COUNT(DISTINCT t.trolley_id) FROM trolleys t JOIN wheels w ON t.trolley_id = w.trolley_id WHERE t.status = 'Operational' AND w.condition = 'Good' GROUP BY t.trolley_id HAVING COUNT(w.wheel_id) = (SELECT COUNT(*) FROM wheels w2 WHERE w2.trolley_id = t.trolley_id);"
  },
  {
    "prompt": "List all trolleys and their statuses.",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      }
    },
    "query": "SELECT trolley_id, status FROM trolleys;"
  },
  {
    "prompt": "Which trolleys are operational?",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      }
    },
    "query": "SELECT trolley_id FROM trolleys WHERE status = 'Operational';"
  },
  {
    "prompt": "List the condition of all wheels and their associated trolleys.",
    "context": {
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      },
      "trolleys": {
        "columns": ["trolley_id", "status"]
      }
    },
    "query": "SELECT w.wheel_id, w.condition, t.status FROM wheels w JOIN trolleys t ON w.trolley_id = t.trolley_id;"
  },
  {
    "prompt": "How many wheels need replacement?",
    "context": {
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT COUNT(*) FROM wheels WHERE condition = 'Needs Replacement';"
  },
  {
    "prompt": "List all cradles currently in use.",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT cradle_id FROM cradles WHERE status = 'In Use';"
  },
  {
    "prompt": "List the names of ships in cradles currently in use.",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT s.name FROM ships s JOIN cradles c ON s.ship_id = c.ship_id WHERE c.status = 'In Use';"
  },
  {
    "prompt": "List all lifts and their capacities.",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type, capacity FROM lifts;"
  },
  {
    "prompt": "Which lifts are operational and have a capacity greater than 10 tons?",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type, capacity FROM lifts WHERE status = 'Operational' AND capacity > 10;"
  },
  {
    "prompt": "List all lifts that are under maintenance.",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type FROM lifts WHERE status = 'Under Maintenance';"
  },
  {
    "prompt": "How many trolleys are currently under maintenance?",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      }
    },
    "query": "SELECT COUNT(*) FROM trolleys WHERE status = 'Under Maintenance';"
  },
  {
    "prompt": "What is the condition of wheels for trolleys under maintenance?",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT w.wheel_id, w.condition FROM wheels w JOIN trolleys t ON w.trolley_id = t.trolley_id WHERE t.status = 'Under Maintenance';"
  },
  {
    "prompt": "List the IDs and types of all operational lifts.",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type FROM lifts WHERE status = 'Operational';"
  },
  {
    "prompt": "Which lifts can lift more than 15 tons?",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type, capacity FROM lifts WHERE capacity > 15;"
  },
  {
    "prompt": "List all cradles associated with ships under repair.",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT c.cradle_id, s.name FROM cradles c JOIN ships s ON c.ship_id = s.ship_id JOIN repairs r ON s.ship_id = r.ship_id WHERE r.status = 'In Progress';"
  },
  {
    "prompt": "How many operational trolleys have all their wheels in good condition?",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT COUNT(DISTINCT t.trolley_id) FROM trolleys t JOIN wheels w ON t.trolley_id = w.trolley_id WHERE t.status = 'Operational' AND w.condition = 'Good' GROUP BY t.trolley_id HAVING COUNT(w.wheel_id) = (SELECT COUNT(*) FROM wheels w2 WHERE w2.trolley_id = t.trolley_id);"
  },
  {
    "prompt": "List all trolleys and their statuses.",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      }
    },
    "query": "SELECT trolley_id, status FROM trolleys;"
  },
  {
    "prompt": "Which trolleys are operational?",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      }
    },
    "query": "SELECT trolley_id FROM trolleys WHERE status = 'Operational';"
  },
  {
    "prompt": "List the condition of all wheels and their associated trolleys.",
    "context": {
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      },
      "trolleys": {
        "columns": ["trolley_id", "status"]
      }
    },
    "query": "SELECT w.wheel_id, w.condition, t.status FROM wheels w JOIN trolleys t ON w.trolley_id = t.trolley_id;"
  },
  {
    "prompt": "How many wheels need replacement?",
    "context": {
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT COUNT(*) FROM wheels WHERE condition = 'Needs Replacement';"
  },
  {
    "prompt": "List all cradles currently in use.",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT cradle_id FROM cradles WHERE status = 'In Use';"
  },
  {
    "prompt": "List the names of ships in cradles currently in use.",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT s.name FROM ships s JOIN cradles c ON s.ship_id = c.ship_id WHERE c.status = 'In Use';"
  },
  {
    "prompt": "List all lifts and their capacities.",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type, capacity FROM lifts;"
  },
  {
    "prompt": "Which lifts are operational and have a capacity greater than 10 tons?",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type, capacity FROM lifts WHERE status = 'Operational' AND capacity > 10;"
  },
  {
    "prompt": "List all lifts that are under maintenance.",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type FROM lifts WHERE status = 'Under Maintenance';"
  },
  {
    "prompt": "How many trolleys are currently under maintenance?",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      }
    },
    "query": "SELECT COUNT(*) FROM trolleys WHERE status = 'Under Maintenance';"
  },
  {
    "prompt": "What is the condition of wheels for trolleys under maintenance?",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT w.wheel_id, w.condition FROM wheels w JOIN trolleys t ON w.trolley_id = t.trolley_id WHERE t.status = 'Under Maintenance';"
  },
  {
    "prompt": "List the IDs and types of all operational lifts.",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type FROM lifts WHERE status = 'Operational';"
  },
  {
    "prompt": "Which lifts can lift more than 15 tons?",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type, capacity FROM lifts WHERE capacity > 15;"
  },
  {
    "prompt": "List all cradles associated with ships under repair.",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT c.cradle_id, s.name FROM cradles c JOIN ships s ON c.ship_id = s.ship_id JOIN repairs r ON s.ship_id = r.ship_id WHERE r.status = 'In Progress';"
  },
  {
    "prompt": "How many operational trolleys have all their wheels in good condition?",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT COUNT(DISTINCT t.trolley_id) FROM trolleys t JOIN wheels w ON t.trolley_id = w.trolley_id WHERE t.status = 'Operational' AND w.condition = 'Good' GROUP BY t.trolley_id HAVING COUNT(w.wheel_id) = (SELECT COUNT(*) FROM wheels w2 WHERE w2.trolley_id = t.trolley_id);"
  },
  {
    "prompt": "Show the IDs of all cradles that are not currently in use.",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT cradle_id FROM cradles WHERE status != 'In Use';"
  },
  {
    "prompt": "List the cradles not in use.",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT cradle_id FROM cradles WHERE status != 'In Use';"
  },
  {
    "prompt": "Which ships are held in cradles that are under maintenance?",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT s.name FROM ships s JOIN cradles c ON s.ship_id = c.ship_id WHERE c.status = 'Under Maintenance';"
  },
  {
    "prompt": "Find the names of ships whose cradles are under maintenance.",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT s.name FROM ships s JOIN cradles c ON s.ship_id = c.ship_id WHERE c.status = 'Under Maintenance';"
  },
  {
    "prompt": "How many lifts are not operational?",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT COUNT(*) FROM lifts WHERE status != 'Operational';"
  },
  {
    "prompt": "Count the lifts that are currently not operational.",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT COUNT(*) FROM lifts WHERE status != 'Operational';"
  },
  {
    "prompt": "List all wheels that are attached to trolleys under maintenance.",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT w.wheel_id, w.condition FROM wheels w JOIN trolleys t ON w.trolley_id = t.trolley_id WHERE t.status = 'Under Maintenance';"
  },
  {
    "prompt": "Find the IDs and conditions of wheels belonging to trolleys that are being repaired.",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT w.wheel_id, w.condition FROM wheels w JOIN trolleys t ON w.trolley_id = t.trolley_id WHERE t.status = 'Under Maintenance';"
  },
  {
    "prompt": "Which ships have repairs in progress?",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT s.name FROM ships s JOIN repairs r ON s.ship_id = r.ship_id WHERE r.status = 'In Progress';"
  },
  {
    "prompt": "List the names of ships currently undergoing repairs.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT s.name FROM ships s JOIN repairs r ON s.ship_id = r.ship_id WHERE r.status = 'In Progress';"
  },
  {
    "prompt": "List the repair tasks with their estimated and actual times.",
    "context": {
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT task_name, estimated_time, actual_time FROM repair_tasks;"
  },
  {
    "prompt": "Find all repair tasks and their estimated vs actual times.",
    "context": {
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT task_name, estimated_time, actual_time FROM repair_tasks;"
  },
  {
    "prompt": "How many trolleys have all their wheels in good condition?",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT COUNT(DISTINCT t.trolley_id) FROM trolleys t JOIN wheels w ON t.trolley_id = w.trolley_id WHERE w.condition = 'Good' GROUP BY t.trolley_id HAVING COUNT(w.wheel_id) = (SELECT COUNT(*) FROM wheels w2 WHERE w2.trolley_id = t.trolley_id);"
  },
  {
    "prompt": "Count the trolleys where all wheels are in good condition.",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT COUNT(DISTINCT t.trolley_id) FROM trolleys t JOIN wheels w ON t.trolley_id = w.trolley_id WHERE w.condition = 'Good' GROUP BY t.trolley_id HAVING COUNT(w.wheel_id) = (SELECT COUNT(*) FROM wheels w2 WHERE w2.trolley_id = t.trolley_id);"
  },
  {
    "prompt": "List all employees assigned to repair tasks.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ]
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id;"
  },
  {
    "prompt": "Show the names of employees who are assigned to tasks.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ]
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id;"
  },
  {
    "prompt": "Find all employees with their assigned repair tasks.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ]
      }
    },
    "query": "SELECT e.first_name, e.last_name, rt.task_name FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id JOIN repair_tasks rt ON et.task_id = rt.task_id;"
  },
  {
    "prompt": "Which employees are assigned to specific repair tasks?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ]
      }
    },
    "query": "SELECT e.first_name, e.last_name, rt.task_name FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id JOIN repair_tasks rt ON et.task_id = rt.task_id;"
  },
  {
    "prompt": "Get the assigned tasks for each employee.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ]
      }
    },
    "query": "SELECT e.first_name, e.last_name, rt.task_name FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id JOIN repair_tasks rt ON et.task_id = rt.task_id;"
  },
  {
    "prompt": "How many employees are assigned to repair tasks?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      }
    },
    "query": "SELECT COUNT(DISTINCT et.employee_id) FROM employee_tasks et;"
  },
  {
    "prompt": "Count the employees currently assigned to tasks.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      }
    },
    "query": "SELECT COUNT(DISTINCT et.employee_id) FROM employee_tasks et;"
  },
  {
    "prompt": "List employees working on a task assigned after January 1, 2023.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id WHERE et.assigned_date > TO_DATE('2023-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Find employees assigned to tasks after January 2023.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id WHERE et.assigned_date > TO_DATE('2023-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Which employees are assigned to tasks after January 2023?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id WHERE et.assigned_date > TO_DATE('2023-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "List employees assigned to tasks after January 2023.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id WHERE et.assigned_date > TO_DATE('2023-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "List all ships and their owners.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT name, owner FROM ships;"
  },
  {
    "prompt": "Show the names and statuses of all ships.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT name, status FROM ships;"
  },
  {
    "prompt": "Find all ships built before 2000.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT name FROM ships WHERE build_year < 2000;"
  },
  {
    "prompt": "List the names of ships that are under maintenance.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT name FROM ships WHERE status = 'Under Maintenance';"
  },
  {
    "prompt": "Find the repair tasks with their estimated and actual times.",
    "context": {
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT task_name, estimated_time, actual_time FROM repair_tasks;"
  },
  {
    "prompt": "Which employees are inspectors for inspections conducted after January 1, 2024?",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e JOIN inspection_records ir ON e.employee_id = ir.inspector_id WHERE ir.inspection_date > TO_DATE('2024-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "List all inspections for ships owned by 'Oceanic Co.'",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      }
    },
    "query": "SELECT ir.inspection_date, ir.remarks FROM inspection_records ir JOIN ships s ON ir.ship_id = s.ship_id WHERE s.owner = 'Oceanic Co.';"
  },
  {
    "prompt": "What is the total salary of all employees?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT SUM(salary) FROM employees;"
  },
  {
    "prompt": "List all employees hired after 2020.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name FROM employees WHERE hire_date > TO_DATE('2020-12-31', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Show the departments and the number of employees in each.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name;"
  },
  {
    "prompt": "List all repairs and their associated ships.",
    "context": {
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT r.repair_id, s.name FROM repairs r JOIN ships s ON r.ship_id = s.ship_id;"
  },
  {
    "prompt": "Find all invoices issued after January 1, 2023.",
    "context": {
      "invoices": {
        "columns": [
          "invoice_id",
          "repair_id",
          "amount",
          "issued_date",
          "status"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT invoice_id, amount FROM invoices WHERE issued_date > TO_DATE('2023-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "List all trolleys currently under maintenance.",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      }
    },
    "query": "SELECT trolley_id FROM trolleys WHERE status = 'Under Maintenance';"
  },
  {
    "prompt": "How many wheels need replacement?",
    "context": {
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT COUNT(*) FROM wheels WHERE condition = 'Needs Replacement';"
  },
  {
    "prompt": "Which lifts have a capacity greater than 10 tons?",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type FROM lifts WHERE capacity > 10;"
  },
  {
    "prompt": "List all cradles currently in use.",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT cradle_id FROM cradles WHERE status = 'In Use';"
  },
  {
    "prompt": "Which employees are assigned to repair tasks?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ]
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id;"
  },
  {
    "prompt": "List all ships and their current status.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT name, status FROM ships;"
  },
  {
    "prompt": "Which ships are under maintenance?",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT name FROM ships WHERE status = 'Under Maintenance';"
  },
  {
    "prompt": "Find the repair tasks for ships built after 2015.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT rt.task_name, rt.description FROM repair_tasks rt JOIN repairs r ON rt.repair_id = r.repair_id JOIN ships s ON r.ship_id = s.ship_id WHERE s.build_year > 2015;"
  },
  {
    "prompt": "List the employees working on tasks related to repairs.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ]
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id;"
  },
  {
    "prompt": "Which cradles are currently not in use?",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT cradle_id FROM cradles WHERE status != 'In Use';"
  },
  {
    "prompt": "Find the total number of lifts and their operational status.",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT COUNT(lift_id) AS total_lifts, status FROM lifts GROUP BY status;"
  },
  {
    "prompt": "List all ships and the number of repairs performed on each ship.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT s.name, COUNT(r.repair_id) AS repair_count FROM ships s LEFT JOIN repairs r ON s.ship_id = r.ship_id GROUP BY s.name;"
  },
  {
    "prompt": "How many invoices are still unpaid?",
    "context": {
      "invoices": {
        "columns": [
          "invoice_id",
          "repair_id",
          "amount",
          "issued_date",
          "status"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT COUNT(*) FROM invoices WHERE status = 'Unpaid';"
  },
  {
    "prompt": "Get the inspection records for ships inspected after January 1, 2023.",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT s.name, ir.inspection_date, ir.remarks FROM ships s JOIN inspection_records ir ON s.ship_id = ir.ship_id WHERE ir.inspection_date > TO_DATE('2023-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "List all departments and the number of employees in each.",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name"]
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      }
    },
    "query": "SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name;"
  },
  {
    "prompt": "What is the average salary of employees in each department?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name"]
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      }
    },
    "query": "SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name;"
  },
  {
    "prompt": "List all repairs completed between January and June 2023.",
    "context": {
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT repair_id, start_date, end_date FROM repairs WHERE status = 'Completed' AND start_date >= TO_DATE('2023-01-01', 'YYYY-MM-DD') AND end_date <= TO_DATE('2023-06-30', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Which employees have not been assigned any tasks?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e LEFT JOIN employee_tasks et ON e.employee_id = et.employee_id WHERE et.employee_id IS NULL;"
  },
  {
    "prompt": "List the repair tasks and their completion time for each repair.",
    "context": {
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT task_name, estimated_time, actual_time FROM repair_tasks;"
  },
  {
    "prompt": "List all inspection records with their remarks.",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      }
    },
    "query": "SELECT inspection_id, inspection_date, remarks FROM inspection_records;"
  },
  {
    "prompt": "Find all inspections conducted after January 1, 2023.",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      }
    },
    "query": "SELECT inspection_id, inspection_date FROM inspection_records WHERE inspection_date > TO_DATE('2023-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Which ships have inspections scheduled after June 30, 2023?",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT s.name FROM ships s JOIN inspection_records ir ON s.ship_id = ir.ship_id WHERE ir.inspection_date > TO_DATE('2023-06-30', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Get the details of inspections performed by employees named 'John Doe'.",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT ir.inspection_id, ir.inspection_date, ir.remarks FROM inspection_records ir JOIN employees e ON ir.inspector_id = e.employee_id WHERE e.first_name = 'John' AND e.last_name = 'Doe';"
  },
  {
    "prompt": "List the ships and inspection remarks for all inspections conducted in 2022.",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT s.name, ir.remarks FROM ships s JOIN inspection_records ir ON s.ship_id = ir.ship_id WHERE EXTRACT(YEAR FROM ir.inspection_date) = 2022;"
  },
  {
    "prompt": "Count the number of inspections conducted for each ship.",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT s.name, COUNT(ir.inspection_id) AS inspection_count FROM ships s JOIN inspection_records ir ON s.ship_id = ir.ship_id GROUP BY s.name;"
  },
  {
    "prompt": "Find the names of employees who inspected ships in January 2023.",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT DISTINCT e.first_name, e.last_name FROM employees e JOIN inspection_records ir ON e.employee_id = ir.inspector_id WHERE ir.inspection_date BETWEEN TO_DATE('2023-01-01', 'YYYY-MM-DD') AND TO_DATE('2023-01-31', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Which employees have conducted more than 5 inspections?",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT e.first_name, e.last_name, COUNT(ir.inspection_id) AS inspection_count FROM employees e JOIN inspection_records ir ON e.employee_id = ir.inspector_id GROUP BY e.first_name, e.last_name HAVING COUNT(ir.inspection_id) > 5;"
  },
  {
    "prompt": "List all inspections along with the names of the ships inspected.",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT ir.inspection_id, s.name, ir.inspection_date FROM inspection_records ir JOIN ships s ON ir.ship_id = s.ship_id;"
  },
  {
    "prompt": "Find inspections performed by employees from the Maintenance department.",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT ir.inspection_id, ir.inspection_date FROM inspection_records ir JOIN employees e ON ir.inspector_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.department_name = 'Maintenance';"
  },
  {
    "prompt": "List all ships and their owners.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT name, owner FROM ships;"
  },
  {
    "prompt": "Find ships built before 2010 and their current status.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT name, status FROM ships WHERE build_year < 2010;"
  },
  {
    "prompt": "How many ships are currently under maintenance?",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT COUNT(*) FROM ships WHERE status = 'Under Maintenance';"
  },
  {
    "prompt": "List all employees in the Maintenance department with their salaries.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT e.first_name, e.last_name, e.salary FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE d.department_name = 'Maintenance';"
  },
  {
    "prompt": "What is the average salary of employees in each department?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name"]
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      }
    },
    "query": "SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name;"
  },
  {
    "prompt": "List all repair tasks that took longer than the estimated time.",
    "context": {
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT task_name, estimated_time, actual_time FROM repair_tasks WHERE actual_time > estimated_time;"
  },
  {
    "prompt": "Which cradles are currently in use?",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT cradle_id FROM cradles WHERE status = 'In Use';"
  },
  {
    "prompt": "Find all wheels that need replacement and their associated trolleys.",
    "context": {
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      },
      "trolleys": {
        "columns": ["trolley_id", "status"]
      }
    },
    "query": "SELECT w.wheel_id, t.trolley_id FROM wheels w JOIN trolleys t ON w.trolley_id = t.trolley_id WHERE w.condition = 'Needs Replacement';"
  },
  {
    "prompt": "List all lifts and their capacity.",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT lift_id, type, capacity FROM lifts;"
  },
  {
    "prompt": "Which employees have not been assigned any tasks?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e LEFT JOIN employee_tasks et ON e.employee_id = et.employee_id WHERE et.employee_id IS NULL;"
  },
  {
    "prompt": "Find the details of the most recent inspection for each ship.",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT s.name, MAX(ir.inspection_date) AS recent_inspection, ir.remarks FROM ships s JOIN inspection_records ir ON s.ship_id = ir.ship_id GROUP BY s.name, ir.remarks;"
  },
  {
    "prompt": "List all invoices that have not been paid.",
    "context": {
      "invoices": {
        "columns": [
          "invoice_id",
          "repair_id",
          "amount",
          "issued_date",
          "status"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT invoice_id, amount FROM invoices WHERE status = 'Unpaid';"
  },
  {
    "prompt": "Which ships have inspections scheduled after June 2023?",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT s.name FROM ships s JOIN inspection_records ir ON s.ship_id = ir.ship_id WHERE ir.inspection_date > TO_DATE('2023-06-30', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Find the total number of repairs completed in 2022.",
    "context": {
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT COUNT(*) FROM repairs WHERE status = 'Completed' AND EXTRACT(YEAR FROM end_date) = 2022;"
  },
  {
    "prompt": "List the tasks for repairs that are still in progress.",
    "context": {
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT rt.task_name, rt.description FROM repair_tasks rt JOIN repairs r ON rt.repair_id = r.repair_id WHERE r.status = 'In Progress';"
  },
  {
    "prompt": "Find all employees who joined after 2020.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name FROM employees WHERE hire_date > TO_DATE('2020-12-31', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Which ships have never had any repairs?",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT s.name FROM ships s LEFT JOIN repairs r ON s.ship_id = r.ship_id WHERE r.repair_id IS NULL;"
  },
  {
    "prompt": "List the types of ships and their counts.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT type, COUNT(*) AS count FROM ships GROUP BY type;"
  },
  {
    "prompt": "Find the employees with the highest salaries.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, salary FROM employees WHERE salary = (SELECT MAX(salary) FROM employees);"
  },
  {
    "prompt": "How many employees are currently unavailable for tasks?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT COUNT(*) FROM employees WHERE availability_status = 'Unavailable';"
  },
  {
    "prompt": "List all repair tasks and their associated ships.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT rt.task_name, rt.description, s.name FROM repair_tasks rt JOIN repairs r ON rt.repair_id = r.repair_id JOIN ships s ON r.ship_id = s.ship_id;"
  },
  {
    "prompt": "Find the total cost of all repairs.",
    "context": {
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "invoices": {
        "columns": [
          "invoice_id",
          "repair_id",
          "amount",
          "issued_date",
          "status"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT SUM(amount) AS total_repair_cost FROM invoices;"
  },
  {
    "prompt": "What is the average repair duration for completed repairs?",
    "context": {
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT AVG(end_date - start_date) AS avg_repair_duration FROM repairs WHERE status = 'Completed';"
  },
  {
    "prompt": "Which trolleys are operational and have wheels in good condition?",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT t.trolley_id FROM trolleys t JOIN wheels w ON t.trolley_id = w.trolley_id WHERE t.status = 'Operational' AND w.condition = 'Good';"
  },
  {
    "prompt": "How many inspections were conducted by each employee?",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT e.first_name, e.last_name, COUNT(ir.inspection_id) AS inspection_count FROM employees e JOIN inspection_records ir ON e.employee_id = ir.inspector_id GROUP BY e.first_name, e.last_name;"
  },
  {
    "prompt": "List all inspections with their remarks for ships owned by 'Blue Ocean Co.'.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      }
    },
    "query": "SELECT ir.inspection_date, ir.remarks FROM inspection_records ir JOIN ships s ON ir.ship_id = s.ship_id WHERE s.owner = 'Blue Ocean Co.';"
  },
  {
    "prompt": "Which repairs are overdue as of today?",
    "context": {
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT repair_id, ship_id FROM repairs WHERE end_date < SYSDATE AND status != 'Completed';"
  },
  {
    "prompt": "List all employees who have joined after 2015 and their salaries.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, salary FROM employees WHERE hire_date > TO_DATE('2015-12-31', 'YYYY-MM-DD');"
  },
  {
    "prompt": "How many ships are owned by 'Atlantic Shipping Corp.'?",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      }
    },
    "query": "SELECT COUNT(*) FROM ships WHERE owner = 'Atlantic Shipping Corp.';"
  },
  {
    "prompt": "What is the maximum capacity of operational lifts?",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT MAX(capacity) FROM lifts WHERE status = 'Operational';"
  },
  {
    "prompt": "List the invoices issued in 2023 with their amounts.",
    "context": {
      "invoices": {
        "columns": [
          "invoice_id",
          "repair_id",
          "amount",
          "issued_date",
          "status"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT invoice_id, amount FROM invoices WHERE EXTRACT(YEAR FROM issued_date) = 2023;"
  },
  {
    "prompt": "Find the names of ships inspected by 'Jane Smith'.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT s.name FROM ships s JOIN inspection_records ir ON s.ship_id = ir.ship_id JOIN employees e ON ir.inspector_id = e.employee_id WHERE e.first_name = 'Jane' AND e.last_name = 'Smith';"
  },
  {
    "prompt": "List all repair tasks with the ship name, repair status, and employee assigned.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT rt.task_name, s.name AS ship_name, r.status AS repair_status, CONCAT(e.first_name, ' ', e.last_name) AS employee_name FROM repair_tasks rt JOIN repairs r ON rt.repair_id = r.repair_id JOIN ships s ON r.ship_id = s.ship_id LEFT JOIN employee_tasks et ON rt.task_id = et.task_id LEFT JOIN employees e ON et.employee_id = e.employee_id;"
  },
  {
    "prompt": "Find all employees who inspected ships and the repairs associated with those ships.",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT CONCAT(e.first_name, ' ', e.last_name) AS inspector_name, s.name AS ship_name, r.status AS repair_status FROM inspection_records ir JOIN employees e ON ir.inspector_id = e.employee_id JOIN ships s ON ir.ship_id = s.ship_id LEFT JOIN repairs r ON s.ship_id = r.ship_id;"
  },
  {
    "prompt": "List all invoices with ship name, repair status, and assigned employees.",
    "context": {
      "invoices": {
        "columns": [
          "invoice_id",
          "repair_id",
          "amount",
          "issued_date",
          "status"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT i.invoice_id, i.amount, s.name AS ship_name, r.status AS repair_status, CONCAT(e.first_name, ' ', e.last_name) AS employee_name FROM invoices i JOIN repairs r ON i.repair_id = r.repair_id JOIN ships s ON r.ship_id = s.ship_id LEFT JOIN repair_tasks rt ON r.repair_id = rt.repair_id LEFT JOIN employee_tasks et ON rt.task_id = et.task_id LEFT JOIN employees e ON et.employee_id = e.employee_id;"
  },
  {
    "prompt": "Which cradles are assigned to ships undergoing repairs?",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT c.cradle_id, c.status AS cradle_status, s.name AS ship_name FROM cradles c JOIN ships s ON c.ship_id = s.ship_id JOIN repairs r ON s.ship_id = r.ship_id WHERE r.status = 'In Progress';"
  },
  {
    "prompt": "List all lifts and their capacities with ships assigned to them for repairs.",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT l.lift_id, l.type, l.capacity, s.name AS ship_name FROM lifts l JOIN repairs r ON l.lift_id = r.repair_id JOIN ships s ON r.ship_id = s.ship_id WHERE r.status = 'In Progress';"
  },
  {
    "prompt": "Which trolleys and wheels are associated with ships under maintenance?",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT t.trolley_id, t.status AS trolley_status, w.wheel_id, w.condition AS wheel_condition, s.name AS ship_name FROM trolleys t JOIN wheels w ON t.trolley_id = w.trolley_id JOIN repairs r ON t.trolley_id = r.repair_id JOIN ships s ON r.ship_id = s.ship_id WHERE r.status = 'In Progress';"
  },
  {
    "prompt": "List all employees, their departments, and the tasks they are currently assigned to.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT CONCAT(e.first_name, ' ', e.last_name) AS employee_name, d.department_name, rt.task_name FROM employees e JOIN departments d ON e.department_id = d.department_id LEFT JOIN employee_tasks et ON e.employee_id = et.employee_id LEFT JOIN repair_tasks rt ON et.task_id = rt.task_id;"
  },
  {
    "prompt": "Find the invoices for repairs that include tasks assigned to multiple employees.",
    "context": {
      "invoices": {
        "columns": [
          "invoice_id",
          "repair_id",
          "amount",
          "issued_date",
          "status"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      }
    },
    "query": "SELECT i.invoice_id, i.amount FROM invoices i JOIN repairs r ON i.repair_id = r.repair_id JOIN repair_tasks rt ON r.repair_id = rt.repair_id JOIN employee_tasks et ON rt.task_id = et.task_id GROUP BY i.invoice_id, i.amount HAVING COUNT(et.employee_id) > 1;"
  },
  {
    "prompt": "Find all repair tasks, the ship names they belong to, the employees assigned, and the departments of those employees.",
    "context": {
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT rt.task_name, s.name AS ship_name, CONCAT(e.first_name, ' ', e.last_name) AS employee_name, d.department_name FROM repair_tasks rt JOIN repairs r ON rt.repair_id = r.repair_id JOIN ships s ON r.ship_id = s.ship_id JOIN employee_tasks et ON rt.task_id = et.task_id JOIN employees e ON et.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id;"
  },
  {
    "prompt": "List all invoices with their repair tasks, the ships involved, and the employees assigned to those tasks.",
    "context": {
      "invoices": {
        "columns": [
          "invoice_id",
          "repair_id",
          "amount",
          "issued_date",
          "status"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT i.invoice_id, i.amount, rt.task_name, s.name AS ship_name, CONCAT(e.first_name, ' ', e.last_name) AS employee_name FROM invoices i JOIN repairs r ON i.repair_id = r.repair_id JOIN ships s ON r.ship_id = s.ship_id JOIN repair_tasks rt ON r.repair_id = rt.repair_id JOIN employee_tasks et ON rt.task_id = et.task_id JOIN employees e ON et.employee_id = e.employee_id;"
  },
  {
    "prompt": "Find all inspection records, the ships inspected, the employees who conducted the inspections, and the repairs related to those ships.",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT ir.inspection_date, ir.remarks, s.name AS ship_name, CONCAT(e.first_name, ' ', e.last_name) AS inspector_name, r.status AS repair_status FROM inspection_records ir JOIN ships s ON ir.ship_id = s.ship_id JOIN employees e ON ir.inspector_id = e.employee_id LEFT JOIN repairs r ON s.ship_id = r.ship_id;"
  },
  {
    "prompt": "List all cradles, the ships assigned to them, the repair tasks associated with those ships, and the employees assigned.",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT c.cradle_id, c.status AS cradle_status, s.name AS ship_name, rt.task_name, CONCAT(e.first_name, ' ', e.last_name) AS employee_name FROM cradles c JOIN ships s ON c.ship_id = s.ship_id JOIN repairs r ON s.ship_id = r.ship_id JOIN repair_tasks rt ON r.repair_id = rt.repair_id JOIN employee_tasks et ON rt.task_id = et.task_id JOIN employees e ON et.employee_id = e.employee_id;"
  },
  {
    "prompt": "Which trolleys and wheels are used for ships under maintenance, and which employees are responsible for those tasks?",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT t.trolley_id, t.status AS trolley_status, w.wheel_id, w.condition AS wheel_condition, s.name AS ship_name, CONCAT(e.first_name, ' ', e.last_name) AS employee_name FROM trolleys t JOIN wheels w ON t.trolley_id = w.trolley_id JOIN repairs r ON t.trolley_id = r.repair_id JOIN ships s ON r.ship_id = s.ship_id JOIN repair_tasks rt ON r.repair_id = rt.repair_id JOIN employee_tasks et ON rt.task_id = et.task_id JOIN employees e ON et.employee_id = e.employee_id WHERE r.status = 'In Progress';"
  },
  {
    "prompt": "List all repair tasks, their ships, invoices, and the employees who handled both the repair and the inspection.",
    "context": {
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "invoices": {
        "columns": [
          "invoice_id",
          "repair_id",
          "amount",
          "issued_date",
          "status"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT rt.task_name, s.name AS ship_name, i.amount AS invoice_amount, CONCAT(e1.first_name, ' ', e1.last_name) AS repair_employee, CONCAT(e2.first_name, ' ', e2.last_name) AS inspector_employee FROM repair_tasks rt JOIN repairs r ON rt.repair_id = r.repair_id JOIN ships s ON r.ship_id = s.ship_id JOIN invoices i ON r.repair_id = i.repair_id LEFT JOIN employee_tasks et ON rt.task_id = et.task_id LEFT JOIN employees e1 ON et.employee_id = e1.employee_id LEFT JOIN inspection_records ir ON s.ship_id = ir.ship_id LEFT JOIN employees e2 ON ir.inspector_id = e2.employee_id;"
  },
  {
    "prompt": "List all repair tasks with the ship name, repair status, and employee assigned.",
    "context": {
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "employees": {
        "columns": ["employee_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT rt.task_name, s.name AS ship_name, r.status AS repair_status, CONCAT(e.first_name, ' ', e.last_name) AS employee_name FROM repair_tasks rt JOIN repairs r ON rt.repair_id = r.repair_id JOIN ships s ON r.ship_id = s.ship_id JOIN employee_tasks et ON rt.task_id = et.task_id JOIN employees e ON et.employee_id = e.employee_id;"
  },
  {
    "prompt": "Which employees inspected ships and also participated in repairs for those ships?",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "employee_tasks": {
        "columns": ["employee_task_id", "employee_id", "task_id"],
        "foreign_keys": {
          "employee_id": "employees"
        }
      },
      "employees": {
        "columns": ["employee_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT CONCAT(e.first_name, ' ', e.last_name) AS employee_name FROM inspection_records ir JOIN employees e ON ir.inspector_id = e.employee_id JOIN repairs r ON ir.ship_id = r.ship_id JOIN employee_tasks et ON e.employee_id = et.employee_id;"
  },
  {
    "prompt": "List all cradles and trolleys associated with ships under maintenance.",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "ships": {
        "columns": ["ship_id", "name", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT c.cradle_id, c.status AS cradle_status, t.trolley_id, t.status AS trolley_status, s.name AS ship_name FROM cradles c JOIN ships s ON c.ship_id = s.ship_id JOIN repairs r ON s.ship_id = r.ship_id JOIN trolleys t ON t.trolley_id = r.repair_id WHERE r.status = 'In Progress';"
  },
  {
    "prompt": "Which repair tasks involved multiple employees and resulted in invoices over $5000?",
    "context": {
      "repair_tasks": {
        "columns": ["task_id", "repair_id", "task_name"],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "employee_tasks": {
        "columns": ["employee_task_id", "employee_id", "task_id"],
        "foreign_keys": {
          "task_id": "repair_tasks"
        }
      },
      "invoices": {
        "columns": ["invoice_id", "repair_id", "amount"],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT rt.task_name FROM repair_tasks rt JOIN employee_tasks et ON rt.task_id = et.task_id JOIN invoices i ON rt.repair_id = i.repair_id GROUP BY rt.task_name HAVING COUNT(et.employee_id) > 1 AND MAX(i.amount) > 5000;"
  },
  {
    "prompt": "Find all inspections, their associated repairs, and the employees involved in both.",
    "context": {
      "inspection_records": {
        "columns": ["inspection_id", "ship_id", "inspector_id"],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "employee_tasks": {
        "columns": ["employee_task_id", "employee_id", "task_id"],
        "foreign_keys": {
          "employee_id": "employees"
        }
      },
      "employees": {
        "columns": ["employee_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT ir.inspection_id, r.status AS repair_status, CONCAT(e.first_name, ' ', e.last_name) AS employee_name FROM inspection_records ir JOIN repairs r ON ir.ship_id = r.ship_id JOIN employee_tasks et ON ir.inspector_id = et.employee_id JOIN employees e ON et.employee_id = e.employee_id;"
  },
  {
    "prompt": "List all ships, their repairs, the employees assigned, and the invoices generated.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "employee_tasks": {
        "columns": ["employee_task_id", "employee_id", "task_id"],
        "foreign_keys": {
          "employee_id": "employees"
        }
      },
      "invoices": {
        "columns": ["invoice_id", "repair_id", "amount"],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "employees": {
        "columns": ["employee_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT s.name AS ship_name, r.status AS repair_status, CONCAT(e.first_name, ' ', e.last_name) AS employee_name, i.amount AS invoice_amount FROM ships s JOIN repairs r ON s.ship_id = r.ship_id JOIN employee_tasks et ON r.repair_id = et.task_id JOIN employees e ON et.employee_id = e.employee_id JOIN invoices i ON r.repair_id = i.repair_id;"
  },
  {
    "prompt": "Find all ships, their repair tasks, the employees assigned to each task, and the associated invoices.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "repair_tasks": {
        "columns": ["task_id", "repair_id", "task_name", "description"],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "employee_tasks": {
        "columns": ["employee_task_id", "employee_id", "task_id"],
        "foreign_keys": {
          "task_id": "repair_tasks"
        }
      },
      "employees": {
        "columns": ["employee_id", "first_name", "last_name"]
      },
      "invoices": {
        "columns": ["invoice_id", "repair_id", "amount"],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT s.name AS ship_name, rt.task_name, CONCAT(e.first_name, ' ', e.last_name) AS employee_name, i.amount AS invoice_amount FROM ships s JOIN repairs r ON s.ship_id = r.ship_id JOIN repair_tasks rt ON r.repair_id = rt.repair_id JOIN employee_tasks et ON rt.task_id = et.task_id JOIN employees e ON et.employee_id = e.employee_id LEFT JOIN invoices i ON r.repair_id = i.repair_id;"
  },
  {
    "prompt": "List all inspection records, the ships inspected, the employees who inspected them, and their assigned repair tasks.",
    "context": {
      "inspection_records": {
        "columns": ["inspection_id", "ship_id", "inspector_id", "remarks"],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "status"]
      },
      "employees": {
        "columns": ["employee_id", "first_name", "last_name"]
      },
      "repair_tasks": {
        "columns": ["task_id", "repair_id", "task_name"],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT ir.inspection_id, s.name AS ship_name, CONCAT(e.first_name, ' ', e.last_name) AS inspector_name, rt.task_name FROM inspection_records ir JOIN ships s ON ir.ship_id = s.ship_id JOIN employees e ON ir.inspector_id = e.employee_id LEFT JOIN repairs r ON s.ship_id = r.ship_id LEFT JOIN repair_tasks rt ON r.repair_id = rt.repair_id;"
  },
  {
    "prompt": "Which employees are assigned to repair tasks on ships inspected in 2023?",
    "context": {
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id"
        ],
        "foreign_keys": {
          "ship_id": "ships",
          "inspector_id": "employees"
        }
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "repair_tasks": {
        "columns": ["task_id", "repair_id", "task_name"],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "employee_tasks": {
        "columns": ["employee_task_id", "employee_id", "task_id"],
        "foreign_keys": {
          "task_id": "repair_tasks"
        }
      },
      "employees": {
        "columns": ["employee_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT CONCAT(e.first_name, ' ', e.last_name) AS employee_name, rt.task_name, s.name AS ship_name FROM inspection_records ir JOIN ships s ON ir.ship_id = s.ship_id JOIN repairs r ON s.ship_id = r.ship_id JOIN repair_tasks rt ON r.repair_id = rt.repair_id JOIN employee_tasks et ON rt.task_id = et.task_id JOIN employees e ON et.employee_id = e.employee_id WHERE EXTRACT(YEAR FROM ir.inspection_date) = 2023;"
  },
  {
    "prompt": "List all cradles, their associated ships, the repair tasks performed, and the employees involved.",
    "context": {
      "cradles": {
        "columns": ["cradle_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "repair_tasks": {
        "columns": ["task_id", "repair_id", "task_name"],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "employee_tasks": {
        "columns": ["employee_task_id", "employee_id", "task_id"],
        "foreign_keys": {
          "task_id": "repair_tasks"
        }
      },
      "employees": {
        "columns": ["employee_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT c.cradle_id, s.name AS ship_name, rt.task_name, CONCAT(e.first_name, ' ', e.last_name) AS employee_name FROM cradles c JOIN ships s ON c.ship_id = s.ship_id JOIN repairs r ON s.ship_id = r.ship_id JOIN repair_tasks rt ON r.repair_id = rt.repair_id JOIN employee_tasks et ON rt.task_id = et.task_id JOIN employees e ON et.employee_id = e.employee_id;"
  },
  {
    "prompt": "Which trolleys and wheels are used for ships under maintenance?",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      },
      "ships": {
        "columns": ["ship_id", "name", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT t.trolley_id, t.status AS trolley_status, w.wheel_id, w.condition AS wheel_condition, s.name AS ship_name FROM trolleys t JOIN wheels w ON t.trolley_id = w.trolley_id JOIN repairs r ON t.trolley_id = r.repair_id JOIN ships s ON r.ship_id = s.ship_id WHERE r.status = 'In Progress';"
  },
  {
    "prompt": "Find all repair tasks that exceeded their estimated time by more than 20%.",
    "context": {
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ]
      }
    },
    "query": "SELECT task_name FROM repair_tasks WHERE actual_time > estimated_time * 1.2;"
  },
  {
    "prompt": "Which ships have the highest repair costs in the last five years?",
    "context": {
      "ships": {
        "columns": ["ship_id", "name"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "invoices": {
        "columns": ["invoice_id", "repair_id", "amount"],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT s.name AS ship_name, SUM(i.amount) AS total_repair_cost FROM ships s JOIN repairs r ON s.ship_id = r.ship_id JOIN invoices i ON r.repair_id = i.repair_id WHERE r.end_date >= ADD_MONTHS(SYSDATE, -60) GROUP BY s.name ORDER BY total_repair_cost DESC;"
  },
  {
    "prompt": "List the total number of employees grouped by availability status.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT availability_status, COUNT(*) AS employee_count FROM employees GROUP BY availability_status;"
  },
  {
    "prompt": "Find the average salary of employees in each department.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name;"
  },
  {
    "prompt": "List all repairs that have exceeded their expected end date.",
    "context": {
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT repair_id, ship_id FROM repairs WHERE end_date < SYSDATE AND status != 'Completed';"
  },
  {
    "prompt": "Find all ships that have not been inspected in the last two years.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT s.name FROM ships s LEFT JOIN inspection_records ir ON s.ship_id = ir.ship_id WHERE ir.inspection_date < ADD_MONTHS(SYSDATE, -24) OR ir.inspection_date IS NULL;"
  },
  {
    "prompt": "List the total repair costs for each ship.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"]
      },
      "invoices": {
        "columns": [
          "invoice_id",
          "repair_id",
          "amount",
          "issued_date",
          "status"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT s.name, SUM(i.amount) AS total_repair_cost FROM ships s JOIN repairs r ON s.ship_id = r.ship_id JOIN invoices i ON r.repair_id = i.repair_id GROUP BY s.name;"
  },
  {
    "prompt": "Find all employees who have been assigned tasks but are currently unavailable.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees"
        }
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id WHERE e.availability_status = 'Unavailable';"
  },
  {
    "prompt": "List the names and capacities of all operational lifts.",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT type, capacity FROM lifts WHERE status = 'Operational';"
  },
  {
    "prompt": "Find the condition of wheels for each trolley under maintenance.",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT w.wheel_id, w.condition FROM wheels w JOIN trolleys t ON w.trolley_id = t.trolley_id WHERE t.status = 'Under Maintenance';"
  },
  {
    "prompt": "List all employees who were hired in the last five years and their departments.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT e.first_name, e.last_name, d.department_name FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE e.hire_date > ADD_MONTHS(SYSDATE, -60);"
  },
  {
    "prompt": "Find the total number of repairs performed for ships owned by 'Oceanic Co.'.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT COUNT(r.repair_id) AS total_repairs FROM repairs r JOIN ships s ON r.ship_id = s.ship_id WHERE s.owner = 'Oceanic Co.';"
  },
  {
    "prompt": "List the total number of employees grouped by availability status.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT availability_status, COUNT(*) AS employee_count FROM employees GROUP BY availability_status;"
  },
  {
    "prompt": "Find the average salary of employees in each department.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name;"
  },
  {
    "prompt": "List all repairs that have exceeded their expected end date.",
    "context": {
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT repair_id, ship_id FROM repairs WHERE end_date < SYSDATE AND status != 'Completed';"
  },
  {
    "prompt": "Find all ships that have not been inspected in the last two years.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT s.name FROM ships s LEFT JOIN inspection_records ir ON s.ship_id = ir.ship_id WHERE ir.inspection_date < ADD_MONTHS(SYSDATE, -24) OR ir.inspection_date IS NULL;"
  },
  {
    "prompt": "List the total repair costs for each ship.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"]
      },
      "invoices": {
        "columns": [
          "invoice_id",
          "repair_id",
          "amount",
          "issued_date",
          "status"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT s.name, SUM(i.amount) AS total_repair_cost FROM ships s JOIN repairs r ON s.ship_id = r.ship_id JOIN invoices i ON r.repair_id = i.repair_id GROUP BY s.name;"
  },
  {
    "prompt": "Find all employees who have been assigned tasks but are currently unavailable.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees"
        }
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id WHERE e.availability_status = 'Unavailable';"
  },
  {
    "prompt": "List the names and capacities of all operational lifts.",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT type, capacity FROM lifts WHERE status = 'Operational';"
  },
  {
    "prompt": "Find the condition of wheels for each trolley under maintenance.",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT w.wheel_id, w.condition FROM wheels w JOIN trolleys t ON w.trolley_id = t.trolley_id WHERE t.status = 'Under Maintenance';"
  },
  {
    "prompt": "List all employees who were hired in the last five years and their departments.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT e.first_name, e.last_name, d.department_name FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE e.hire_date > ADD_MONTHS(SYSDATE, -60);"
  },
  {
    "prompt": "Find the total number of repairs performed for ships owned by 'Oceanic Co.'.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT COUNT(r.repair_id) AS total_repairs FROM repairs r JOIN ships s ON r.ship_id = s.ship_id WHERE s.owner = 'Oceanic Co.';"
  },
  {
    "prompt": "Which ships have repairs overdue by more than 30 days?",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT s.name, r.repair_id FROM ships s JOIN repairs r ON s.ship_id = r.ship_id WHERE r.end_date < SYSDATE - 30 AND r.status != 'Completed';"
  },
  {
    "prompt": "List the repairs currently in progress and their expected completion dates.",
    "context": {
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT repair_id, ship_id, end_date FROM repairs WHERE status = 'In Progress';"
  },
  {
    "prompt": "Find the total downtime for all ships due to maintenance in the last year.",
    "context": {
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT ship_id, SUM(end_date - start_date) AS total_downtime FROM repairs WHERE start_date > ADD_MONTHS(SYSDATE, -12) AND status = 'Completed' GROUP BY ship_id;"
  },
  {
    "prompt": "List the most frequently repaired ships and the number of repairs for each.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT s.name, COUNT(r.repair_id) AS repair_count FROM ships s JOIN repairs r ON s.ship_id = r.ship_id GROUP BY s.name ORDER BY repair_count DESC;"
  },
  {
    "prompt": "List the total number of employees grouped by availability status.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT availability_status, COUNT(*) AS employee_count FROM employees GROUP BY availability_status;"
  },
  {
    "prompt": "Find the average salary of employees in each department.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name;"
  },
  {
    "prompt": "List all repairs that have exceeded their expected end date.",
    "context": {
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT repair_id, ship_id FROM repairs WHERE end_date < SYSDATE AND status != 'Completed';"
  },
  {
    "prompt": "Find all ships that have not been inspected in the last two years.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "inspection_records": {
        "columns": [
          "inspection_id",
          "ship_id",
          "inspection_date",
          "inspector_id",
          "remarks"
        ],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT s.name FROM ships s LEFT JOIN inspection_records ir ON s.ship_id = ir.ship_id WHERE ir.inspection_date < ADD_MONTHS(SYSDATE, -24) OR ir.inspection_date IS NULL;"
  },
  {
    "prompt": "List the total repair costs for each ship.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"]
      },
      "invoices": {
        "columns": [
          "invoice_id",
          "repair_id",
          "amount",
          "issued_date",
          "status"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT s.name, SUM(i.amount) AS total_repair_cost FROM ships s JOIN repairs r ON s.ship_id = r.ship_id JOIN invoices i ON r.repair_id = i.repair_id GROUP BY s.name;"
  },
  {
    "prompt": "Find all employees who have been assigned tasks but are currently unavailable.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees"
        }
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id WHERE e.availability_status = 'Unavailable';"
  },
  {
    "prompt": "List the names and capacities of all operational lifts.",
    "context": {
      "lifts": {
        "columns": ["lift_id", "type", "status", "capacity"]
      }
    },
    "query": "SELECT type, capacity FROM lifts WHERE status = 'Operational';"
  },
  {
    "prompt": "Find the condition of wheels for each trolley under maintenance.",
    "context": {
      "trolleys": {
        "columns": ["trolley_id", "status"]
      },
      "wheels": {
        "columns": ["wheel_id", "trolley_id", "condition"],
        "foreign_keys": {
          "trolley_id": "trolleys"
        }
      }
    },
    "query": "SELECT w.wheel_id, w.condition FROM wheels w JOIN trolleys t ON w.trolley_id = t.trolley_id WHERE t.status = 'Under Maintenance';"
  },
  {
    "prompt": "List all employees who were hired in the last five years and their departments.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT e.first_name, e.last_name, d.department_name FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE e.hire_date > ADD_MONTHS(SYSDATE, -60);"
  },
  {
    "prompt": "Find the total number of repairs performed for ships owned by 'Oceanic Co.'.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT COUNT(r.repair_id) AS total_repairs FROM repairs r JOIN ships s ON r.ship_id = s.ship_id WHERE s.owner = 'Oceanic Co.';"
  },
  {
    "prompt": "Which ships have repairs overdue by more than 30 days?",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT s.name, r.repair_id FROM ships s JOIN repairs r ON s.ship_id = r.ship_id WHERE r.end_date < SYSDATE - 30 AND r.status != 'Completed';"
  },
  {
    "prompt": "List the repairs currently in progress and their expected completion dates.",
    "context": {
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT repair_id, ship_id, end_date FROM repairs WHERE status = 'In Progress';"
  },
  {
    "prompt": "Find the total downtime for all ships due to maintenance in the last year.",
    "context": {
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT ship_id, SUM(end_date - start_date) AS total_downtime FROM repairs WHERE start_date > ADD_MONTHS(SYSDATE, -12) AND status = 'Completed' GROUP BY ship_id;"
  },
  {
    "prompt": "List the most frequently repaired ships and the number of repairs for each.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT s.name, COUNT(r.repair_id) AS repair_count FROM ships s JOIN repairs r ON s.ship_id = r.ship_id GROUP BY s.name ORDER BY repair_count DESC;"
  },
  {
    "prompt": "Which employees have been assigned to the most tasks in the last year?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      }
    },
    "query": "SELECT e.first_name, e.last_name, COUNT(et.task_id) AS task_count FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id WHERE et.assigned_date > ADD_MONTHS(SYSDATE, -12) GROUP BY e.first_name, e.last_name ORDER BY task_count DESC;"
  },
  {
    "prompt": "Identify the top 3 employees with the highest total task time in the last year.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ]
      }
    },
    "query": "SELECT e.first_name, e.last_name, SUM(rt.actual_time) AS total_task_time FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id JOIN repair_tasks rt ON et.task_id = rt.task_id WHERE et.assigned_date > ADD_MONTHS(SYSDATE, -12) GROUP BY e.first_name, e.last_name ORDER BY total_task_time DESC FETCH FIRST 3 ROWS ONLY;"
  },
  {
    "prompt": "List all invoices issued for repairs in the last 6 months, including ship names and amounts.",
    "context": {
      "ships": {
        "columns": ["ship_id", "name", "owner", "type", "build_year", "status"]
      },
      "repairs": {
        "columns": ["repair_id", "ship_id", "start_date", "end_date", "status"]
      },
      "invoices": {
        "columns": [
          "invoice_id",
          "repair_id",
          "amount",
          "issued_date",
          "status"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      }
    },
    "query": "SELECT s.name AS ship_name, i.amount, i.issued_date FROM invoices i JOIN repairs r ON i.repair_id = r.repair_id JOIN ships s ON r.ship_id = s.ship_id WHERE i.issued_date > ADD_MONTHS(SYSDATE, -6);"
  },
  {
    "prompt": "Find all employees who worked on a repair that exceeded its estimated time by more than 20%.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date"
        ],
        "foreign_keys": {
          "employee_id": "employees",
          "task_id": "repair_tasks"
        }
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time"
        ]
      }
    },
    "query": "SELECT DISTINCT e.first_name, e.last_name FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id JOIN repair_tasks rt ON et.task_id = rt.task_id WHERE rt.actual_time > rt.estimated_time * 1.2;"
  },
  {
    "prompt": "List the total number of employees grouped by availability status.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT availability_status, COUNT(*) AS employee_count FROM employees GROUP BY availability_status;"
  },
  {
    "prompt": "How many employees are there in each availability category?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT availability_status, COUNT(*) AS employee_count FROM employees GROUP BY availability_status;"
  },
  {
    "prompt": "Provide a count of employees based on their availability.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT availability_status, COUNT(*) AS employee_count FROM employees GROUP BY availability_status;"
  },
  {
    "prompt": "Group employees by their availability status and show the total for each group.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT availability_status, COUNT(*) AS employee_count FROM employees GROUP BY availability_status;"
  },
  {
    "prompt": "What is the number of employees available versus unavailable?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ]
      }
    },
    "query": "SELECT availability_status, COUNT(*) AS employee_count FROM employees GROUP BY availability_status;"
  },
  {
    "prompt": "Find the average salary of employees in each department.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name;"
  },
  {
    "prompt": "What is the average salary for every department?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name;"
  },
  {
    "prompt": "Show the average employee salary in each department.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name;"
  },
  {
    "prompt": "Calculate the mean salary of employees, grouped by department.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name;"
  },
  {
    "prompt": "Provide the department-wise average salaries for employees.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name;"
  },
  {
    "prompt": "List all vehicles and their current status.",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      }
    },
    "query": "SELECT name, status FROM vehicles;"
  },
  {
    "prompt": "Which vehicles have maintenance in progress?",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      },
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      }
    },
    "query": "SELECT v.name FROM vehicles v JOIN maintenance_records mr ON v.vehicle_id = mr.vehicle_id WHERE mr.status = 'In Progress';"
  },
  {
    "prompt": "Find the total cost of maintenance for each vehicle.",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      },
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      }
    },
    "query": "SELECT v.name, SUM(mr.cost) AS total_cost FROM vehicles v JOIN maintenance_records mr ON v.vehicle_id = mr.vehicle_id GROUP BY v.name;"
  },
  {
    "prompt": "List all maintenance tasks for the vehicle named 'Heavy Loader 2000'.",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      },
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      },
      "maintenance_tasks": {
        "columns": [
          "task_id",
          "maintenance_id",
          "task_name",
          "description",
          "estimated_cost",
          "actual_cost"
        ],
        "foreign_keys": {
          "maintenance_id": "maintenance_records"
        }
      }
    },
    "query": "SELECT mt.task_name, mt.description FROM maintenance_tasks mt JOIN maintenance_records mr ON mt.maintenance_id = mr.maintenance_id JOIN vehicles v ON mr.vehicle_id = v.vehicle_id WHERE v.name = 'Heavy Loader 2000';"
  },
  {
    "prompt": "Which workers are part of the 'Construction Team A'?",
    "context": {
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ],
        "foreign_keys": {
          "team_id": "teams"
        }
      },
      "teams": {
        "columns": ["team_id", "team_name", "manager_id"],
        "foreign_keys": {
          "manager_id": "workers"
        }
      }
    },
    "query": "SELECT w.first_name, w.last_name FROM workers w JOIN teams t ON w.team_id = t.team_id WHERE t.team_name = 'Construction Team A';"
  },
  {
    "prompt": "How many spare parts are available for use?",
    "context": {
      "spare_parts": {
        "columns": ["part_id", "name", "type", "quantity", "status"]
      }
    },
    "query": "SELECT SUM(quantity) AS total_available_parts FROM spare_parts WHERE status = 'Available';"
  },
  {
    "prompt": "List all equipment that has not been serviced in the last 6 months.",
    "context": {
      "equipment": {
        "columns": [
          "equipment_id",
          "name",
          "type",
          "status",
          "last_serviced_date"
        ]
      }
    },
    "query": "SELECT name FROM equipment WHERE last_serviced_date < ADD_MONTHS(SYSDATE, -6);"
  },
  {
    "prompt": "Which workers used the equipment named 'Bulldozer 9000' in the past month?",
    "context": {
      "equipment": {
        "columns": [
          "equipment_id",
          "name",
          "type",
          "status",
          "last_serviced_date"
        ]
      },
      "equipment_usage": {
        "columns": [
          "usage_id",
          "equipment_id",
          "worker_id",
          "start_time",
          "end_time",
          "purpose"
        ],
        "foreign_keys": {
          "equipment_id": "equipment",
          "worker_id": "workers"
        }
      },
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ]
      }
    },
    "query": "SELECT w.first_name, w.last_name FROM workers w JOIN equipment_usage eu ON w.worker_id = eu.worker_id JOIN equipment e ON eu.equipment_id = e.equipment_id WHERE e.name = 'Bulldozer 9000' AND eu.start_time > ADD_MONTHS(SYSDATE, -1);"
  },
  {
    "prompt": "Find the names of projects that are currently in progress.",
    "context": {
      "projects": {
        "columns": ["project_id", "name", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT name FROM projects WHERE status = 'In Progress';"
  },
  {
    "prompt": "How many workers are assigned to each project?",
    "context": {
      "project_assignments": {
        "columns": [
          "assignment_id",
          "project_id",
          "worker_id",
          "assigned_date",
          "completion_date",
          "status"
        ],
        "foreign_keys": {
          "project_id": "projects",
          "worker_id": "workers"
        }
      },
      "projects": {
        "columns": ["project_id", "name", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT p.name, COUNT(pa.worker_id) AS worker_count FROM projects p JOIN project_assignments pa ON p.project_id = pa.project_id GROUP BY p.name;"
  },
  {
    "prompt": "Which equipment parts have been used in the last maintenance?",
    "context": {
      "equipment_parts": {
        "columns": ["id", "equipment_id", "part_id", "quantity_used"],
        "foreign_keys": {
          "equipment_id": "equipment",
          "part_id": "spare_parts"
        }
      },
      "equipment": {
        "columns": [
          "equipment_id",
          "name",
          "type",
          "status",
          "last_serviced_date"
        ]
      },
      "spare_parts": {
        "columns": ["part_id", "name", "type", "quantity", "status"]
      }
    },
    "query": "SELECT sp.name, ep.quantity_used FROM equipment_parts ep JOIN spare_parts sp ON ep.part_id = sp.part_id WHERE ep.equipment_id IN (SELECT equipment_id FROM equipment WHERE last_serviced_date = (SELECT MAX(last_serviced_date) FROM equipment));"
  },
  {
    "prompt": "What is the total cost of completed maintenance tasks?",
    "context": {
      "maintenance_tasks": {
        "columns": [
          "task_id",
          "maintenance_id",
          "task_name",
          "description",
          "estimated_cost",
          "actual_cost"
        ],
        "foreign_keys": {
          "maintenance_id": "maintenance_records"
        }
      },
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      }
    },
    "query": "SELECT SUM(mt.actual_cost) AS total_cost FROM maintenance_tasks mt JOIN maintenance_records mr ON mt.maintenance_id = mr.maintenance_id WHERE mr.status = 'Completed';"
  },
  {
    "prompt": "List all vehicles that have passed safety audits in 2023.",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      },
      "safety_audits": {
        "columns": [
          "audit_id",
          "vehicle_id",
          "audit_date",
          "auditor_id",
          "remarks"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles",
          "auditor_id": "workers"
        }
      }
    },
    "query": "SELECT v.name FROM vehicles v JOIN safety_audits sa ON v.vehicle_id = sa.vehicle_id WHERE EXTRACT(YEAR FROM sa.audit_date) = 2023 AND sa.remarks LIKE '%passed%';"
  },
  {
    "prompt": "Which vehicles have not undergone maintenance in the last year?",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      },
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      }
    },
    "query": "SELECT v.name FROM vehicles v LEFT JOIN maintenance_records mr ON v.vehicle_id = mr.vehicle_id WHERE mr.end_date < ADD_MONTHS(SYSDATE, -12) OR mr.end_date IS NULL;"
  },
  {
    "prompt": "List all workers assigned to projects with 'Construction' in their name.",
    "context": {
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ]
      },
      "project_assignments": {
        "columns": [
          "assignment_id",
          "project_id",
          "worker_id",
          "assigned_date",
          "completion_date",
          "status"
        ],
        "foreign_keys": {
          "project_id": "projects",
          "worker_id": "workers"
        }
      },
      "projects": {
        "columns": ["project_id", "name", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT w.first_name, w.last_name FROM workers w JOIN project_assignments pa ON w.worker_id = pa.worker_id JOIN projects p ON pa.project_id = p.project_id WHERE p.name LIKE '%Construction%';"
  },
  {
    "prompt": "What is the average servicing cost for each equipment type?",
    "context": {
      "equipment": {
        "columns": [
          "equipment_id",
          "name",
          "type",
          "status",
          "last_serviced_date"
        ]
      },
      "equipment_parts": {
        "columns": ["id", "equipment_id", "part_id", "quantity_used"],
        "foreign_keys": {
          "equipment_id": "equipment"
        }
      },
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      }
    },
    "query": "SELECT e.type, AVG(mr.cost) AS avg_cost FROM equipment e JOIN equipment_parts ep ON e.equipment_id = ep.equipment_id JOIN maintenance_records mr ON ep.equipment_id = mr.vehicle_id GROUP BY e.type;"
  },
  {
    "prompt": "Find all spare parts used more than 5 times in maintenance.",
    "context": {
      "spare_parts": {
        "columns": ["part_id", "name", "type", "quantity", "status"]
      },
      "equipment_parts": {
        "columns": ["id", "equipment_id", "part_id", "quantity_used"],
        "foreign_keys": {
          "part_id": "spare_parts"
        }
      }
    },
    "query": "SELECT sp.name, SUM(ep.quantity_used) AS usage_count FROM spare_parts sp JOIN equipment_parts ep ON sp.part_id = ep.part_id GROUP BY sp.name HAVING SUM(ep.quantity_used) > 5;"
  },
  {
    "prompt": "Which workers are available for assignment today?",
    "context": {
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name FROM workers WHERE availability_status = 'Available';"
  },
  {
    "prompt": "List all projects with their start and end dates.",
    "context": {
      "projects": {
        "columns": ["project_id", "name", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT name, start_date, end_date FROM projects;"
  },
  {
    "prompt": "Which workers have used the 'Excavator X100' for more than 10 hours?",
    "context": {
      "equipment": {
        "columns": [
          "equipment_id",
          "name",
          "type",
          "status",
          "last_serviced_date"
        ]
      },
      "equipment_usage": {
        "columns": [
          "usage_id",
          "equipment_id",
          "worker_id",
          "start_time",
          "end_time",
          "purpose"
        ],
        "foreign_keys": {
          "equipment_id": "equipment",
          "worker_id": "workers"
        }
      },
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ]
      }
    },
    "query": "SELECT w.first_name, w.last_name FROM workers w JOIN equipment_usage eu ON w.worker_id = eu.worker_id JOIN equipment e ON eu.equipment_id = e.equipment_id WHERE e.name = 'Excavator X100' AND (eu.end_time - eu.start_time) > 10;"
  },
  {
    "prompt": "How many projects have been completed this year?",
    "context": {
      "projects": {
        "columns": ["project_id", "name", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT COUNT(*) FROM projects WHERE status = 'Completed' AND EXTRACT(YEAR FROM end_date) = EXTRACT(YEAR FROM SYSDATE);"
  },
  {
    "prompt": "Find the total cost of maintenance for vehicles inspected by 'Mark Lee'.",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      },
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      },
      "safety_audits": {
        "columns": [
          "audit_id",
          "vehicle_id",
          "audit_date",
          "auditor_id",
          "remarks"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles",
          "auditor_id": "workers"
        }
      },
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ]
      }
    },
    "query": "SELECT SUM(mr.cost) AS total_maintenance_cost FROM maintenance_records mr JOIN safety_audits sa ON mr.vehicle_id = sa.vehicle_id JOIN workers w ON sa.auditor_id = w.worker_id WHERE w.first_name = 'Mark' AND w.last_name = 'Lee';"
  },
  {
    "prompt": "Which equipment has not been used in the last year?",
    "context": {
      "equipment": {
        "columns": [
          "equipment_id",
          "name",
          "type",
          "status",
          "last_serviced_date"
        ]
      },
      "equipment_usage": {
        "columns": [
          "usage_id",
          "equipment_id",
          "worker_id",
          "start_time",
          "end_time",
          "purpose"
        ],
        "foreign_keys": {
          "equipment_id": "equipment"
        }
      }
    },
    "query": "SELECT e.name FROM equipment e LEFT JOIN equipment_usage eu ON e.equipment_id = eu.equipment_id WHERE eu.start_time IS NULL OR eu.start_time < ADD_MONTHS(SYSDATE, -12);"
  },
  {
    "prompt": "List all tasks for maintenance records with a cost greater than $5000.",
    "context": {
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      },
      "maintenance_tasks": {
        "columns": [
          "task_id",
          "maintenance_id",
          "task_name",
          "description",
          "estimated_cost",
          "actual_cost"
        ],
        "foreign_keys": {
          "maintenance_id": "maintenance_records"
        }
      }
    },
    "query": "SELECT mt.task_name, mt.description FROM maintenance_tasks mt JOIN maintenance_records mr ON mt.maintenance_id = mr.maintenance_id WHERE mr.cost > 5000;"
  },
  {
    "prompt": "Find all safety audits conducted before January 1, 2023.",
    "context": {
      "safety_audits": {
        "columns": [
          "audit_id",
          "vehicle_id",
          "audit_date",
          "auditor_id",
          "remarks"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles",
          "auditor_id": "workers"
        }
      }
    },
    "query": "SELECT audit_id, audit_date FROM safety_audits WHERE audit_date < TO_DATE('2023-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Find all vehicles inspected by workers from 'Team Alpha'.",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      },
      "safety_audits": {
        "columns": [
          "audit_id",
          "vehicle_id",
          "audit_date",
          "auditor_id",
          "remarks"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles",
          "auditor_id": "workers"
        }
      },
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ],
        "foreign_keys": {
          "team_id": "teams"
        }
      },
      "teams": {
        "columns": ["team_id", "team_name", "manager_id"]
      }
    },
    "query": "SELECT v.name FROM vehicles v JOIN safety_audits sa ON v.vehicle_id = sa.vehicle_id JOIN workers w ON sa.auditor_id = w.worker_id JOIN teams t ON w.team_id = t.team_id WHERE t.team_name = 'Team Alpha';"
  },
  {
    "prompt": "Which equipment has been used for 'Excavation' purposes?",
    "context": {
      "equipment": {
        "columns": [
          "equipment_id",
          "name",
          "type",
          "status",
          "last_serviced_date"
        ]
      },
      "equipment_usage": {
        "columns": [
          "usage_id",
          "equipment_id",
          "worker_id",
          "start_time",
          "end_time",
          "purpose"
        ],
        "foreign_keys": {
          "equipment_id": "equipment"
        }
      }
    },
    "query": "SELECT e.name FROM equipment e JOIN equipment_usage eu ON e.equipment_id = eu.equipment_id WHERE eu.purpose = 'Excavation';"
  },
  {
    "prompt": "List all spare parts currently in stock with quantities greater than 10.",
    "context": {
      "spare_parts": {
        "columns": ["part_id", "name", "type", "quantity", "status"]
      }
    },
    "query": "SELECT name, quantity FROM spare_parts WHERE quantity > 10 AND status = 'Available';"
  },
  {
    "prompt": "Which workers are assigned to projects scheduled to end in the next 30 days?",
    "context": {
      "projects": {
        "columns": ["project_id", "name", "start_date", "end_date", "status"]
      },
      "project_assignments": {
        "columns": [
          "assignment_id",
          "project_id",
          "worker_id",
          "assigned_date",
          "completion_date",
          "status"
        ],
        "foreign_keys": {
          "project_id": "projects",
          "worker_id": "workers"
        }
      },
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ]
      }
    },
    "query": "SELECT w.first_name, w.last_name FROM workers w JOIN project_assignments pa ON w.worker_id = pa.worker_id JOIN projects p ON pa.project_id = p.project_id WHERE p.end_date <= SYSDATE + 30;"
  },
  {
    "prompt": "Find the average maintenance cost for vehicles inspected after January 1, 2023.",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      },
      "safety_audits": {
        "columns": [
          "audit_id",
          "vehicle_id",
          "audit_date",
          "auditor_id",
          "remarks"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      },
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      }
    },
    "query": "SELECT AVG(mr.cost) AS avg_cost FROM maintenance_records mr JOIN safety_audits sa ON mr.vehicle_id = sa.vehicle_id WHERE sa.audit_date > TO_DATE('2023-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Which workers have used more than 3 different pieces of equipment?",
    "context": {
      "equipment_usage": {
        "columns": [
          "usage_id",
          "equipment_id",
          "worker_id",
          "start_time",
          "end_time",
          "purpose"
        ],
        "foreign_keys": {
          "equipment_id": "equipment",
          "worker_id": "workers"
        }
      },
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ]
      }
    },
    "query": "SELECT w.first_name, w.last_name FROM workers w JOIN equipment_usage eu ON w.worker_id = eu.worker_id GROUP BY w.first_name, w.last_name HAVING COUNT(DISTINCT eu.equipment_id) > 3;"
  },
  {
    "prompt": "What is the total number of completed maintenance tasks for vehicles owned by 'Global Transport Ltd.'?",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      },
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      },
      "maintenance_tasks": {
        "columns": [
          "task_id",
          "maintenance_id",
          "task_name",
          "description",
          "estimated_cost",
          "actual_cost"
        ],
        "foreign_keys": {
          "maintenance_id": "maintenance_records"
        }
      }
    },
    "query": "SELECT COUNT(mt.task_id) AS total_tasks FROM maintenance_tasks mt JOIN maintenance_records mr ON mt.maintenance_id = mr.maintenance_id JOIN vehicles v ON mr.vehicle_id = v.vehicle_id WHERE mr.status = 'Completed' AND v.owner = 'Global Transport Ltd.';"
  },
  {
    "prompt": "List all vehicles with safety audits that have remarks containing 'urgent'.",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      },
      "safety_audits": {
        "columns": [
          "audit_id",
          "vehicle_id",
          "audit_date",
          "auditor_id",
          "remarks"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      }
    },
    "query": "SELECT v.name FROM vehicles v JOIN safety_audits sa ON v.vehicle_id = sa.vehicle_id WHERE LOWER(sa.remarks) LIKE '%urgent%';"
  },
  {
    "prompt": "Which teams have more than 5 workers?",
    "context": {
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ],
        "foreign_keys": {
          "team_id": "teams"
        }
      },
      "teams": {
        "columns": ["team_id", "team_name", "manager_id"]
      }
    },
    "query": "SELECT t.team_name, COUNT(w.worker_id) AS worker_count FROM teams t JOIN workers w ON t.team_id = w.team_id GROUP BY t.team_name HAVING COUNT(w.worker_id) > 5;"
  },
  {
    "prompt": "Find the most expensive maintenance task completed for each vehicle.",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      },
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      },
      "maintenance_tasks": {
        "columns": [
          "task_id",
          "maintenance_id",
          "task_name",
          "description",
          "estimated_cost",
          "actual_cost"
        ],
        "foreign_keys": {
          "maintenance_id": "maintenance_records"
        }
      }
    },
    "query": "SELECT v.name, MAX(mt.actual_cost) AS max_cost FROM vehicles v JOIN maintenance_records mr ON v.vehicle_id = mr.vehicle_id JOIN maintenance_tasks mt ON mr.maintenance_id = mt.maintenance_id WHERE mr.status = 'Completed' GROUP BY v.name;"
  },
  {
    "prompt": "List all spare parts associated with equipment used for 'Drilling'.",
    "context": {
      "equipment": {
        "columns": [
          "equipment_id",
          "name",
          "type",
          "status",
          "last_serviced_date"
        ]
      },
      "equipment_usage": {
        "columns": [
          "usage_id",
          "equipment_id",
          "worker_id",
          "start_time",
          "end_time",
          "purpose"
        ],
        "foreign_keys": {
          "equipment_id": "equipment"
        }
      },
      "spare_parts": {
        "columns": ["part_id", "name", "type", "quantity", "status"]
      },
      "equipment_parts": {
        "columns": ["id", "equipment_id", "part_id", "quantity_used"],
        "foreign_keys": {
          "equipment_id": "equipment",
          "part_id": "spare_parts"
        }
      }
    },
    "query": "SELECT sp.name, sp.quantity FROM spare_parts sp JOIN equipment_parts ep ON sp.part_id = ep.part_id JOIN equipment e ON ep.equipment_id = e.equipment_id JOIN equipment_usage eu ON e.equipment_id = eu.equipment_id WHERE eu.purpose = 'Drilling';"
  },
  {
    "prompt": "Find all vehicles, their owners, types, and current status.",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      }
    },
    "query": "SELECT name, owner, type, status FROM vehicles;"
  },
  {
    "prompt": "List all maintenance records with vehicle name, start date, end date, and cost.",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      },
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      }
    },
    "query": "SELECT v.name, mr.start_date, mr.end_date, mr.cost FROM vehicles v JOIN maintenance_records mr ON v.vehicle_id = mr.vehicle_id;"
  },
  {
    "prompt": "List the projects, their start and end dates, statuses, and the number of workers assigned to each.",
    "context": {
      "projects": {
        "columns": ["project_id", "name", "start_date", "end_date", "status"]
      },
      "project_assignments": {
        "columns": [
          "assignment_id",
          "project_id",
          "worker_id",
          "assigned_date",
          "completion_date",
          "status"
        ],
        "foreign_keys": {
          "project_id": "projects"
        }
      }
    },
    "query": "SELECT p.name, p.start_date, p.end_date, p.status, COUNT(pa.worker_id) AS worker_count FROM projects p LEFT JOIN project_assignments pa ON p.project_id = pa.project_id GROUP BY p.project_id, p.name, p.start_date, p.end_date, p.status;"
  },
  {
    "prompt": "Find all workers, their teams, salaries, and availability status.",
    "context": {
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ],
        "foreign_keys": {
          "team_id": "teams"
        }
      },
      "teams": {
        "columns": ["team_id", "team_name", "manager_id"]
      }
    },
    "query": "SELECT w.first_name, w.last_name, t.team_name, w.salary, w.availability_status FROM workers w JOIN teams t ON w.team_id = t.team_id;"
  },
  {
    "prompt": "List all safety audits with vehicle name, audit date, auditor name, and remarks.",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      },
      "safety_audits": {
        "columns": [
          "audit_id",
          "vehicle_id",
          "audit_date",
          "auditor_id",
          "remarks"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles",
          "auditor_id": "workers"
        }
      },
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ]
      }
    },
    "query": "SELECT v.name, sa.audit_date, CONCAT(w.first_name, ' ', w.last_name) AS auditor_name, sa.remarks FROM safety_audits sa JOIN vehicles v ON sa.vehicle_id = v.vehicle_id JOIN workers w ON sa.auditor_id = w.worker_id;"
  },
  {
    "prompt": "Find all equipment, their type, last serviced date, status, and the number of times they were used.",
    "context": {
      "equipment": {
        "columns": [
          "equipment_id",
          "name",
          "type",
          "status",
          "last_serviced_date"
        ]
      },
      "equipment_usage": {
        "columns": [
          "usage_id",
          "equipment_id",
          "worker_id",
          "start_time",
          "end_time",
          "purpose"
        ],
        "foreign_keys": {
          "equipment_id": "equipment"
        }
      }
    },
    "query": "SELECT e.name, e.type, e.last_serviced_date, e.status, COUNT(eu.usage_id) AS usage_count FROM equipment e LEFT JOIN equipment_usage eu ON e.equipment_id = eu.equipment_id GROUP BY e.equipment_id, e.name, e.type, e.last_serviced_date, e.status;"
  },
  {
    "prompt": "List all spare parts, their type, quantity, and the number of times they were used in equipment.",
    "context": {
      "spare_parts": {
        "columns": ["part_id", "name", "type", "quantity", "status"]
      },
      "equipment_parts": {
        "columns": ["id", "equipment_id", "part_id", "quantity_used"],
        "foreign_keys": {
          "part_id": "spare_parts"
        }
      }
    },
    "query": "SELECT sp.name, sp.type, sp.quantity, SUM(ep.quantity_used) AS total_usage FROM spare_parts sp JOIN equipment_parts ep ON sp.part_id = ep.part_id GROUP BY sp.part_id, sp.name, sp.type, sp.quantity;"
  },
  {
    "prompt": "List all maintenance tasks with task name, description, estimated cost, actual cost, and the associated vehicle name.",
    "context": {
      "maintenance_tasks": {
        "columns": [
          "task_id",
          "maintenance_id",
          "task_name",
          "description",
          "estimated_cost",
          "actual_cost"
        ],
        "foreign_keys": {
          "maintenance_id": "maintenance_records"
        }
      },
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      },
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      }
    },
    "query": "SELECT mt.task_name, mt.description, mt.estimated_cost, mt.actual_cost, v.name AS vehicle_name FROM maintenance_tasks mt JOIN maintenance_records mr ON mt.maintenance_id = mr.maintenance_id JOIN vehicles v ON mr.vehicle_id = v.vehicle_id;"
  },
  {
    "prompt": "Find all project assignments with worker names, assigned dates, completion dates, and project names.",
    "context": {
      "project_assignments": {
        "columns": [
          "assignment_id",
          "project_id",
          "worker_id",
          "assigned_date",
          "completion_date",
          "status"
        ],
        "foreign_keys": {
          "project_id": "projects",
          "worker_id": "workers"
        }
      },
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ]
      },
      "projects": {
        "columns": ["project_id", "name", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT CONCAT(w.first_name, ' ', w.last_name) AS worker_name, pa.assigned_date, pa.completion_date, p.name AS project_name FROM project_assignments pa JOIN workers w ON pa.worker_id = w.worker_id JOIN projects p ON pa.project_id = p.project_id;"
  },
  {
    "prompt": "List all vehicles with their owners, types, statuses, and the total cost of maintenance.",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      },
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      }
    },
    "query": "SELECT v.name, v.owner, v.type, v.status, SUM(mr.cost) AS total_maintenance_cost FROM vehicles v LEFT JOIN maintenance_records mr ON v.vehicle_id = mr.vehicle_id GROUP BY v.vehicle_id, v.name, v.owner, v.type, v.status;"
  },
  {
    "prompt": "Find all workers who have been assigned to more than 2 projects with project names and statuses.",
    "context": {
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ]
      },
      "project_assignments": {
        "columns": [
          "assignment_id",
          "project_id",
          "worker_id",
          "assigned_date",
          "completion_date",
          "status"
        ],
        "foreign_keys": {
          "project_id": "projects",
          "worker_id": "workers"
        }
      },
      "projects": {
        "columns": ["project_id", "name", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT CONCAT(w.first_name, ' ', w.last_name) AS worker_name, p.name AS project_name, p.status FROM workers w JOIN project_assignments pa ON w.worker_id = pa.worker_id JOIN projects p ON pa.project_id = p.project_id GROUP BY w.worker_id, CONCAT(w.first_name, ' ', w.last_name), p.name, p.status HAVING COUNT(pa.project_id) > 2;"
  },
  {
    "prompt": "Find all workers, their assigned projects, and the project start and end dates.",
    "context": {
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ]
      },
      "project_assignments": {
        "columns": [
          "assignment_id",
          "project_id",
          "worker_id",
          "assigned_date",
          "completion_date",
          "status"
        ],
        "foreign_keys": {
          "project_id": "projects",
          "worker_id": "workers"
        }
      },
      "projects": {
        "columns": ["project_id", "name", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT CONCAT(w.first_name, ' ', w.last_name) AS worker_name, p.name AS project_name, p.start_date, p.end_date FROM workers w JOIN project_assignments pa ON w.worker_id = pa.worker_id JOIN projects p ON pa.project_id = p.project_id;"
  },
  {
    "prompt": "List all vehicles with their maintenance costs and the names of workers who audited them.",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      },
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      },
      "safety_audits": {
        "columns": [
          "audit_id",
          "vehicle_id",
          "audit_date",
          "auditor_id",
          "remarks"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles",
          "auditor_id": "workers"
        }
      },
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ]
      }
    },
    "query": "SELECT v.name AS vehicle_name, SUM(mr.cost) AS total_maintenance_cost, CONCAT(w.first_name, ' ', w.last_name) AS auditor_name FROM vehicles v JOIN maintenance_records mr ON v.vehicle_id = mr.vehicle_id JOIN safety_audits sa ON v.vehicle_id = sa.vehicle_id JOIN workers w ON sa.auditor_id = w.worker_id GROUP BY v.name, CONCAT(w.first_name, ' ', w.last_name);"
  },
  {
    "prompt": "Find all workers who have used equipment for 'Drilling' and their assigned projects.",
    "context": {
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ]
      },
      "equipment_usage": {
        "columns": [
          "usage_id",
          "equipment_id",
          "worker_id",
          "start_time",
          "end_time",
          "purpose"
        ],
        "foreign_keys": {
          "equipment_id": "equipment",
          "worker_id": "workers"
        }
      },
      "equipment": {
        "columns": [
          "equipment_id",
          "name",
          "type",
          "status",
          "last_serviced_date"
        ]
      },
      "project_assignments": {
        "columns": [
          "assignment_id",
          "project_id",
          "worker_id",
          "assigned_date",
          "completion_date",
          "status"
        ],
        "foreign_keys": {
          "project_id": "projects",
          "worker_id": "workers"
        }
      },
      "projects": {
        "columns": ["project_id", "name", "start_date", "end_date", "status"]
      }
    },
    "query": "SELECT CONCAT(w.first_name, ' ', w.last_name) AS worker_name, e.name AS equipment_name, p.name AS project_name FROM workers w JOIN equipment_usage eu ON w.worker_id = eu.worker_id JOIN equipment e ON eu.equipment_id = e.equipment_id JOIN project_assignments pa ON w.worker_id = pa.worker_id JOIN projects p ON pa.project_id = p.project_id WHERE eu.purpose = 'Drilling';"
  },
  {
    "prompt": "List all vehicles, their maintenance records, and the spare parts used during maintenance.",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      },
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      },
      "equipment_parts": {
        "columns": ["id", "equipment_id", "part_id", "quantity_used"],
        "foreign_keys": {
          "equipment_id": "equipment",
          "part_id": "spare_parts"
        }
      },
      "spare_parts": {
        "columns": ["part_id", "name", "type", "quantity", "status"]
      },
      "equipment": {
        "columns": [
          "equipment_id",
          "name",
          "type",
          "status",
          "last_serviced_date"
        ]
      }
    },
    "query": "SELECT v.name AS vehicle_name, mr.start_date, mr.end_date, sp.name AS spare_part_name, ep.quantity_used FROM vehicles v JOIN maintenance_records mr ON v.vehicle_id = mr.vehicle_id JOIN equipment_parts ep ON mr.vehicle_id = ep.equipment_id JOIN spare_parts sp ON ep.part_id = sp.part_id;"
  },
  {
    "prompt": "Find all projects, the workers assigned to them, and the equipment used during those projects.",
    "context": {
      "projects": {
        "columns": ["project_id", "name", "start_date", "end_date", "status"]
      },
      "project_assignments": {
        "columns": [
          "assignment_id",
          "project_id",
          "worker_id",
          "assigned_date",
          "completion_date",
          "status"
        ],
        "foreign_keys": {
          "project_id": "projects",
          "worker_id": "workers"
        }
      },
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ]
      },
      "equipment_usage": {
        "columns": [
          "usage_id",
          "equipment_id",
          "worker_id",
          "start_time",
          "end_time",
          "purpose"
        ],
        "foreign_keys": {
          "equipment_id": "equipment",
          "worker_id": "workers"
        }
      },
      "equipment": {
        "columns": [
          "equipment_id",
          "name",
          "type",
          "status",
          "last_serviced_date"
        ]
      }
    },
    "query": "SELECT p.name AS project_name, CONCAT(w.first_name, ' ', w.last_name) AS worker_name, e.name AS equipment_name FROM projects p JOIN project_assignments pa ON p.project_id = pa.project_id JOIN workers w ON pa.worker_id = w.worker_id JOIN equipment_usage eu ON w.worker_id = eu.worker_id JOIN equipment e ON eu.equipment_id = e.equipment_id;"
  },
  {
    "prompt": "List all safety audits with vehicle name, auditor name, and associated maintenance cost.",
    "context": {
      "vehicles": {
        "columns": ["vehicle_id", "name", "type", "owner", "status"]
      },
      "safety_audits": {
        "columns": [
          "audit_id",
          "vehicle_id",
          "audit_date",
          "auditor_id",
          "remarks"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles",
          "auditor_id": "workers"
        }
      },
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ]
      },
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      }
    },
    "query": "SELECT v.name AS vehicle_name, CONCAT(w.first_name, ' ', w.last_name) AS auditor_name, SUM(mr.cost) AS total_maintenance_cost FROM vehicles v JOIN safety_audits sa ON v.vehicle_id = sa.vehicle_id JOIN workers w ON sa.auditor_id = w.worker_id JOIN maintenance_records mr ON v.vehicle_id = mr.vehicle_id GROUP BY v.name, CONCAT(w.first_name, ' ', w.last_name);"
  },
  {
    "prompt": "Which workers have been involved in maintenance, project assignments, and equipment usage?",
    "context": {
      "workers": {
        "columns": [
          "worker_id",
          "first_name",
          "last_name",
          "team_id",
          "salary",
          "availability_status",
          "join_date"
        ]
      },
      "project_assignments": {
        "columns": [
          "assignment_id",
          "project_id",
          "worker_id",
          "assigned_date",
          "completion_date",
          "status"
        ],
        "foreign_keys": {
          "worker_id": "workers"
        }
      },
      "maintenance_records": {
        "columns": [
          "maintenance_id",
          "vehicle_id",
          "start_date",
          "end_date",
          "cost",
          "status"
        ],
        "foreign_keys": {
          "vehicle_id": "vehicles"
        }
      },
      "equipment_usage": {
        "columns": [
          "usage_id",
          "equipment_id",
          "worker_id",
          "start_time",
          "end_time",
          "purpose"
        ],
        "foreign_keys": {
          "worker_id": "workers"
        }
      }
    },
    "query": "SELECT CONCAT(w.first_name, ' ', w.last_name) AS worker_name FROM workers w WHERE EXISTS (SELECT 1 FROM project_assignments pa WHERE pa.worker_id = w.worker_id) AND EXISTS (SELECT 1 FROM maintenance_records mr JOIN vehicles v ON mr.vehicle_id = v.vehicle_id WHERE v.owner = w.worker_id) AND EXISTS (SELECT 1 FROM equipment_usage eu WHERE eu.worker_id = w.worker_id);"
  },
  {
    "prompt": "List all registered users and their contact details.",
    "context": {
      "users": {
        "columns": ["user_id", "username", "email", "phone", "address"]
      }
    },
    "query": "SELECT username, email, phone, address FROM users;"
  },
  {
    "prompt": "Retrieve the usernames and emails of users who joined this month.",
    "context": {
      "users": {
        "columns": ["username", "email", "join_date"]
      }
    },
    "query": "SELECT username, email FROM users WHERE EXTRACT(MONTH FROM join_date) = EXTRACT(MONTH FROM SYSDATE) AND EXTRACT(YEAR FROM join_date) = EXTRACT(YEAR FROM SYSDATE);"
  },
  {
    "prompt": "Show the phone numbers of all users living in 'New York'.",
    "context": {
      "users": {
        "columns": ["phone", "address"]
      }
    },
    "query": "SELECT phone FROM users WHERE address LIKE '%New York%';"
  },
  {
    "prompt": "Which users joined before 2020?",
    "context": {
      "users": {
        "columns": ["username", "join_date"]
      }
    },
    "query": "SELECT username FROM users WHERE join_date < TO_DATE('2020-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Retrieve the address of the user with the username 'JohnDoe'.",
    "context": {
      "users": {
        "columns": ["username", "address"]
      }
    },
    "query": "SELECT address FROM users WHERE username = 'JohnDoe';"
  },
  {
    "prompt": "List all users who registered in the last 7 days.",
    "context": {
      "users": {
        "columns": ["username", "join_date"]
      }
    },
    "query": "SELECT username FROM users WHERE join_date >= SYSDATE - 7;"
  },
  {
    "prompt": "Show the total number of users in the database.",
    "context": {
      "users": {
        "columns": ["user_id"]
      }
    },
    "query": "SELECT COUNT(*) AS total_users FROM users;"
  },
  {
    "prompt": "Retrieve details of users who haven’t placed any orders.",
    "context": {
      "users": {
        "columns": ["user_id", "username", "email"]
      },
      "orders": {
        "columns": ["user_id"]
      }
    },
    "query": "SELECT username, email FROM users WHERE user_id NOT IN (SELECT DISTINCT user_id FROM orders);"
  },
  {
    "prompt": "List all registered users and their contact details.",
    "context": {
      "users": {
        "columns": ["user_id", "username", "email", "phone", "address"]
      }
    },
    "query": "SELECT username, email, phone, address FROM users;"
  },
  {
    "prompt": "Show usernames, emails, phone numbers, and addresses of all users.",
    "context": {
      "users": {
        "columns": ["user_id", "username", "email", "phone", "address"]
      }
    },
    "query": "SELECT username, email, phone, address FROM users;"
  },
  {
    "prompt": "Retrieve the usernames and emails of users who joined this month.",
    "context": {
      "users": {
        "columns": ["username", "email", "join_date"]
      }
    },
    "query": "SELECT username, email FROM users WHERE EXTRACT(MONTH FROM join_date) = EXTRACT(MONTH FROM SYSDATE) AND EXTRACT(YEAR FROM join_date) = EXTRACT(YEAR FROM SYSDATE);"
  },
  {
    "prompt": "Which users joined this month? Provide their usernames and emails.",
    "context": {
      "users": {
        "columns": ["username", "email", "join_date"]
      }
    },
    "query": "SELECT username, email FROM users WHERE EXTRACT(MONTH FROM join_date) = EXTRACT(MONTH FROM SYSDATE) AND EXTRACT(YEAR FROM join_date) = EXTRACT(YEAR FROM SYSDATE);"
  },
  {
    "prompt": "Show the phone numbers of all users living in 'New York'.",
    "context": {
      "users": {
        "columns": ["phone", "address"]
      }
    },
    "query": "SELECT phone FROM users WHERE address LIKE '%New York%';"
  },
  {
    "prompt": "Retrieve phone numbers of users based in New York.",
    "context": {
      "users": {
        "columns": ["phone", "address"]
      }
    },
    "query": "SELECT phone FROM users WHERE address LIKE '%New York%';"
  },
  {
    "prompt": "Which users joined before 2020?",
    "context": {
      "users": {
        "columns": ["username", "join_date"]
      }
    },
    "query": "SELECT username FROM users WHERE join_date < TO_DATE('2020-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Retrieve all users signed up before the year 2020.",
    "context": {
      "users": {
        "columns": ["username", "join_date"]
      }
    },
    "query": "SELECT username FROM users WHERE join_date < TO_DATE('2020-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Retrieve the address of the user with the username 'JohnDoe'.",
    "context": {
      "users": {
        "columns": ["username", "address"]
      }
    },
    "query": "SELECT address FROM users WHERE username = 'JohnDoe';"
  },
  {
    "prompt": "What is the address of 'JohnDoe'?",
    "context": {
      "users": {
        "columns": ["username", "address"]
      }
    },
    "query": "SELECT address FROM users WHERE username = 'JohnDoe';"
  },
  {
    "prompt": "List all users who registered in the last 7 days.",
    "context": {
      "users": {
        "columns": ["username", "join_date"]
      }
    },
    "query": "SELECT username FROM users WHERE join_date >= SYSDATE - 7;"
  },
  {
    "prompt": "Who are the users registered within the past week?",
    "context": {
      "users": {
        "columns": ["username", "join_date"]
      }
    },
    "query": "SELECT username FROM users WHERE join_date >= SYSDATE - 7;"
  },
  {
    "prompt": "Show the total number of users in the database.",
    "context": {
      "users": {
        "columns": ["user_id"]
      }
    },
    "query": "SELECT COUNT(*) AS total_users FROM users;"
  },
  {
    "prompt": "How many users are there in total?",
    "context": {
      "users": {
        "columns": ["user_id"]
      }
    },
    "query": "SELECT COUNT(*) AS total_users FROM users;"
  },
  {
    "prompt": "Retrieve details of users who haven’t placed any orders.",
    "context": {
      "users": {
        "columns": ["user_id", "username", "email"]
      },
      "orders": {
        "columns": ["user_id"]
      }
    },
    "query": "SELECT username, email FROM users WHERE user_id NOT IN (SELECT DISTINCT user_id FROM orders);"
  },
  {
    "prompt": "Which users have no orders in the system?",
    "context": {
      "users": {
        "columns": ["user_id", "username", "email"]
      },
      "orders": {
        "columns": ["user_id"]
      }
    },
    "query": "SELECT username, email FROM users WHERE user_id NOT IN (SELECT DISTINCT user_id FROM orders);"
  },
  {
    "prompt": "List all products and their prices.",
    "context": {
      "products": {
        "columns": ["name", "price"]
      }
    },
    "query": "SELECT name, price FROM products;"
  },
  {
    "prompt": "Show product names and their prices.",
    "context": {
      "products": {
        "columns": ["name", "price"]
      }
    },
    "query": "SELECT name, price FROM products;"
  },
  {
    "prompt": "Retrieve details of products in the 'Electronics' category.",
    "context": {
      "products": {
        "columns": [
          "name",
          "description",
          "price",
          "stock_quantity",
          "category_id"
        ]
      },
      "categories": {
        "columns": ["category_id", "category_name"]
      }
    },
    "query": "SELECT name, description, price, stock_quantity FROM products WHERE category_id = (SELECT category_id FROM categories WHERE category_name = 'Electronics');"
  },
  {
    "prompt": "Which products are in the 'Electronics' category?",
    "context": {
      "products": {
        "columns": [
          "name",
          "description",
          "price",
          "stock_quantity",
          "category_id"
        ]
      },
      "categories": {
        "columns": ["category_id", "category_name"]
      }
    },
    "query": "SELECT name, description, price, stock_quantity FROM products WHERE category_id = (SELECT category_id FROM categories WHERE category_name = 'Electronics');"
  },
  {
    "prompt": "Show all products with stock quantities below 10.",
    "context": {
      "products": {
        "columns": ["name", "stock_quantity"]
      }
    },
    "query": "SELECT name FROM products WHERE stock_quantity < 10;"
  },
  {
    "prompt": "List products with stock less than 10.",
    "context": {
      "products": {
        "columns": ["name", "stock_quantity"]
      }
    },
    "query": "SELECT name FROM products WHERE stock_quantity < 10;"
  },
  {
    "prompt": "Which products cost more than $1000?",
    "context": {
      "products": {
        "columns": ["name", "price"]
      }
    },
    "query": "SELECT name FROM products WHERE price > 1000;"
  },
  {
    "prompt": "Retrieve all products priced above $1000.",
    "context": {
      "products": {
        "columns": ["name", "price"]
      }
    },
    "query": "SELECT name FROM products WHERE price > 1000;"
  },
  {
    "prompt": "List the names and descriptions of all available products.",
    "context": {
      "products": {
        "columns": ["name", "description"]
      }
    },
    "query": "SELECT name, description FROM products;"
  },
  {
    "prompt": "Show all product names and their descriptions.",
    "context": {
      "products": {
        "columns": ["name", "description"]
      }
    },
    "query": "SELECT name, description FROM products;"
  },
  {
    "prompt": "Retrieve the price and stock quantity of the product 'Smartphone.'",
    "context": {
      "products": {
        "columns": ["name", "price", "stock_quantity"]
      }
    },
    "query": "SELECT price, stock_quantity FROM products WHERE name = 'Smartphone';"
  },
  {
    "prompt": "What is the price and stock of 'Smartphone'?",
    "context": {
      "products": {
        "columns": ["name", "price", "stock_quantity"]
      }
    },
    "query": "SELECT price, stock_quantity FROM products WHERE name = 'Smartphone';"
  },
  {
    "prompt": "Show the total number of products in each category.",
    "context": {
      "products": {
        "columns": ["category_id"]
      },
      "categories": {
        "columns": ["category_id", "category_name"]
      }
    },
    "query": "SELECT category_name, COUNT(*) AS total_products FROM categories c JOIN products p ON c.category_id = p.category_id GROUP BY category_name;"
  },
  {
    "prompt": "How many products are in each category?",
    "context": {
      "products": {
        "columns": ["category_id"]
      },
      "categories": {
        "columns": ["category_id", "category_name"]
      }
    },
    "query": "SELECT category_name, COUNT(*) AS total_products FROM categories c JOIN products p ON c.category_id = p.category_id GROUP BY category_name;"
  },
  {
    "prompt": "Which products belong to the parent category 'Home Appliances'?",
    "context": {
      "products": {
        "columns": ["name", "category_id"]
      },
      "categories": {
        "columns": ["category_id", "category_name", "parent_category_id"]
      }
    },
    "query": "SELECT name FROM products WHERE category_id IN (SELECT category_id FROM categories WHERE parent_category_id = (SELECT category_id FROM categories WHERE category_name = 'Home Appliances'));"
  },
  {
    "prompt": "List products under the parent category 'Home Appliances'.",
    "context": {
      "products": {
        "columns": ["name", "category_id"]
      },
      "categories": {
        "columns": ["category_id", "category_name", "parent_category_id"]
      }
    },
    "query": "SELECT name FROM products WHERE category_id IN (SELECT category_id FROM categories WHERE parent_category_id = (SELECT category_id FROM categories WHERE category_name = 'Home Appliances'));"
  },
  {
    "prompt": "List all items and their prices.",
    "context": {
      "products": {
        "columns": ["name", "price"]
      }
    },
    "query": "SELECT name, price FROM products;"
  },
  {
    "prompt": "Show all product names and prices.",
    "context": {
      "products": {
        "columns": ["name", "price"]
      }
    },
    "query": "SELECT name, price FROM products;"
  },
  {
    "prompt": "Which products are listed under the 'Electronics' category?",
    "context": {
      "products": {
        "columns": [
          "name",
          "description",
          "price",
          "stock_quantity",
          "category_id"
        ]
      },
      "categories": {
        "columns": ["category_id", "category_name"]
      }
    },
    "query": "SELECT name, description, price, stock_quantity FROM products WHERE category_id = (SELECT category_id FROM categories WHERE category_name = 'Electronics');"
  },
  {
    "prompt": "Retrieve products available in the 'Electronics' section.",
    "context": {
      "products": {
        "columns": [
          "name",
          "description",
          "price",
          "stock_quantity",
          "category_id"
        ]
      },
      "categories": {
        "columns": ["category_id", "category_name"]
      }
    },
    "query": "SELECT name, description, price, stock_quantity FROM products WHERE category_id = (SELECT category_id FROM categories WHERE category_name = 'Electronics');"
  },
  {
    "prompt": "Find products with stock less than 10 units.",
    "context": {
      "products": {
        "columns": ["name", "stock_quantity"]
      }
    },
    "query": "SELECT name FROM products WHERE stock_quantity < 10;"
  },
  {
    "prompt": "Which products are running low on stock?",
    "context": {
      "products": {
        "columns": ["name", "stock_quantity"]
      }
    },
    "query": "SELECT name FROM products WHERE stock_quantity < 10;"
  },
  {
    "prompt": "List all products priced above $1000.",
    "context": {
      "products": {
        "columns": ["name", "price"]
      }
    },
    "query": "SELECT name FROM products WHERE price > 1000;"
  },
  {
    "prompt": "Show products that cost more than $1000.",
    "context": {
      "products": {
        "columns": ["name", "price"]
      }
    },
    "query": "SELECT name FROM products WHERE price > 1000;"
  },
  {
    "prompt": "Show product descriptions and names.",
    "context": {
      "products": {
        "columns": ["name", "description"]
      }
    },
    "query": "SELECT name, description FROM products;"
  },
  {
    "prompt": "Which products have the description listed?",
    "context": {
      "products": {
        "columns": ["name", "description"]
      }
    },
    "query": "SELECT name, description FROM products;"
  },
  {
    "prompt": "Get details of the product 'Smartphone.'",
    "context": {
      "products": {
        "columns": ["name", "price", "stock_quantity"]
      }
    },
    "query": "SELECT price, stock_quantity FROM products WHERE name = 'Smartphone';"
  },
  {
    "prompt": "What are the price and stock levels of 'Smartphone'?",
    "context": {
      "products": {
        "columns": ["name", "price", "stock_quantity"]
      }
    },
    "query": "SELECT price, stock_quantity FROM products WHERE name = 'Smartphone';"
  },
  {
    "prompt": "How many products are available in each category?",
    "context": {
      "products": {
        "columns": ["category_id"]
      },
      "categories": {
        "columns": ["category_id", "category_name"]
      }
    },
    "query": "SELECT category_name, COUNT(*) AS total_products FROM categories c JOIN products p ON c.category_id = p.category_id GROUP BY category_name;"
  },
  {
    "prompt": "List the total product count per category.",
    "context": {
      "products": {
        "columns": ["category_id"]
      },
      "categories": {
        "columns": ["category_id", "category_name"]
      }
    },
    "query": "SELECT category_name, COUNT(*) AS total_products FROM categories c JOIN products p ON c.category_id = p.category_id GROUP BY category_name;"
  },
  {
    "prompt": "Find all products in the 'Home Appliances' parent category.",
    "context": {
      "products": {
        "columns": ["name", "category_id"]
      },
      "categories": {
        "columns": ["category_id", "category_name", "parent_category_id"]
      }
    },
    "query": "SELECT name FROM products WHERE category_id IN (SELECT category_id FROM categories WHERE parent_category_id = (SELECT category_id FROM categories WHERE category_name = 'Home Appliances'));"
  },
  {
    "prompt": "What products fall under 'Home Appliances' parent category?",
    "context": {
      "products": {
        "columns": ["name", "category_id"]
      },
      "categories": {
        "columns": ["category_id", "category_name", "parent_category_id"]
      }
    },
    "query": "SELECT name FROM products WHERE category_id IN (SELECT category_id FROM categories WHERE parent_category_id = (SELECT category_id FROM categories WHERE category_name = 'Home Appliances'));"
  },
  {
    "prompt": "List all product categories and their parents.",
    "context": {
      "categories": {
        "columns": ["category_id", "category_name", "parent_category_id"]
      }
    },
    "query": "SELECT category_name, (SELECT category_name FROM categories WHERE category_id = parent_category_id) AS parent_category FROM categories;"
  },
  {
    "prompt": "Show product categories and their parent categories.",
    "context": {
      "categories": {
        "columns": ["category_id", "category_name", "parent_category_id"]
      }
    },
    "query": "SELECT category_name, (SELECT category_name FROM categories WHERE category_id = parent_category_id) AS parent_category FROM categories;"
  },
  {
    "prompt": "Subcategories under 'Fashion'?",
    "context": {
      "categories": {
        "columns": ["category_id", "category_name", "parent_category_id"]
      }
    },
    "query": "SELECT category_name FROM categories WHERE parent_category_id = (SELECT category_id FROM categories WHERE category_name = 'Fashion');"
  },
  {
    "prompt": "Retrieve subcategories for 'Fashion'.",
    "context": {
      "categories": {
        "columns": ["category_id", "category_name", "parent_category_id"]
      }
    },
    "query": "SELECT category_name FROM categories WHERE parent_category_id = (SELECT category_id FROM categories WHERE category_name = 'Fashion');"
  },
  {
    "prompt": "Categories without parent categories?",
    "context": {
      "categories": {
        "columns": ["category_id", "category_name", "parent_category_id"]
      }
    },
    "query": "SELECT category_name FROM categories WHERE parent_category_id IS NULL;"
  },
  {
    "prompt": "Show all root categories.",
    "context": {
      "categories": {
        "columns": ["category_id", "category_name", "parent_category_id"]
      }
    },
    "query": "SELECT category_name FROM categories WHERE parent_category_id IS NULL;"
  },
  {
    "prompt": "Which categories have subcategories?",
    "context": {
      "categories": {
        "columns": ["category_id", "category_name"]
      }
    },
    "query": "SELECT DISTINCT c1.category_name FROM categories c1 JOIN categories c2 ON c1.category_id = c2.parent_category_id;"
  },
  {
    "prompt": "List categories with subcategories.",
    "context": {
      "categories": {
        "columns": ["category_id", "category_name"]
      }
    },
    "query": "SELECT DISTINCT c1.category_name FROM categories c1 JOIN categories c2 ON c1.category_id = c2.parent_category_id;"
  },
  {
    "prompt": "How many categories exist in the database?",
    "context": {
      "categories": {
        "columns": ["category_id"]
      }
    },
    "query": "SELECT COUNT(*) AS total_categories FROM categories;"
  },
  {
    "prompt": "Retrieve total number of categories.",
    "context": {
      "categories": {
        "columns": ["category_id"]
      }
    },
    "query": "SELECT COUNT(*) AS total_categories FROM categories;"
  },
  {
    "prompt": "Category hierarchy starting with 'Electronics'?",
    "context": {
      "categories": {
        "columns": ["category_id", "category_name", "parent_category_id"]
      }
    },
    "query": "WITH RECURSIVE category_hierarchy AS (SELECT category_id, category_name, parent_category_id FROM categories WHERE category_name = 'Electronics' UNION ALL SELECT c.category_id, c.category_name, c.parent_category_id FROM categories c INNER JOIN category_hierarchy ch ON c.parent_category_id = ch.category_id) SELECT category_name FROM category_hierarchy;"
  },
  {
    "prompt": "Show hierarchy for 'Electronics' category.",
    "context": {
      "categories": {
        "columns": ["category_id", "category_name", "parent_category_id"]
      }
    },
    "query": "WITH RECURSIVE category_hierarchy AS (SELECT category_id, category_name, parent_category_id FROM categories WHERE category_name = 'Electronics' UNION ALL SELECT c.category_id, c.category_name, c.parent_category_id FROM categories c INNER JOIN category_hierarchy ch ON c.parent_category_id = ch.category_id) SELECT category_name FROM category_hierarchy;"
  },
  {
    "prompt": "Subcategories of 'Furniture' parent category?",
    "context": {
      "categories": {
        "columns": ["category_id", "category_name", "parent_category_id"]
      }
    },
    "query": "SELECT category_name FROM categories WHERE parent_category_id = (SELECT category_id FROM categories WHERE category_name = 'Furniture');"
  },
  {
    "prompt": "Which categories belong to 'Furniture'?",
    "context": {
      "categories": {
        "columns": ["category_id", "category_name", "parent_category_id"]
      }
    },
    "query": "SELECT category_name FROM categories WHERE parent_category_id = (SELECT category_id FROM categories WHERE category_name = 'Furniture');"
  },
  {
    "prompt": "Categories with more than 10 products?",
    "context": {
      "categories": {
        "columns": ["category_id", "category_name"]
      },
      "products": {
        "columns": ["category_id"]
      }
    },
    "query": "SELECT category_name FROM categories WHERE category_id IN (SELECT category_id FROM products GROUP BY category_id HAVING COUNT(*) > 10);"
  },
  {
    "prompt": "List categories having more than 10 items.",
    "context": {
      "categories": {
        "columns": ["category_id", "category_name"]
      },
      "products": {
        "columns": ["category_id"]
      }
    },
    "query": "SELECT category_name FROM categories WHERE category_id IN (SELECT category_id FROM products GROUP BY category_id HAVING COUNT(*) > 10);"
  },
  {
    "prompt": "List all orders placed in the past 30 days.",
    "context": {
      "orders": {
        "columns": ["order_id", "order_date", "status", "total_price"]
      }
    },
    "query": "SELECT * FROM orders WHERE order_date >= SYSDATE - 30;"
  },
  {
    "prompt": "Show orders made in the last month.",
    "context": {
      "orders": {
        "columns": ["order_id", "order_date", "status", "total_price"]
      }
    },
    "query": "SELECT * FROM orders WHERE order_date >= SYSDATE - 30;"
  },
  {
    "prompt": "Details of orders by 'JaneDoe'?",
    "context": {
      "orders": {
        "columns": [
          "order_id",
          "user_id",
          "order_date",
          "status",
          "total_price"
        ]
      },
      "users": {
        "columns": ["user_id", "username"]
      }
    },
    "query": "SELECT * FROM orders WHERE user_id = (SELECT user_id FROM users WHERE username = 'JaneDoe');"
  },
  {
    "prompt": "Retrieve orders for 'JaneDoe'.",
    "context": {
      "orders": {
        "columns": [
          "order_id",
          "user_id",
          "order_date",
          "status",
          "total_price"
        ]
      },
      "users": {
        "columns": ["user_id", "username"]
      }
    },
    "query": "SELECT * FROM orders WHERE user_id = (SELECT user_id FROM users WHERE username = 'JaneDoe');"
  },
  {
    "prompt": "Show all completed orders.",
    "context": {
      "orders": {
        "columns": ["order_id", "status"]
      }
    },
    "query": "SELECT * FROM orders WHERE status = 'Completed';"
  },
  {
    "prompt": "Which orders are marked as 'Completed'?",
    "context": {
      "orders": {
        "columns": ["order_id", "status"]
      }
    },
    "query": "SELECT * FROM orders WHERE status = 'Completed';"
  },
  {
    "prompt": "Orders with total price over $500?",
    "context": {
      "orders": {
        "columns": ["order_id", "total_price"]
      }
    },
    "query": "SELECT * FROM orders WHERE total_price > 500;"
  },
  {
    "prompt": "List orders costing more than $500.",
    "context": {
      "orders": {
        "columns": ["order_id", "total_price"]
      }
    },
    "query": "SELECT * FROM orders WHERE total_price > 500;"
  },
  {
    "prompt": "Details of order with ID 101?",
    "context": {
      "orders": {
        "columns": ["order_id", "status", "total_price"]
      }
    },
    "query": "SELECT status, total_price FROM orders WHERE order_id = 101;"
  },
  {
    "prompt": "Retrieve info for order 101.",
    "context": {
      "orders": {
        "columns": ["order_id", "status", "total_price"]
      }
    },
    "query": "SELECT status, total_price FROM orders WHERE order_id = 101;"
  },
  {
    "prompt": "How many orders were placed today?",
    "context": {
      "orders": {
        "columns": ["order_id", "order_date"]
      }
    },
    "query": "SELECT COUNT(*) AS total_orders FROM orders WHERE TRUNC(order_date) = TRUNC(SYSDATE);"
  },
  {
    "prompt": "Number of orders placed today?",
    "context": {
      "orders": {
        "columns": ["order_id", "order_date"]
      }
    },
    "query": "SELECT COUNT(*) AS total_orders FROM orders WHERE TRUNC(order_date) = TRUNC(SYSDATE);"
  },
  {
    "prompt": "List pending orders.",
    "context": {
      "orders": {
        "columns": ["order_id", "status"]
      }
    },
    "query": "SELECT * FROM orders WHERE status = 'Pending';"
  },
  {
    "prompt": "Show all 'Pending' orders.",
    "context": {
      "orders": {
        "columns": ["order_id", "status"]
      }
    },
    "query": "SELECT * FROM orders WHERE status = 'Pending';"
  },
  {
    "prompt": "Total revenue from all orders?",
    "context": {
      "orders": {
        "columns": ["total_price"]
      }
    },
    "query": "SELECT SUM(total_price) AS total_revenue FROM orders;"
  },
  {
    "prompt": "What is the total revenue generated?",
    "context": {
      "orders": {
        "columns": ["total_price"]
      }
    },
    "query": "SELECT SUM(total_price) AS total_revenue FROM orders;"
  },
  {
    "prompt": "List all items in the order with ID 202.",
    "context": {
      "order_items": {
        "columns": [
          "order_item_id",
          "order_id",
          "product_id",
          "quantity",
          "price"
        ]
      }
    },
    "query": "SELECT * FROM order_items WHERE order_id = 202;"
  },
  {
    "prompt": "Show items for order ID 202.",
    "context": {
      "order_items": {
        "columns": [
          "order_item_id",
          "order_id",
          "product_id",
          "quantity",
          "price"
        ]
      }
    },
    "query": "SELECT * FROM order_items WHERE order_id = 202;"
  },
  {
    "prompt": "Retrieve quantity and price of products in order 303.",
    "context": {
      "order_items": {
        "columns": ["order_id", "product_id", "quantity", "price"]
      }
    },
    "query": "SELECT product_id, quantity, price FROM order_items WHERE order_id = 303;"
  },
  {
    "prompt": "Details of products in order 303?",
    "context": {
      "order_items": {
        "columns": ["order_id", "product_id", "quantity", "price"]
      }
    },
    "query": "SELECT product_id, quantity, price FROM order_items WHERE order_id = 303;"
  },
  {
    "prompt": "Which products were bought more than 50 times?",
    "context": {
      "order_items": {
        "columns": ["product_id", "quantity"]
      }
    },
    "query": "SELECT product_id, SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id HAVING SUM(quantity) > 50;"
  },
  {
    "prompt": "Products sold over 50 times?",
    "context": {
      "order_items": {
        "columns": ["product_id", "quantity"]
      }
    },
    "query": "SELECT product_id, SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id HAVING SUM(quantity) > 50;"
  },
  {
    "prompt": "Total items sold for each product?",
    "context": {
      "order_items": {
        "columns": ["product_id", "quantity"]
      }
    },
    "query": "SELECT product_id, SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id;"
  },
  {
    "prompt": "Show total sales for each product.",
    "context": {
      "order_items": {
        "columns": ["product_id", "quantity"]
      }
    },
    "query": "SELECT product_id, SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id;"
  },
  {
    "prompt": "Order items priced over $200?",
    "context": {
      "order_items": {
        "columns": ["order_item_id", "price"]
      }
    },
    "query": "SELECT * FROM order_items WHERE price > 200;"
  },
  {
    "prompt": "Retrieve items where price exceeds $200.",
    "context": {
      "order_items": {
        "columns": ["order_item_id", "price"]
      }
    },
    "query": "SELECT * FROM order_items WHERE price > 200;"
  },
  {
    "prompt": "Items associated with product 'Laptop'?",
    "context": {
      "order_items": {
        "columns": ["order_item_id", "product_id"]
      },
      "products": {
        "columns": ["product_id", "name"]
      }
    },
    "query": "SELECT * FROM order_items WHERE product_id = (SELECT product_id FROM products WHERE name = 'Laptop');"
  },
  {
    "prompt": "List order items for 'Laptop'.",
    "context": {
      "order_items": {
        "columns": ["order_item_id", "product_id"]
      },
      "products": {
        "columns": ["product_id", "name"]
      }
    },
    "query": "SELECT * FROM order_items WHERE product_id = (SELECT product_id FROM products WHERE name = 'Laptop');"
  },
  {
    "prompt": "Orders containing more than 5 items?",
    "context": {
      "order_items": {
        "columns": ["order_id", "quantity"]
      }
    },
    "query": "SELECT order_id, SUM(quantity) AS total_items FROM order_items GROUP BY order_id HAVING SUM(quantity) > 5;"
  },
  {
    "prompt": "Show orders with more than 5 items.",
    "context": {
      "order_items": {
        "columns": ["order_id", "quantity"]
      }
    },
    "query": "SELECT order_id, SUM(quantity) AS total_items FROM order_items GROUP BY order_id HAVING SUM(quantity) > 5;"
  },
  {
    "prompt": "Revenue from 'Headphones'?",
    "context": {
      "order_items": {
        "columns": ["product_id", "quantity", "price"]
      },
      "products": {
        "columns": ["product_id", "name"]
      }
    },
    "query": "SELECT SUM(quantity * price) AS total_revenue FROM order_items WHERE product_id = (SELECT product_id FROM products WHERE name = 'Headphones');"
  },
  {
    "prompt": "Total revenue generated by 'Headphones'?",
    "context": {
      "order_items": {
        "columns": ["product_id", "quantity", "price"]
      },
      "products": {
        "columns": ["product_id", "name"]
      }
    },
    "query": "SELECT SUM(quantity * price) AS total_revenue FROM order_items WHERE product_id = (SELECT product_id FROM products WHERE name = 'Headphones');"
  },
  {
    "prompt": "List all reviews for the product 'Smartphone'.",
    "context": {
      "reviews": {
        "columns": [
          "review_id",
          "product_id",
          "rating",
          "review_text",
          "review_date"
        ]
      },
      "products": {
        "columns": ["product_id", "name"]
      }
    },
    "query": "SELECT * FROM reviews WHERE product_id = (SELECT product_id FROM products WHERE name = 'Smartphone');"
  },
  {
    "prompt": "Show ratings and reviews by user 'JohnDoe'.",
    "context": {
      "reviews": {
        "columns": ["review_id", "user_id", "rating", "review_text"]
      },
      "users": {
        "columns": ["user_id", "username"]
      }
    },
    "query": "SELECT rating, review_text FROM reviews WHERE user_id = (SELECT user_id FROM users WHERE username = 'JohnDoe');"
  },
  {
    "prompt": "Which reviews have a 5-star rating?",
    "context": {
      "reviews": {
        "columns": ["review_id", "rating"]
      }
    },
    "query": "SELECT * FROM reviews WHERE rating = 5;"
  },
  {
    "prompt": "Products with more than 10 reviews?",
    "context": {
      "reviews": {
        "columns": ["review_id", "product_id"]
      }
    },
    "query": "SELECT product_id, COUNT(*) AS review_count FROM reviews GROUP BY product_id HAVING COUNT(*) > 10;"
  },
  {
    "prompt": "Average rating of the product 'Gaming Laptop'?",
    "context": {
      "reviews": {
        "columns": ["product_id", "rating"]
      },
      "products": {
        "columns": ["product_id", "name"]
      }
    },
    "query": "SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = (SELECT product_id FROM products WHERE name = 'Gaming Laptop');"
  },
  {
    "prompt": "Show reviews submitted last week.",
    "context": {
      "reviews": {
        "columns": ["review_id", "review_date"]
      }
    },
    "query": "SELECT * FROM reviews WHERE review_date >= SYSDATE - 7;"
  },
  {
    "prompt": "Total reviews for each product?",
    "context": {
      "reviews": {
        "columns": ["review_id", "product_id"]
      }
    },
    "query": "SELECT product_id, COUNT(*) AS total_reviews FROM reviews GROUP BY product_id;"
  },
  {
    "prompt": "Users who reviewed more than 5 products?",
    "context": {
      "reviews": {
        "columns": ["review_id", "user_id"]
      }
    },
    "query": "SELECT user_id, COUNT(DISTINCT product_id) AS products_reviewed FROM reviews GROUP BY user_id HAVING COUNT(DISTINCT product_id) > 5;"
  },
  {
    "prompt": "Retrieve reviews for 'Smartphone' and their ratings.",
    "context": {
      "reviews": {
        "columns": ["review_id", "product_id", "rating", "review_text"]
      },
      "products": {
        "columns": ["product_id", "name"]
      }
    },
    "query": "SELECT rating, review_text FROM reviews WHERE product_id = (SELECT product_id FROM products WHERE name = 'Smartphone');"
  },
  {
    "prompt": "List all 5-star reviews.",
    "context": {
      "reviews": {
        "columns": ["review_id", "rating"]
      }
    },
    "query": "SELECT * FROM reviews WHERE rating = 5;"
  },
  {
    "prompt": "List all active coupons and their discount percentages.",
    "context": {
      "coupons": {
        "columns": [
          "coupon_id",
          "code",
          "discount_percentage",
          "expiration_date"
        ]
      }
    },
    "query": "SELECT code, discount_percentage FROM coupons WHERE expiration_date >= SYSDATE;"
  },
  {
    "prompt": "Retrieve details of expired coupons.",
    "context": {
      "coupons": {
        "columns": [
          "coupon_id",
          "code",
          "discount_percentage",
          "expiration_date"
        ]
      }
    },
    "query": "SELECT * FROM coupons WHERE expiration_date < SYSDATE;"
  },
  {
    "prompt": "Show all coupons with a discount of more than 20%.",
    "context": {
      "coupons": {
        "columns": ["coupon_id", "code", "discount_percentage"]
      }
    },
    "query": "SELECT * FROM coupons WHERE discount_percentage > 20;"
  },
  {
    "prompt": "Which coupons are set to expire in the next 7 days?",
    "context": {
      "coupons": {
        "columns": ["coupon_id", "code", "expiration_date"]
      }
    },
    "query": "SELECT * FROM coupons WHERE expiration_date BETWEEN SYSDATE AND SYSDATE + 7;"
  },
  {
    "prompt": "List all coupons with usage limits greater than 100.",
    "context": {
      "coupons": {
        "columns": ["coupon_id", "code", "usage_limit"]
      }
    },
    "query": "SELECT * FROM coupons WHERE usage_limit > 100;"
  },
  {
    "prompt": "Retrieve the code and expiration date of the coupon with ID 505.",
    "context": {
      "coupons": {
        "columns": ["coupon_id", "code", "expiration_date"]
      }
    },
    "query": "SELECT code, expiration_date FROM coupons WHERE coupon_id = 505;"
  },
  {
    "prompt": "How many coupons are currently valid?",
    "context": {
      "coupons": {
        "columns": ["coupon_id", "expiration_date"]
      }
    },
    "query": "SELECT COUNT(*) AS valid_coupons FROM coupons WHERE expiration_date >= SYSDATE;"
  },
  {
    "prompt": "Show the total number of times each coupon has been used.",
    "context": {
      "coupons": {
        "columns": ["coupon_id", "code"]
      },
      "orders": {
        "columns": ["order_id", "coupon_id"]
      }
    },
    "query": "SELECT c.code, COUNT(o.coupon_id) AS total_usage FROM coupons c JOIN orders o ON c.coupon_id = o.coupon_id GROUP BY c.code;"
  },
  {
    "prompt": "List all patients and their contact information.",
    "context": {
      "patients": {
        "columns": [
          "patient_id",
          "first_name",
          "last_name",
          "phone",
          "email",
          "address"
        ]
      }
    },
    "query": "SELECT first_name, last_name, phone, email, address FROM patients;"
  },
  {
    "prompt": "Retrieve the details of all patients along with their contact numbers and addresses.",
    "context": {
      "patients": {
        "columns": [
          "patient_id",
          "first_name",
          "last_name",
          "phone",
          "email",
          "address"
        ]
      }
    },
    "query": "SELECT first_name, last_name, phone, email, address FROM patients;"
  },
  {
    "prompt": "Who are the patients born before 1980?",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "dob"]
      }
    },
    "query": "SELECT first_name, last_name, dob FROM patients WHERE dob < TO_DATE('1980-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Show emergency contact details for all patients.",
    "context": {
      "patients": {
        "columns": [
          "patient_id",
          "first_name",
          "last_name",
          "emergency_contact"
        ]
      }
    },
    "query": "SELECT first_name, last_name, emergency_contact FROM patients;"
  },
  {
    "prompt": "Retrieve the emergency contacts of all patients.",
    "context": {
      "patients": {
        "columns": [
          "patient_id",
          "first_name",
          "last_name",
          "emergency_contact"
        ]
      }
    },
    "query": "SELECT first_name, last_name, emergency_contact FROM patients;"
  },
  {
    "prompt": "Which patients live in 'New York'?",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "address"]
      }
    },
    "query": "SELECT first_name, last_name, address FROM patients WHERE address LIKE '%New York%';"
  },
  {
    "prompt": "List all patients whose address is in 'New York.'",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "address"]
      }
    },
    "query": "SELECT first_name, last_name, address FROM patients WHERE address LIKE '%New York%';"
  },
  {
    "prompt": "Retrieve the email addresses of all patients.",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "email"]
      }
    },
    "query": "SELECT first_name, last_name, email FROM patients;"
  },
  {
    "prompt": "What are the email addresses of all patients?",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "email"]
      }
    },
    "query": "SELECT first_name, last_name, email FROM patients;"
  },
  {
    "prompt": "What is the phone number of the patient named 'John Doe'?",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "phone"]
      }
    },
    "query": "SELECT phone FROM patients WHERE first_name = 'John' AND last_name = 'Doe';"
  },
  {
    "prompt": "Retrieve the phone number of 'John Doe.'",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "phone"]
      }
    },
    "query": "SELECT phone FROM patients WHERE first_name = 'John' AND last_name = 'Doe';"
  },
  {
    "prompt": "List all male patients in the database.",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "gender"]
      }
    },
    "query": "SELECT first_name, last_name FROM patients WHERE gender = 'Male';"
  },
  {
    "prompt": "Who are the male patients listed in the system?",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "gender"]
      }
    },
    "query": "SELECT first_name, last_name FROM patients WHERE gender = 'Male';"
  },
  {
    "prompt": "Retrieve details of patients who don’t have an emergency contact listed.",
    "context": {
      "patients": {
        "columns": [
          "patient_id",
          "first_name",
          "last_name",
          "emergency_contact"
        ]
      }
    },
    "query": "SELECT first_name, last_name FROM patients WHERE emergency_contact IS NULL;"
  },
  {
    "prompt": "Which patients are missing emergency contact details?",
    "context": {
      "patients": {
        "columns": [
          "patient_id",
          "first_name",
          "last_name",
          "emergency_contact"
        ]
      }
    },
    "query": "SELECT first_name, last_name FROM patients WHERE emergency_contact IS NULL;"
  },
  {
    "prompt": "List patients and contacts.",
    "context": {
      "patients": {
        "columns": [
          "patient_id",
          "first_name",
          "last_name",
          "phone",
          "email",
          "address"
        ]
      }
    },
    "query": "SELECT first_name, last_name, phone, email, address FROM patients;"
  },
  {
    "prompt": "Show all patient details.",
    "context": {
      "patients": {
        "columns": [
          "patient_id",
          "first_name",
          "last_name",
          "phone",
          "email",
          "address"
        ]
      }
    },
    "query": "SELECT first_name, last_name, phone, email, address FROM patients;"
  },
  {
    "prompt": "Patients born before 1980?",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "dob"]
      }
    },
    "query": "SELECT first_name, last_name, dob FROM patients WHERE dob < TO_DATE('1980-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Emergency contacts for all.",
    "context": {
      "patients": {
        "columns": [
          "patient_id",
          "first_name",
          "last_name",
          "emergency_contact"
        ]
      }
    },
    "query": "SELECT first_name, last_name, emergency_contact FROM patients;"
  },
  {
    "prompt": "List emergency numbers.",
    "context": {
      "patients": {
        "columns": [
          "patient_id",
          "first_name",
          "last_name",
          "emergency_contact"
        ]
      }
    },
    "query": "SELECT first_name, last_name, emergency_contact FROM patients;"
  },
  {
    "prompt": "Who lives in 'New York'?",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "address"]
      }
    },
    "query": "SELECT first_name, last_name, address FROM patients WHERE address LIKE '%New York%';"
  },
  {
    "prompt": "Patients from 'New York'?",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "address"]
      }
    },
    "query": "SELECT first_name, last_name, address FROM patients WHERE address LIKE '%New York%';"
  },
  {
    "prompt": "Get all emails.",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "email"]
      }
    },
    "query": "SELECT first_name, last_name, email FROM patients;"
  },
  {
    "prompt": "Emails of patients?",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "email"]
      }
    },
    "query": "SELECT first_name, last_name, email FROM patients;"
  },
  {
    "prompt": "Phone number for 'John Doe'?",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "phone"]
      }
    },
    "query": "SELECT phone FROM patients WHERE first_name = 'John' AND last_name = 'Doe';"
  },
  {
    "prompt": "Contact for 'John Doe'?",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "phone"]
      }
    },
    "query": "SELECT phone FROM patients WHERE first_name = 'John' AND last_name = 'Doe';"
  },
  {
    "prompt": "Male patients?",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "gender"]
      }
    },
    "query": "SELECT first_name, last_name FROM patients WHERE gender = 'Male';"
  },
  {
    "prompt": "List all males.",
    "context": {
      "patients": {
        "columns": ["patient_id", "first_name", "last_name", "gender"]
      }
    },
    "query": "SELECT first_name, last_name FROM patients WHERE gender = 'Male';"
  },
  {
    "prompt": "Who lacks emergency contacts?",
    "context": {
      "patients": {
        "columns": [
          "patient_id",
          "first_name",
          "last_name",
          "emergency_contact"
        ]
      }
    },
    "query": "SELECT first_name, last_name FROM patients WHERE emergency_contact IS NULL;"
  },
  {
    "prompt": "Patients with no emergency number?",
    "context": {
      "patients": {
        "columns": [
          "patient_id",
          "first_name",
          "last_name",
          "emergency_contact"
        ]
      }
    },
    "query": "SELECT first_name, last_name FROM patients WHERE emergency_contact IS NULL;"
  },
  {
    "prompt": "Today's appointments?",
    "context": {
      "appointments": {
        "columns": [
          "appointment_id",
          "patient_id",
          "doctor_id",
          "appointment_date",
          "status"
        ]
      }
    },
    "query": "SELECT * FROM appointments WHERE appointment_date = TRUNC(SYSDATE);"
  },
  {
    "prompt": "Appointments scheduled for today?",
    "context": {
      "appointments": {
        "columns": [
          "appointment_id",
          "patient_id",
          "doctor_id",
          "appointment_date",
          "status"
        ]
      }
    },
    "query": "SELECT * FROM appointments WHERE appointment_date = TRUNC(SYSDATE);"
  },
  {
    "prompt": "Show completed appointments.",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "patient_id", "doctor_id", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE status = 'Completed';"
  },
  {
    "prompt": "Completed appointments?",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "patient_id", "doctor_id", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE status = 'Completed';"
  },
  {
    "prompt": "Pending appointments?",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "patient_id", "doctor_id", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE status = 'Pending';"
  },
  {
    "prompt": "Show pending appointments.",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "patient_id", "doctor_id", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE status = 'Pending';"
  },
  {
    "prompt": "Appointments for 'Jane Smith'?",
    "context": {
      "appointments": {
        "columns": [
          "appointment_id",
          "patient_id",
          "appointment_date",
          "status",
          "reason"
        ]
      },
      "patients": {
        "columns": ["patient_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT * FROM appointments WHERE patient_id = (SELECT patient_id FROM patients WHERE first_name = 'Jane' AND last_name = 'Smith');"
  },
  {
    "prompt": "Show 'Jane Smith's' appointments.",
    "context": {
      "appointments": {
        "columns": [
          "appointment_id",
          "patient_id",
          "appointment_date",
          "status",
          "reason"
        ]
      },
      "patients": {
        "columns": ["patient_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT * FROM appointments WHERE patient_id = (SELECT patient_id FROM patients WHERE first_name = 'Jane' AND last_name = 'Smith');"
  },
  {
    "prompt": "Reason for 'John Doe's' last appointment?",
    "context": {
      "appointments": {
        "columns": [
          "appointment_id",
          "patient_id",
          "appointment_date",
          "reason"
        ]
      },
      "patients": {
        "columns": ["patient_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT reason FROM appointments WHERE patient_id = (SELECT patient_id FROM patients WHERE first_name = 'John' AND last_name = 'Doe') ORDER BY appointment_date DESC FETCH FIRST 1 ROW ONLY;"
  },
  {
    "prompt": "Appointments with Dr. 'Emily Brown'?",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "doctor_id", "appointment_date", "status"]
      },
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT * FROM appointments WHERE doctor_id = (SELECT doctor_id FROM doctors WHERE first_name = 'Emily' AND last_name = 'Brown');"
  },
  {
    "prompt": "Next 7 days' appointments?",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "appointment_date", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE appointment_date BETWEEN TRUNC(SYSDATE) AND TRUNC(SYSDATE) + 7;"
  },
  {
    "prompt": "Upcoming appointments in 7 days?",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "appointment_date", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE appointment_date BETWEEN TRUNC(SYSDATE) AND TRUNC(SYSDATE) + 7;"
  },
  {
    "prompt": "Notes from last month's appointments?",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "appointment_date", "notes"]
      }
    },
    "query": "SELECT notes FROM appointments WHERE EXTRACT(MONTH FROM appointment_date) = EXTRACT(MONTH FROM ADD_MONTHS(SYSDATE, -1));"
  },
  {
    "prompt": "Appointments canceled last week?",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "appointment_date", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE status = 'Canceled' AND appointment_date BETWEEN TRUNC(SYSDATE) - 7 AND TRUNC(SYSDATE);"
  },
  {
    "prompt": "Canceled appointments this past week?",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "appointment_date", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE status = 'Canceled' AND appointment_date BETWEEN TRUNC(SYSDATE) - 7 AND TRUNC(SYSDATE);"
  },
  {
    "prompt": "Appointments for 'Routine Checkup'?",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "reason", "appointment_date", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE reason = 'Routine Checkup';"
  },
  {
    "prompt": "Which appointments are today?",
    "context": {
      "appointments": {
        "columns": [
          "appointment_id",
          "patient_id",
          "doctor_id",
          "appointment_date",
          "status"
        ]
      }
    },
    "query": "SELECT * FROM appointments WHERE appointment_date = TRUNC(SYSDATE);"
  },
  {
    "prompt": "Show all today's bookings.",
    "context": {
      "appointments": {
        "columns": [
          "appointment_id",
          "patient_id",
          "doctor_id",
          "appointment_date",
          "status"
        ]
      }
    },
    "query": "SELECT * FROM appointments WHERE appointment_date = TRUNC(SYSDATE);"
  },
  {
    "prompt": "Find completed visits.",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "patient_id", "doctor_id", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE status = 'Completed';"
  },
  {
    "prompt": "Retrieve all finished appointments.",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "patient_id", "doctor_id", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE status = 'Completed';"
  },
  {
    "prompt": "Are there any pending visits?",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "patient_id", "doctor_id", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE status = 'Pending';"
  },
  {
    "prompt": "List all open appointments.",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "patient_id", "doctor_id", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE status = 'Pending';"
  },
  {
    "prompt": "Appointments of 'Jane Smith'?",
    "context": {
      "appointments": {
        "columns": [
          "appointment_id",
          "patient_id",
          "appointment_date",
          "status",
          "reason"
        ]
      },
      "patients": {
        "columns": ["patient_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT * FROM appointments WHERE patient_id = (SELECT patient_id FROM patients WHERE first_name = 'Jane' AND last_name = 'Smith');"
  },
  {
    "prompt": "Which bookings are for 'Jane Smith'?",
    "context": {
      "appointments": {
        "columns": [
          "appointment_id",
          "patient_id",
          "appointment_date",
          "status",
          "reason"
        ]
      },
      "patients": {
        "columns": ["patient_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT * FROM appointments WHERE patient_id = (SELECT patient_id FROM patients WHERE first_name = 'Jane' AND last_name = 'Smith');"
  },
  {
    "prompt": "Last visit reason for 'John Doe'?",
    "context": {
      "appointments": {
        "columns": [
          "appointment_id",
          "patient_id",
          "appointment_date",
          "reason"
        ]
      },
      "patients": {
        "columns": ["patient_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT reason FROM appointments WHERE patient_id = (SELECT patient_id FROM patients WHERE first_name = 'John' AND last_name = 'Doe') ORDER BY appointment_date DESC FETCH FIRST 1 ROW ONLY;"
  },
  {
    "prompt": "Get the last visit reason of 'John Doe.'",
    "context": {
      "appointments": {
        "columns": [
          "appointment_id",
          "patient_id",
          "appointment_date",
          "reason"
        ]
      },
      "patients": {
        "columns": ["patient_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT reason FROM appointments WHERE patient_id = (SELECT patient_id FROM patients WHERE first_name = 'John' AND last_name = 'Doe') ORDER BY appointment_date DESC FETCH FIRST 1 ROW ONLY;"
  },
  {
    "prompt": "Bookings with Dr. 'Emily Brown'?",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "doctor_id", "appointment_date", "status"]
      },
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT * FROM appointments WHERE doctor_id = (SELECT doctor_id FROM doctors WHERE first_name = 'Emily' AND last_name = 'Brown');"
  },
  {
    "prompt": "Find visits with Dr. 'Emily Brown.'",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "doctor_id", "appointment_date", "status"]
      },
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT * FROM appointments WHERE doctor_id = (SELECT doctor_id FROM doctors WHERE first_name = 'Emily' AND last_name = 'Brown');"
  },
  {
    "prompt": "Upcoming bookings in 7 days?",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "appointment_date", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE appointment_date BETWEEN TRUNC(SYSDATE) AND TRUNC(SYSDATE) + 7;"
  },
  {
    "prompt": "What are the next week's bookings?",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "appointment_date", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE appointment_date BETWEEN TRUNC(SYSDATE) AND TRUNC(SYSDATE) + 7;"
  },
  {
    "prompt": "Last month's appointment notes?",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "appointment_date", "notes"]
      }
    },
    "query": "SELECT notes FROM appointments WHERE EXTRACT(MONTH FROM appointment_date) = EXTRACT(MONTH FROM ADD_MONTHS(SYSDATE, -1));"
  },
  {
    "prompt": "Find notes from past month's visits.",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "appointment_date", "notes"]
      }
    },
    "query": "SELECT notes FROM appointments WHERE EXTRACT(MONTH FROM appointment_date) = EXTRACT(MONTH FROM ADD_MONTHS(SYSDATE, -1));"
  },
  {
    "prompt": "Canceled visits last week?",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "appointment_date", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE status = 'Canceled' AND appointment_date BETWEEN TRUNC(SYSDATE) - 7 AND TRUNC(SYSDATE);"
  },
  {
    "prompt": "List appointments canceled this week.",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "appointment_date", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE status = 'Canceled' AND appointment_date BETWEEN TRUNC(SYSDATE) - 7 AND TRUNC(SYSDATE);"
  },
  {
    "prompt": "Visits for 'Routine Checkup'?",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "reason", "appointment_date", "status"]
      }
    },
    "query": "SELECT * FROM appointments WHERE reason = 'Routine Checkup';"
  },
  {
    "prompt": "List all doctors and their specializations.",
    "context": {
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name", "specialization"]
      }
    },
    "query": "SELECT first_name, last_name, specialization FROM doctors;"
  },
  {
    "prompt": "Show all doctors with their specialties.",
    "context": {
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name", "specialization"]
      }
    },
    "query": "SELECT first_name, last_name, specialization FROM doctors;"
  },
  {
    "prompt": "Retrieve contact info for 'Cardiology' doctors.",
    "context": {
      "doctors": {
        "columns": [
          "doctor_id",
          "first_name",
          "last_name",
          "specialization",
          "phone",
          "email"
        ]
      }
    },
    "query": "SELECT first_name, last_name, phone, email FROM doctors WHERE specialization = 'Cardiology';"
  },
  {
    "prompt": "Contact details of 'Cardiology' department doctors?",
    "context": {
      "doctors": {
        "columns": [
          "doctor_id",
          "first_name",
          "last_name",
          "specialization",
          "phone",
          "email"
        ]
      }
    },
    "query": "SELECT first_name, last_name, phone, email FROM doctors WHERE specialization = 'Cardiology';"
  },
  {
    "prompt": "Doctors' hire dates in the hospital?",
    "context": {
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name", "hire_date"]
      }
    },
    "query": "SELECT first_name, last_name, hire_date FROM doctors;"
  },
  {
    "prompt": "When were all doctors hired?",
    "context": {
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name", "hire_date"]
      }
    },
    "query": "SELECT first_name, last_name, hire_date FROM doctors;"
  },
  {
    "prompt": "Doctors hired before 2015?",
    "context": {
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name", "hire_date"]
      }
    },
    "query": "SELECT first_name, last_name, hire_date FROM doctors WHERE hire_date < TO_DATE('2015-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Find all doctors employed prior to 2015.",
    "context": {
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name", "hire_date"]
      }
    },
    "query": "SELECT first_name, last_name, hire_date FROM doctors WHERE hire_date < TO_DATE('2015-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Doctors in the 'Pediatrics' department?",
    "context": {
      "doctors": {
        "columns": [
          "doctor_id",
          "first_name",
          "last_name",
          "specialization",
          "department_id"
        ]
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT first_name, last_name FROM doctors WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Pediatrics');"
  },
  {
    "prompt": "List all 'Pediatrics' doctors.",
    "context": {
      "doctors": {
        "columns": [
          "doctor_id",
          "first_name",
          "last_name",
          "specialization",
          "department_id"
        ]
      },
      "departments": {
        "columns": ["department_id", "department_name"]
      }
    },
    "query": "SELECT first_name, last_name FROM doctors WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Pediatrics');"
  },
  {
    "prompt": "Phone numbers of 'Orthopedics' doctors?",
    "context": {
      "doctors": {
        "columns": [
          "doctor_id",
          "first_name",
          "last_name",
          "specialization",
          "phone"
        ]
      }
    },
    "query": "SELECT first_name, last_name, phone FROM doctors WHERE specialization = 'Orthopedics';"
  },
  {
    "prompt": "Get contacts for doctors in 'Orthopedics'.",
    "context": {
      "doctors": {
        "columns": [
          "doctor_id",
          "first_name",
          "last_name",
          "specialization",
          "phone"
        ]
      }
    },
    "query": "SELECT first_name, last_name, phone FROM doctors WHERE specialization = 'Orthopedics';"
  },
  {
    "prompt": "Who heads the 'Neurology' department?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "head_doctor_id"]
      },
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT first_name, last_name FROM doctors WHERE doctor_id = (SELECT head_doctor_id FROM departments WHERE department_name = 'Neurology');"
  },
  {
    "prompt": "Neurology department lead doctor?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "head_doctor_id"]
      },
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT first_name, last_name FROM doctors WHERE doctor_id = (SELECT head_doctor_id FROM departments WHERE department_name = 'Neurology');"
  },
  {
    "prompt": "Doctors with over 10 years experience?",
    "context": {
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name", "hire_date"]
      }
    },
    "query": "SELECT first_name, last_name FROM doctors WHERE hire_date < ADD_MONTHS(SYSDATE, -120);"
  },
  {
    "prompt": "Who has been working for more than 10 years?",
    "context": {
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name", "hire_date"]
      }
    },
    "query": "SELECT first_name, last_name FROM doctors WHERE hire_date < ADD_MONTHS(SYSDATE, -120);"
  },
  {
    "prompt": "List prescriptions from the last 30 days.",
    "context": {
      "prescriptions": {
        "columns": [
          "prescription_id",
          "appointment_id",
          "medicine_name",
          "dosage",
          "frequency",
          "start_date",
          "end_date"
        ]
      }
    },
    "query": "SELECT * FROM prescriptions WHERE start_date >= TRUNC(SYSDATE) - 30;"
  },
  {
    "prompt": "Prescriptions issued in the past month?",
    "context": {
      "prescriptions": {
        "columns": [
          "prescription_id",
          "appointment_id",
          "medicine_name",
          "dosage",
          "frequency",
          "start_date",
          "end_date"
        ]
      }
    },
    "query": "SELECT * FROM prescriptions WHERE start_date >= TRUNC(SYSDATE) - 30;"
  },
  {
    "prompt": "Prescriptions for 'Jane Smith'?",
    "context": {
      "prescriptions": {
        "columns": [
          "prescription_id",
          "appointment_id",
          "medicine_name",
          "dosage",
          "frequency",
          "start_date",
          "end_date"
        ]
      },
      "patients": {
        "columns": ["patient_id", "first_name", "last_name"]
      },
      "appointments": {
        "columns": ["appointment_id", "patient_id"]
      }
    },
    "query": "SELECT * FROM prescriptions WHERE appointment_id IN (SELECT appointment_id FROM appointments WHERE patient_id = (SELECT patient_id FROM patients WHERE first_name = 'Jane' AND last_name = 'Smith'));"
  },
  {
    "prompt": "Retrieve prescriptions for 'Jane Smith'.",
    "context": {
      "prescriptions": {
        "columns": [
          "prescription_id",
          "appointment_id",
          "medicine_name",
          "dosage",
          "frequency",
          "start_date",
          "end_date"
        ]
      },
      "patients": {
        "columns": ["patient_id", "first_name", "last_name"]
      },
      "appointments": {
        "columns": ["appointment_id", "patient_id"]
      }
    },
    "query": "SELECT * FROM prescriptions WHERE appointment_id IN (SELECT appointment_id FROM appointments WHERE patient_id = (SELECT patient_id FROM patients WHERE first_name = 'Jane' AND last_name = 'Smith'));"
  },
  {
    "prompt": "Which prescriptions include 'Paracetamol'?",
    "context": {
      "prescriptions": {
        "columns": ["prescription_id", "medicine_name"]
      }
    },
    "query": "SELECT * FROM prescriptions WHERE medicine_name = 'Paracetamol';"
  },
  {
    "prompt": "Prescriptions for 'Paracetamol'?",
    "context": {
      "prescriptions": {
        "columns": ["prescription_id", "medicine_name"]
      }
    },
    "query": "SELECT * FROM prescriptions WHERE medicine_name = 'Paracetamol';"
  },
  {
    "prompt": "Show prescriptions for Dr. 'Emily Brown'.",
    "context": {
      "prescriptions": {
        "columns": ["prescription_id", "appointment_id", "medicine_name"]
      },
      "appointments": {
        "columns": ["appointment_id", "doctor_id"]
      },
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT * FROM prescriptions WHERE appointment_id IN (SELECT appointment_id FROM appointments WHERE doctor_id = (SELECT doctor_id FROM doctors WHERE first_name = 'Emily' AND last_name = 'Brown'));"
  },
  {
    "prompt": "List prescriptions for appointments with Dr. 'Emily Brown'.",
    "context": {
      "prescriptions": {
        "columns": ["prescription_id", "appointment_id", "medicine_name"]
      },
      "appointments": {
        "columns": ["appointment_id", "doctor_id"]
      },
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT * FROM prescriptions WHERE appointment_id IN (SELECT appointment_id FROM appointments WHERE doctor_id = (SELECT doctor_id FROM doctors WHERE first_name = 'Emily' AND last_name = 'Brown'));"
  },
  {
    "prompt": "Dosage and frequency for 'John Doe's medicine?",
    "context": {
      "prescriptions": {
        "columns": [
          "prescription_id",
          "appointment_id",
          "medicine_name",
          "dosage",
          "frequency"
        ]
      },
      "patients": {
        "columns": ["patient_id", "first_name", "last_name"]
      },
      "appointments": {
        "columns": ["appointment_id", "patient_id"]
      }
    },
    "query": "SELECT dosage, frequency FROM prescriptions WHERE appointment_id IN (SELECT appointment_id FROM appointments WHERE patient_id = (SELECT patient_id FROM patients WHERE first_name = 'John' AND last_name = 'Doe'));"
  },
  {
    "prompt": "Active prescriptions?",
    "context": {
      "prescriptions": {
        "columns": ["prescription_id", "medicine_name", "end_date"]
      }
    },
    "query": "SELECT * FROM prescriptions WHERE end_date > TRUNC(SYSDATE);"
  },
  {
    "prompt": "Which prescriptions are still active?",
    "context": {
      "prescriptions": {
        "columns": ["prescription_id", "medicine_name", "end_date"]
      }
    },
    "query": "SELECT * FROM prescriptions WHERE end_date > TRUNC(SYSDATE);"
  },
  {
    "prompt": "Medicines prescribed more than twice this month?",
    "context": {
      "prescriptions": {
        "columns": ["medicine_name", "start_date"]
      }
    },
    "query": "SELECT medicine_name FROM prescriptions WHERE start_date >= TRUNC(SYSDATE, 'MM') GROUP BY medicine_name HAVING COUNT(*) > 2;"
  },
  {
    "prompt": "Find medicines prescribed frequently this month.",
    "context": {
      "prescriptions": {
        "columns": ["medicine_name", "start_date"]
      }
    },
    "query": "SELECT medicine_name FROM prescriptions WHERE start_date >= TRUNC(SYSDATE, 'MM') GROUP BY medicine_name HAVING COUNT(*) > 2;"
  },
  {
    "prompt": "Prescriptions for last week's appointments?",
    "context": {
      "prescriptions": {
        "columns": ["prescription_id", "appointment_id", "medicine_name"]
      },
      "appointments": {
        "columns": ["appointment_id", "appointment_date"]
      }
    },
    "query": "SELECT * FROM prescriptions WHERE appointment_id IN (SELECT appointment_id FROM appointments WHERE appointment_date BETWEEN TRUNC(SYSDATE) - 7 AND TRUNC(SYSDATE));"
  },
  {
    "prompt": "Show prescriptions from last week's bookings.",
    "context": {
      "prescriptions": {
        "columns": ["prescription_id", "appointment_id", "medicine_name"]
      },
      "appointments": {
        "columns": ["appointment_id", "appointment_date"]
      }
    },
    "query": "SELECT * FROM prescriptions WHERE appointment_id IN (SELECT appointment_id FROM appointments WHERE appointment_date BETWEEN TRUNC(SYSDATE) - 7 AND TRUNC(SYSDATE));"
  },
  {
    "prompt": "Lab tests conducted in the last 7 days?",
    "context": {
      "labs": {
        "columns": [
          "lab_id",
          "test_name",
          "test_date",
          "result",
          "technician_id"
        ]
      }
    },
    "query": "SELECT * FROM labs WHERE test_date BETWEEN TRUNC(SYSDATE) - 7 AND TRUNC(SYSDATE);"
  },
  {
    "prompt": "List all lab tests from last week.",
    "context": {
      "labs": {
        "columns": [
          "lab_id",
          "test_name",
          "test_date",
          "result",
          "technician_id"
        ]
      }
    },
    "query": "SELECT * FROM labs WHERE test_date BETWEEN TRUNC(SYSDATE) - 7 AND TRUNC(SYSDATE);"
  },
  {
    "prompt": "Lab results for 'Jane Smith'?",
    "context": {
      "labs": {
        "columns": ["lab_id", "appointment_id", "test_name", "result"]
      },
      "appointments": {
        "columns": ["appointment_id", "patient_id"]
      },
      "patients": {
        "columns": ["patient_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT test_name, result FROM labs WHERE appointment_id IN (SELECT appointment_id FROM appointments WHERE patient_id = (SELECT patient_id FROM patients WHERE first_name = 'Jane' AND last_name = 'Smith'));"
  },
  {
    "prompt": "Retrieve lab results for 'Jane Smith'.",
    "context": {
      "labs": {
        "columns": ["lab_id", "appointment_id", "test_name", "result"]
      },
      "appointments": {
        "columns": ["appointment_id", "patient_id"]
      },
      "patients": {
        "columns": ["patient_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT test_name, result FROM labs WHERE appointment_id IN (SELECT appointment_id FROM appointments WHERE patient_id = (SELECT patient_id FROM patients WHERE first_name = 'Jane' AND last_name = 'Smith'));"
  },
  {
    "prompt": "Tests scheduled for tomorrow?",
    "context": {
      "labs": {
        "columns": ["lab_id", "test_name", "test_date"]
      }
    },
    "query": "SELECT * FROM labs WHERE test_date = TRUNC(SYSDATE) + 1;"
  },
  {
    "prompt": "Lab tests scheduled for the next day.",
    "context": {
      "labs": {
        "columns": ["lab_id", "test_name", "test_date"]
      }
    },
    "query": "SELECT * FROM labs WHERE test_date = TRUNC(SYSDATE) + 1;"
  },
  {
    "prompt": "Results for appointment on '2023-12-01'?",
    "context": {
      "labs": {
        "columns": ["lab_id", "appointment_id", "test_name", "result"]
      },
      "appointments": {
        "columns": ["appointment_id", "appointment_date"]
      }
    },
    "query": "SELECT test_name, result FROM labs WHERE appointment_id = (SELECT appointment_id FROM appointments WHERE appointment_date = TO_DATE('2023-12-01', 'YYYY-MM-DD'));"
  },
  {
    "prompt": "Lab test details for the 2023-12-01 appointment.",
    "context": {
      "labs": {
        "columns": ["lab_id", "appointment_id", "test_name", "result"]
      },
      "appointments": {
        "columns": ["appointment_id", "appointment_date"]
      }
    },
    "query": "SELECT test_name, result FROM labs WHERE appointment_id = (SELECT appointment_id FROM appointments WHERE appointment_date = TO_DATE('2023-12-01', 'YYYY-MM-DD'));"
  },
  {
    "prompt": "Technicians for last month's tests?",
    "context": {
      "labs": {
        "columns": ["lab_id", "test_date", "technician_id"]
      }
    },
    "query": "SELECT technician_id FROM labs WHERE EXTRACT(MONTH FROM test_date) = EXTRACT(MONTH FROM ADD_MONTHS(SYSDATE, -1));"
  },
  {
    "prompt": "Who conducted lab tests last month?",
    "context": {
      "labs": {
        "columns": ["lab_id", "test_date", "technician_id"]
      }
    },
    "query": "SELECT technician_id FROM labs WHERE EXTRACT(MONTH FROM test_date) = EXTRACT(MONTH FROM ADD_MONTHS(SYSDATE, -1));"
  },
  {
    "prompt": "Positive lab test results?",
    "context": {
      "labs": {
        "columns": ["lab_id", "test_name", "result"]
      }
    },
    "query": "SELECT * FROM labs WHERE result = 'Positive';"
  },
  {
    "prompt": "Find all lab tests marked 'Positive'.",
    "context": {
      "labs": {
        "columns": ["lab_id", "test_name", "result"]
      }
    },
    "query": "SELECT * FROM labs WHERE result = 'Positive';"
  },
  {
    "prompt": "Lab tests under Dr. 'Emily Brown'?",
    "context": {
      "labs": {
        "columns": ["lab_id", "appointment_id", "test_name"]
      },
      "appointments": {
        "columns": ["appointment_id", "doctor_id"]
      },
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT * FROM labs WHERE appointment_id IN (SELECT appointment_id FROM appointments WHERE doctor_id = (SELECT doctor_id FROM doctors WHERE first_name = 'Emily' AND last_name = 'Brown'));"
  },
  {
    "prompt": "Tests related to 'Blood Work'?",
    "context": {
      "labs": {
        "columns": ["lab_id", "test_name", "result"]
      }
    },
    "query": "SELECT * FROM labs WHERE test_name = 'Blood Work';"
  },
  {
    "prompt": "Show all tests for 'Blood Work'.",
    "context": {
      "labs": {
        "columns": ["lab_id", "test_name", "result"]
      }
    },
    "query": "SELECT * FROM labs WHERE test_name = 'Blood Work';"
  },
  {
    "prompt": "Medical records for 'John Doe'?",
    "context": {
      "medical_records": {
        "columns": [
          "record_id",
          "patient_id",
          "record_date",
          "diagnosis",
          "treatment_plan"
        ]
      },
      "patients": {
        "columns": ["patient_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT * FROM medical_records WHERE patient_id = (SELECT patient_id FROM patients WHERE first_name = 'John' AND last_name = 'Doe');"
  },
  {
    "prompt": "Retrieve diagnosis and treatment for all patients.",
    "context": {
      "medical_records": {
        "columns": ["record_id", "diagnosis", "treatment_plan"]
      }
    },
    "query": "SELECT diagnosis, treatment_plan FROM medical_records;"
  },
  {
    "prompt": "Show all medical records from last year.",
    "context": {
      "medical_records": {
        "columns": ["record_id", "record_date", "diagnosis", "treatment_plan"]
      }
    },
    "query": "SELECT * FROM medical_records WHERE record_date >= ADD_MONTHS(TRUNC(SYSDATE, 'YYYY'), -12);"
  },
  {
    "prompt": "Who has a diagnosis of 'Diabetes'?",
    "context": {
      "medical_records": {
        "columns": ["record_id", "patient_id", "diagnosis"]
      },
      "patients": {
        "columns": ["patient_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT first_name, last_name FROM patients WHERE patient_id IN (SELECT patient_id FROM medical_records WHERE diagnosis = 'Diabetes');"
  },
  {
    "prompt": "Treatment plans for 'Hypertension' diagnosis?",
    "context": {
      "medical_records": {
        "columns": ["record_id", "diagnosis", "treatment_plan"]
      }
    },
    "query": "SELECT treatment_plan FROM medical_records WHERE diagnosis = 'Hypertension';"
  },
  {
    "prompt": "List all records without treatment plans.",
    "context": {
      "medical_records": {
        "columns": ["record_id", "treatment_plan"]
      }
    },
    "query": "SELECT * FROM medical_records WHERE treatment_plan IS NULL;"
  },
  {
    "prompt": "Records created before 2020?",
    "context": {
      "medical_records": {
        "columns": ["record_id", "record_date"]
      }
    },
    "query": "SELECT * FROM medical_records WHERE record_date < TO_DATE('2020-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Latest record for 'Jane Smith'?",
    "context": {
      "medical_records": {
        "columns": [
          "record_id",
          "patient_id",
          "record_date",
          "diagnosis",
          "treatment_plan"
        ]
      },
      "patients": {
        "columns": ["patient_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT * FROM medical_records WHERE patient_id = (SELECT patient_id FROM patients WHERE first_name = 'Jane' AND last_name = 'Smith') AND record_date = (SELECT MAX(record_date) FROM medical_records WHERE patient_id = (SELECT patient_id FROM patients WHERE first_name = 'Jane' AND last_name = 'Smith'));"
  },
  {
    "prompt": "Show treatment plans for patients with 'Hypertension'.",
    "context": {
      "medical_records": {
        "columns": ["record_id", "diagnosis", "treatment_plan"]
      }
    },
    "query": "SELECT treatment_plan FROM medical_records WHERE diagnosis = 'Hypertension';"
  },
  {
    "prompt": "Who has no treatment plan assigned?",
    "context": {
      "medical_records": {
        "columns": ["record_id", "patient_id", "treatment_plan"]
      },
      "patients": {
        "columns": ["patient_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT first_name, last_name FROM patients WHERE patient_id IN (SELECT patient_id FROM medical_records WHERE treatment_plan IS NULL);"
  },
  {
    "prompt": "Which records were added before 2020?",
    "context": {
      "medical_records": {
        "columns": ["record_id", "record_date"]
      }
    },
    "query": "SELECT * FROM medical_records WHERE record_date < TO_DATE('2020-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Most recent record for patient 'Jane Smith'.",
    "context": {
      "medical_records": {
        "columns": [
          "record_id",
          "patient_id",
          "record_date",
          "diagnosis",
          "treatment_plan"
        ]
      },
      "patients": {
        "columns": ["patient_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT * FROM medical_records WHERE patient_id = (SELECT patient_id FROM patients WHERE first_name = 'Jane' AND last_name = 'Smith') AND record_date = (SELECT MAX(record_date) FROM medical_records WHERE patient_id = (SELECT patient_id FROM patients WHERE first_name = 'Jane' AND last_name = 'Smith'));"
  },
  {
    "prompt": "List all hospital departments and their budgets.",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget"]
      }
    },
    "query": "SELECT department_name, budget FROM departments;"
  },
  {
    "prompt": "Show department names and budgets.",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget"]
      }
    },
    "query": "SELECT department_name, budget FROM departments;"
  },
  {
    "prompt": "Who heads each department?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "head_doctor_id"]
      },
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT department_name, (SELECT first_name || ' ' || last_name FROM doctors WHERE doctor_id = head_doctor_id) AS head_doctor FROM departments;"
  },
  {
    "prompt": "Retrieve department heads.",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "head_doctor_id"]
      },
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT department_name, (SELECT first_name || ' ' || last_name FROM doctors WHERE doctor_id = head_doctor_id) AS head_doctor FROM departments;"
  },
  {
    "prompt": "Departments with budgets over $1,000,000?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget"]
      }
    },
    "query": "SELECT department_name, budget FROM departments WHERE budget > 1000000;"
  },
  {
    "prompt": "Show departments with high budgets.",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget"]
      }
    },
    "query": "SELECT department_name, budget FROM departments WHERE budget > 1000000;"
  },
  {
    "prompt": "Doctors in 'Radiology'?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name"]
      },
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name", "department_id"]
      }
    },
    "query": "SELECT first_name, last_name FROM doctors WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Radiology');"
  },
  {
    "prompt": "Doctors working in 'Radiology'.",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name"]
      },
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name", "department_id"]
      }
    },
    "query": "SELECT first_name, last_name FROM doctors WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Radiology');"
  },
  {
    "prompt": "Number of hospital departments?",
    "context": {
      "departments": {
        "columns": ["department_id"]
      }
    },
    "query": "SELECT COUNT(*) AS total_departments FROM departments;"
  },
  {
    "prompt": "Total departments in the hospital?",
    "context": {
      "departments": {
        "columns": ["department_id"]
      }
    },
    "query": "SELECT COUNT(*) AS total_departments FROM departments;"
  },
  {
    "prompt": "Departments created in the last 5 years?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget"],
        "created_at": "TIMESTAMP"
      }
    },
    "query": "SELECT department_name FROM departments WHERE created_at >= ADD_MONTHS(SYSDATE, -60);"
  },
  {
    "prompt": "Which departments are recent?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget"],
        "created_at": "TIMESTAMP"
      }
    },
    "query": "SELECT department_name FROM departments WHERE created_at >= ADD_MONTHS(SYSDATE, -60);"
  },
  {
    "prompt": "Department led by Dr. 'Emily Brown'?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "head_doctor_id"]
      },
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT * FROM departments WHERE head_doctor_id = (SELECT doctor_id FROM doctors WHERE first_name = 'Emily' AND last_name = 'Brown');"
  },
  {
    "prompt": "Show details for Dr. 'Emily Brown's department.",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "head_doctor_id"]
      },
      "doctors": {
        "columns": ["doctor_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT * FROM departments WHERE head_doctor_id = (SELECT doctor_id FROM doctors WHERE first_name = 'Emily' AND last_name = 'Brown');"
  },
  {
    "prompt": "How many patients are registered in the hospital?",
    "context": {
      "patients": {
        "columns": ["patient_id"]
      }
    },
    "query": "SELECT COUNT(*) AS total_patients FROM patients;"
  },
  {
    "prompt": "Total registered patients?",
    "context": {
      "patients": {
        "columns": ["patient_id"]
      }
    },
    "query": "SELECT COUNT(*) AS total_patients FROM patients;"
  },
  {
    "prompt": "Retrieve the total number of appointments conducted this year.",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "appointment_date", "status"]
      }
    },
    "query": "SELECT COUNT(*) AS total_appointments FROM appointments WHERE appointment_date >= TO_DATE('2023-01-01', 'YYYY-MM-DD') AND status = 'Completed';"
  },
  {
    "prompt": "How many appointments were completed this year?",
    "context": {
      "appointments": {
        "columns": ["appointment_id", "appointment_date", "status"]
      }
    },
    "query": "SELECT COUNT(*) AS total_appointments FROM appointments WHERE appointment_date >= TO_DATE('2023-01-01', 'YYYY-MM-DD') AND status = 'Completed';"
  },
  {
    "prompt": "How many doctors are working in the hospital?",
    "context": {
      "doctors": {
        "columns": ["doctor_id"]
      }
    },
    "query": "SELECT COUNT(*) AS total_doctors FROM doctors;"
  },
  {
    "prompt": "Total number of doctors?",
    "context": {
      "doctors": {
        "columns": ["doctor_id"]
      }
    },
    "query": "SELECT COUNT(*) AS total_doctors FROM doctors;"
  },
  {
    "prompt": "Show the total number of prescriptions issued last month.",
    "context": {
      "prescriptions": {
        "columns": ["prescription_id", "start_date"]
      }
    },
    "query": "SELECT COUNT(*) AS total_prescriptions FROM prescriptions WHERE start_date BETWEEN ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -1) AND TRUNC(SYSDATE, 'MM') - 1;"
  },
  {
    "prompt": "Prescriptions issued last month?",
    "context": {
      "prescriptions": {
        "columns": ["prescription_id", "start_date"]
      }
    },
    "query": "SELECT COUNT(*) AS total_prescriptions FROM prescriptions WHERE start_date BETWEEN ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -1) AND TRUNC(SYSDATE, 'MM') - 1;"
  },
  {
    "prompt": "What is the average budget of all departments?",
    "context": {
      "departments": {
        "columns": ["department_id", "budget"]
      }
    },
    "query": "SELECT AVG(budget) AS average_budget FROM departments;"
  },
  {
    "prompt": "Average budget for departments?",
    "context": {
      "departments": {
        "columns": ["department_id", "budget"]
      }
    },
    "query": "SELECT AVG(budget) AS average_budget FROM departments;"
  },
  {
    "prompt": "How many lab tests have been conducted this week?",
    "context": {
      "labs": {
        "columns": ["lab_id", "test_date"]
      }
    },
    "query": "SELECT COUNT(*) AS total_lab_tests FROM labs WHERE test_date BETWEEN TRUNC(SYSDATE, 'IW') AND SYSDATE;"
  },
  {
    "prompt": "Lab tests conducted this week?",
    "context": {
      "labs": {
        "columns": ["lab_id", "test_date"]
      }
    },
    "query": "SELECT COUNT(*) AS total_lab_tests FROM labs WHERE test_date BETWEEN TRUNC(SYSDATE, 'IW') AND SYSDATE;"
  },
  {
    "prompt": "Show the total number of active prescriptions.",
    "context": {
      "prescriptions": {
        "columns": ["prescription_id", "end_date"]
      }
    },
    "query": "SELECT COUNT(*) AS total_active_prescriptions FROM prescriptions WHERE end_date > SYSDATE;"
  },
  {
    "prompt": "How many active prescriptions are there?",
    "context": {
      "prescriptions": {
        "columns": ["prescription_id", "end_date"]
      }
    },
    "query": "SELECT COUNT(*) AS total_active_prescriptions FROM prescriptions WHERE end_date > SYSDATE;"
  },
  {
    "prompt": "How many medical records were created this year?",
    "context": {
      "medical_records": {
        "columns": ["record_id", "record_date"]
      }
    },
    "query": "SELECT COUNT(*) AS total_medical_records FROM medical_records WHERE record_date >= TO_DATE('2023-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Medical records created this year?",
    "context": {
      "medical_records": {
        "columns": ["record_id", "record_date"]
      }
    },
    "query": "SELECT COUNT(*) AS total_medical_records FROM medical_records WHERE record_date >= TO_DATE('2023-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "List all ships and their current status.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, status FROM ships;"
  },
  {
    "prompt": "Retrieve the details of ships built before the year 2000.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT * FROM ships WHERE build_year < 2000;"
  },
  {
    "prompt": "What are the inspection scores of all AI-enabled ships?",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, inspection_score FROM ships WHERE ai_enabled = TRUE;"
  },
  {
    "prompt": "List all ships currently under repair.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      },
      "repairs": {
        "columns": [
          "repair_id",
          "ship_id",
          "start_date",
          "end_date",
          "status",
          "total_cost",
          "supervisor_id",
          "priority_level"
        ],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT s.name FROM ships s JOIN repairs r ON s.ship_id = r.ship_id WHERE r.status = 'In Progress';"
  },
  {
    "prompt": "Retrieve the names and locations of all operational ships.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, location FROM ships WHERE status = 'Operational';"
  },
  {
    "prompt": "How many ships are owned by each owner?",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT owner, COUNT(*) AS ship_count FROM ships GROUP BY owner;"
  },
  {
    "prompt": "List all ships of type 'cargo' and their last maintenance dates.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, last_maintenance_date FROM ships WHERE type = 'cargo';"
  },
  {
    "prompt": "What is the average inspection score of all ships?",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT AVG(inspection_score) AS average_score FROM ships;"
  },
  {
    "prompt": "Show me all ships along with their status.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, status FROM ships;"
  },
  {
    "prompt": "What is the current status of all the ships?",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, status FROM ships;"
  },
  {
    "prompt": "Retrieve a list of ships and their operational statuses.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, status FROM ships;"
  },
  {
    "prompt": "Give me the names and statuses of all the ships in the database.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, status FROM ships;"
  },
  {
    "prompt": "Display all ships with their statuses.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, status FROM ships;"
  },
  {
    "prompt": "Retrieve the details of ships built before the year 2001.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT * FROM ships WHERE build_year < 2001;"
  },
  {
    "prompt": "Show all ship information for ships constructed before 1990.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT * FROM ships WHERE build_year < 1990;"
  },
  {
    "prompt": "Which ships were built before the year 1999? Provide their details.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT * FROM ships WHERE build_year < 1999;"
  },
  {
    "prompt": "List all ships that were built prior to 2010.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT * FROM ships WHERE build_year < 2010;"
  },
  {
    "prompt": "Retrieve details for ships constructed earlier than the year 2006.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT * FROM ships WHERE build_year < 2006;"
  },
  {
    "prompt": "Get all information about ships built before 2000.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT * FROM ships WHERE build_year < 2000;"
  },
  {
    "prompt": "Show the inspection scores of AI-equipped ships.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, inspection_score FROM ships WHERE ai_enabled = TRUE;"
  },
  {
    "prompt": "List the inspection ratings for all ships with AI integration.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, inspection_score FROM ships WHERE ai_enabled = TRUE;"
  },
  {
    "prompt": "Retrieve inspection scores for ships that are AI-enabled.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, inspection_score FROM ships WHERE ai_enabled = TRUE;"
  },
  {
    "prompt": "What are the inspection ratings of all ships with AI capabilities?",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, inspection_score FROM ships WHERE ai_enabled = TRUE;"
  },
  {
    "prompt": "Display inspection scores for every AI-enabled ship.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, inspection_score FROM ships WHERE ai_enabled = TRUE;"
  },
  {
    "prompt": "List all employees and their salaries.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, salary FROM employees;"
  },
  {
    "prompt": "Show me all employees along with their salaries.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, salary FROM employees;"
  },
  {
    "prompt": "Retrieve the details of employees in the 'Engineering' department.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT e.first_name, e.last_name, e.salary FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE d.department_name = 'Engineering';"
  },
  {
    "prompt": "Who are the employees certified in 'AI Maintenance'?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name FROM employees WHERE certifications LIKE '%AI Maintenance%';"
  },
  {
    "prompt": "List all employees who are certified in 'AI Maintenance'.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name FROM employees WHERE certifications LIKE '%AI Maintenance%';"
  },
  {
    "prompt": "What is the average salary of employees across all departments?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      }
    },
    "query": "SELECT AVG(salary) AS average_salary FROM employees;"
  },
  {
    "prompt": "Calculate the average salary of all employees.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      }
    },
    "query": "SELECT AVG(salary) AS average_salary FROM employees;"
  },
  {
    "prompt": "List employees who have received a salary increment in the last year.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, increment_rate FROM employees WHERE increment_rate > 0;"
  },
  {
    "prompt": "Retrieve all employees and their last training dates.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, last_training_date FROM employees;"
  },
  {
    "prompt": "Show me the last training dates of all employees.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, last_training_date FROM employees;"
  },
  {
    "prompt": "How many employees are currently unavailable?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      }
    },
    "query": "SELECT COUNT(*) AS unavailable_employees FROM employees WHERE availability_status = 'Unavailable';"
  },
  {
    "prompt": "Count the number of employees who are currently unavailable.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      }
    },
    "query": "SELECT COUNT(*) AS unavailable_employees FROM employees WHERE availability_status = 'Unavailable';"
  },
  {
    "prompt": "List employees assigned more than five tasks in the last month.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ],
        "foreign_keys": {
          "employee_id": "employee_tasks"
        }
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date",
          "completion_date"
        ]
      }
    },
    "query": "SELECT e.first_name, e.last_name, COUNT(et.task_id) AS task_count FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id WHERE et.assigned_date >= ADD_MONTHS(SYSDATE, -1) GROUP BY e.first_name, e.last_name HAVING COUNT(et.task_id) > 5;"
  },
  {
    "prompt": "Who completed more than five tasks in the last month?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ],
        "foreign_keys": {
          "employee_id": "employee_tasks"
        }
      },
      "employee_tasks": {
        "columns": [
          "employee_task_id",
          "employee_id",
          "task_id",
          "assigned_date",
          "completion_date"
        ]
      }
    },
    "query": "SELECT e.first_name, e.last_name, COUNT(et.task_id) AS task_count FROM employees e JOIN employee_tasks et ON e.employee_id = et.employee_id WHERE et.assigned_date >= ADD_MONTHS(SYSDATE, -1) GROUP BY e.first_name, e.last_name HAVING COUNT(et.task_id) > 5;"
  },
  {
    "prompt": "List all AI cameras that need servicing.",
    "context": {
      "ai_cameras": {
        "columns": [
          "camera_id",
          "ship_id",
          "location",
          "status",
          "last_service_date",
          "repair_cost",
          "task_assigned_id"
        ]
      }
    },
    "query": "SELECT camera_id, ship_id, location FROM ai_cameras WHERE status = 'Needs Servicing';"
  },
  {
    "prompt": "Show me all AI cameras that require servicing.",
    "context": {
      "ai_cameras": {
        "columns": [
          "camera_id",
          "ship_id",
          "location",
          "status",
          "last_service_date",
          "repair_cost",
          "task_assigned_id"
        ]
      }
    },
    "query": "SELECT camera_id, ship_id, location FROM ai_cameras WHERE status = 'Needs Servicing';"
  },
  {
    "prompt": "Retrieve details of all drones with battery status below 20%.",
    "context": {
      "drones": {
        "columns": [
          "drone_id",
          "type",
          "status",
          "last_service_date",
          "battery_status",
          "repair_cost",
          "inspection_count"
        ]
      }
    },
    "query": "SELECT drone_id, type, battery_status FROM drones WHERE battery_status < 20;"
  },
  {
    "prompt": "Which drones have a battery status below 20%? Provide their details.",
    "context": {
      "drones": {
        "columns": [
          "drone_id",
          "type",
          "status",
          "last_service_date",
          "battery_status",
          "repair_cost",
          "inspection_count"
        ]
      }
    },
    "query": "SELECT drone_id, type, battery_status FROM drones WHERE battery_status < 20;"
  },
  {
    "prompt": "What is the total repair cost for all trolleys this year?",
    "context": {
      "trolleys": {
        "columns": [
          "trolley_id",
          "status",
          "last_maintenance_date",
          "repair_cost"
        ]
      },
      "cost_tracking": {
        "columns": [
          "cost_id",
          "type",
          "description",
          "amount",
          "date",
          "related_id",
          "related_type"
        ]
      }
    },
    "query": "SELECT SUM(repair_cost) AS total_repair_cost FROM trolleys WHERE EXTRACT(YEAR FROM last_maintenance_date) = EXTRACT(YEAR FROM SYSDATE);"
  },
  {
    "prompt": "Calculate the total repair cost of all trolleys for the current year.",
    "context": {
      "trolleys": {
        "columns": [
          "trolley_id",
          "status",
          "last_maintenance_date",
          "repair_cost"
        ]
      },
      "cost_tracking": {
        "columns": [
          "cost_id",
          "type",
          "description",
          "amount",
          "date",
          "related_id",
          "related_type"
        ]
      }
    },
    "query": "SELECT SUM(repair_cost) AS total_repair_cost FROM trolleys WHERE EXTRACT(YEAR FROM last_maintenance_date) = EXTRACT(YEAR FROM SYSDATE);"
  },
  {
    "prompt": "List all sensors installed on the ship 'Poseidon' and their statuses.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      },
      "sensors": {
        "columns": [
          "sensor_id",
          "type",
          "ship_id",
          "location",
          "status",
          "data_collected",
          "last_calibration_date"
        ],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT sensor_id, type, status FROM sensors WHERE ship_id = (SELECT ship_id FROM ships WHERE name = 'Poseidon');"
  },
  {
    "prompt": "Retrieve all sensors and their statuses for the ship 'Poseidon'.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      },
      "sensors": {
        "columns": [
          "sensor_id",
          "type",
          "ship_id",
          "location",
          "status",
          "data_collected",
          "last_calibration_date"
        ],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT sensor_id, type, status FROM sensors WHERE ship_id = (SELECT ship_id FROM ships WHERE name = 'Poseidon');"
  },
  {
    "prompt": "Which machinery has exceeded its expected lifetime?",
    "context": {
      "machinery": {
        "columns": [
          "machinery_id",
          "name",
          "type",
          "location",
          "status",
          "last_service_date",
          "repair_cost",
          "expected_lifetime"
        ]
      }
    },
    "query": "SELECT machinery_id, name, type FROM machinery WHERE SYSDATE > ADD_MONTHS(last_service_date, expected_lifetime * 12);"
  },
  {
    "prompt": "List all machinery that has passed its expected lifetime.",
    "context": {
      "machinery": {
        "columns": [
          "machinery_id",
          "name",
          "type",
          "location",
          "status",
          "last_service_date",
          "repair_cost",
          "expected_lifetime"
        ]
      }
    },
    "query": "SELECT machinery_id, name, type FROM machinery WHERE SYSDATE > ADD_MONTHS(last_service_date, expected_lifetime * 12);"
  },
  {
    "prompt": "Retrieve the last maintenance dates of all cradles.",
    "context": {
      "cradles": {
        "columns": [
          "cradle_id",
          "ship_id",
          "status",
          "inspection_date",
          "repair_cost"
        ]
      }
    },
    "query": "SELECT cradle_id, inspection_date AS last_maintenance_date FROM cradles;"
  },
  {
    "prompt": "When were all cradles last maintained?",
    "context": {
      "cradles": {
        "columns": [
          "cradle_id",
          "ship_id",
          "status",
          "inspection_date",
          "repair_cost"
        ]
      }
    },
    "query": "SELECT cradle_id, inspection_date AS last_maintenance_date FROM cradles;"
  },
  {
    "prompt": "List all lifts with a capacity greater than 20 tons.",
    "context": {
      "lifts": {
        "columns": [
          "lift_id",
          "type",
          "status",
          "capacity",
          "last_inspection_date",
          "inspection_cost"
        ]
      }
    },
    "query": "SELECT lift_id, type, capacity FROM lifts WHERE capacity > 20;"
  },
  {
    "prompt": "Show all lifts that can carry more than 20 tons.",
    "context": {
      "lifts": {
        "columns": [
          "lift_id",
          "type",
          "status",
          "capacity",
          "last_inspection_date",
          "inspection_cost"
        ]
      }
    },
    "query": "SELECT lift_id, type, capacity FROM lifts WHERE capacity > 20;"
  },
  {
    "prompt": "How many AI cameras are operational across all ships?",
    "context": {
      "ai_cameras": {
        "columns": [
          "camera_id",
          "ship_id",
          "location",
          "status",
          "last_service_date",
          "repair_cost",
          "task_assigned_id"
        ]
      }
    },
    "query": "SELECT COUNT(*) AS operational_ai_cameras FROM ai_cameras WHERE status = 'Operational';"
  },
  {
    "prompt": "Count the number of operational AI cameras across ships.",
    "context": {
      "ai_cameras": {
        "columns": [
          "camera_id",
          "ship_id",
          "location",
          "status",
          "last_service_date",
          "repair_cost",
          "task_assigned_id"
        ]
      }
    },
    "query": "SELECT COUNT(*) AS operational_ai_cameras FROM ai_cameras WHERE status = 'Operational';"
  },
  {
    "prompt": "What is the total salary expense for the 'Engineering' department?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT SUM(e.salary) AS total_salary FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE d.department_name = 'Engineering';"
  },
  {
    "prompt": "Calculate the total salary of employees in the 'Engineering' department.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT SUM(e.salary) AS total_salary FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE d.department_name = 'Engineering';"
  },
  {
    "prompt": "Retrieve the total maintenance cost for all AI cameras and drones.",
    "context": {
      "ai_cameras": {
        "columns": [
          "camera_id",
          "ship_id",
          "location",
          "status",
          "last_service_date",
          "repair_cost",
          "task_assigned_id"
        ]
      },
      "drones": {
        "columns": [
          "drone_id",
          "type",
          "status",
          "last_service_date",
          "battery_status",
          "repair_cost",
          "inspection_count"
        ]
      }
    },
    "query": "SELECT SUM(ai_cameras.repair_cost + drones.repair_cost) AS total_maintenance_cost FROM ai_cameras, drones;"
  },
  {
    "prompt": "What is the combined repair cost for all AI cameras and drones?",
    "context": {
      "ai_cameras": {
        "columns": [
          "camera_id",
          "ship_id",
          "location",
          "status",
          "last_service_date",
          "repair_cost",
          "task_assigned_id"
        ]
      },
      "drones": {
        "columns": [
          "drone_id",
          "type",
          "status",
          "last_service_date",
          "battery_status",
          "repair_cost",
          "inspection_count"
        ]
      }
    },
    "query": "SELECT SUM(ai_cameras.repair_cost + drones.repair_cost) AS total_maintenance_cost FROM ai_cameras, drones;"
  },
  {
    "prompt": "What is the overall budget of each department?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT department_name, budget FROM departments;"
  },
  {
    "prompt": "List the budgets allocated for all departments.",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT department_name, budget FROM departments;"
  },
  {
    "prompt": "How much has been spent on repair tasks for ship 'Poseidon'?",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time",
          "cost",
          "assigned_employee_id",
          "status"
        ],
        "foreign_keys": {
          "repair_id": "repairs"
        }
      },
      "repairs": {
        "columns": [
          "repair_id",
          "ship_id",
          "start_date",
          "end_date",
          "status",
          "total_cost",
          "supervisor_id",
          "priority_level"
        ],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT SUM(rt.cost) AS total_repair_cost FROM repair_tasks rt JOIN repairs r ON rt.repair_id = r.repair_id JOIN ships s ON r.ship_id = s.ship_id WHERE s.name = 'Poseidon';"
  },
  {
    "prompt": "What is the monthly maintenance cost for all sensors?",
    "context": {
      "sensors": {
        "columns": [
          "sensor_id",
          "type",
          "ship_id",
          "location",
          "status",
          "data_collected",
          "last_calibration_date"
        ],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT SUM(repair_cost) AS monthly_maintenance_cost FROM sensors WHERE EXTRACT(MONTH FROM last_calibration_date) = EXTRACT(MONTH FROM SYSDATE);"
  },
  {
    "prompt": "Retrieve the highest and lowest repair costs this year.",
    "context": {
      "repairs": {
        "columns": [
          "repair_id",
          "ship_id",
          "start_date",
          "end_date",
          "status",
          "total_cost",
          "supervisor_id",
          "priority_level"
        ]
      }
    },
    "query": "SELECT MAX(total_cost) AS highest_cost, MIN(total_cost) AS lowest_cost FROM repairs WHERE EXTRACT(YEAR FROM start_date) = EXTRACT(YEAR FROM SYSDATE);"
  },
  {
    "prompt": "What is the total cost of repairs conducted by each department?",
    "context": {
      "repairs": {
        "columns": [
          "repair_id",
          "ship_id",
          "start_date",
          "end_date",
          "status",
          "total_cost",
          "supervisor_id",
          "priority_level"
        ],
        "foreign_keys": {
          "supervisor_id": "employees"
        }
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT d.department_name, SUM(r.total_cost) AS total_repair_cost FROM repairs r JOIN employees e ON r.supervisor_id = e.employee_id JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name;"
  },
  {
    "prompt": "List the most expensive repair conducted in the last year.",
    "context": {
      "repairs": {
        "columns": [
          "repair_id",
          "ship_id",
          "start_date",
          "end_date",
          "status",
          "total_cost",
          "supervisor_id",
          "priority_level"
        ]
      }
    },
    "query": "SELECT repair_id, total_cost FROM repairs WHERE start_date >= ADD_MONTHS(SYSDATE, -12) ORDER BY total_cost DESC FETCH FIRST 1 ROW ONLY;"
  },
  {
    "prompt": "Retrieve predictive maintenance insights for the ship 'Poseidon'.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      },
      "ai_insights": {
        "columns": [
          "insight_id",
          "ship_id",
          "generated_date",
          "category",
          "prediction",
          "confidence_score"
        ],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT category, prediction, confidence_score FROM ai_insights WHERE ship_id = (SELECT ship_id FROM ships WHERE name = 'Poseidon');"
  },
  {
    "prompt": "What are the predictive maintenance insights for the ship 'Poseidon'?",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      },
      "ai_insights": {
        "columns": [
          "insight_id",
          "ship_id",
          "generated_date",
          "category",
          "prediction",
          "confidence_score"
        ],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT category, prediction, confidence_score FROM ai_insights WHERE ship_id = (SELECT ship_id FROM ships WHERE name = 'Poseidon');"
  },
  {
    "prompt": "Which ships are predicted to require repairs in the next 30 days?",
    "context": {
      "ai_insights": {
        "columns": [
          "insight_id",
          "ship_id",
          "generated_date",
          "category",
          "prediction",
          "confidence_score"
        ],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT s.name FROM ships s JOIN ai_insights ai ON s.ship_id = ai.ship_id WHERE ai.prediction = 'Repairs Needed' AND ai.generated_date >= SYSDATE AND ai.generated_date <= SYSDATE + 30;"
  },
  {
    "prompt": "List ships that need repairs within the next month according to AI predictions.",
    "context": {
      "ai_insights": {
        "columns": [
          "insight_id",
          "ship_id",
          "generated_date",
          "category",
          "prediction",
          "confidence_score"
        ],
        "foreign_keys": {
          "ship_id": "ships"
        }
      },
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT s.name FROM ships s JOIN ai_insights ai ON s.ship_id = ai.ship_id WHERE ai.prediction = 'Repairs Needed' AND ai.generated_date >= SYSDATE AND ai.generated_date <= SYSDATE + 30;"
  },
  {
    "prompt": "What is the confidence score of all AI predictions made this month?",
    "context": {
      "ai_insights": {
        "columns": [
          "insight_id",
          "ship_id",
          "generated_date",
          "category",
          "prediction",
          "confidence_score"
        ]
      }
    },
    "query": "SELECT prediction, confidence_score FROM ai_insights WHERE EXTRACT(MONTH FROM generated_date) = EXTRACT(MONTH FROM SYSDATE);"
  },
  {
    "prompt": "Retrieve AI insights categorized under 'structural damage.'",
    "context": {
      "ai_insights": {
        "columns": [
          "insight_id",
          "ship_id",
          "generated_date",
          "category",
          "prediction",
          "confidence_score"
        ]
      }
    },
    "query": "SELECT ship_id, prediction, confidence_score FROM ai_insights WHERE category = 'Structural Damage';"
  },
  {
    "prompt": "Which ships have an inspection score below 50?",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, inspection_score FROM ships WHERE inspection_score < 50;"
  },
  {
    "prompt": "List all ships with inspection scores under 50.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, inspection_score FROM ships WHERE inspection_score < 50;"
  },
  {
    "prompt": "List the top three recommendations from AI for reducing repair costs.",
    "context": {
      "ai_insights": {
        "columns": [
          "insight_id",
          "ship_id",
          "generated_date",
          "category",
          "prediction",
          "confidence_score"
        ]
      }
    },
    "query": "SELECT prediction FROM ai_insights WHERE category = 'Repair Cost Reduction' ORDER BY confidence_score DESC FETCH FIRST 3 ROWS ONLY;"
  },
  {
    "prompt": "What percentage of AI predictions were accurate in the last year?",
    "context": {
      "ai_insights": {
        "columns": [
          "insight_id",
          "ship_id",
          "generated_date",
          "category",
          "prediction",
          "confidence_score"
        ]
      }
    },
    "query": "SELECT (COUNT(CASE WHEN confidence_score >= 0.8 THEN 1 END) * 100 / COUNT(*)) AS accuracy_percentage FROM ai_insights WHERE generated_date >= ADD_MONTHS(SYSDATE, -12);"
  },
  {
    "prompt": "Retrieve all predictive maintenance insights generated for drones.",
    "context": {
      "drones": {
        "columns": [
          "drone_id",
          "type",
          "status",
          "last_service_date",
          "battery_status",
          "repair_cost",
          "inspection_count"
        ]
      },
      "ai_insights": {
        "columns": [
          "insight_id",
          "ship_id",
          "generated_date",
          "category",
          "prediction",
          "confidence_score"
        ]
      }
    },
    "query": "SELECT ai.category, ai.prediction, ai.confidence_score FROM ai_insights ai JOIN drones d ON ai.ship_id = d.drone_id WHERE ai.category = 'Predictive Maintenance';"
  },
  {
    "prompt": "List all current stages of ongoing workflows.",
    "context": {
      "workflows": {
        "columns": [
          "workflow_id",
          "repair_id",
          "current_stage",
          "next_stage",
          "status",
          "start_date",
          "end_date"
        ]
      }
    },
    "query": "SELECT workflow_id, current_stage FROM workflows WHERE status = 'In Progress';"
  },
  {
    "prompt": "What are the current stages of all ongoing workflows?",
    "context": {
      "workflows": {
        "columns": [
          "workflow_id",
          "repair_id",
          "current_stage",
          "next_stage",
          "status",
          "start_date",
          "end_date"
        ]
      }
    },
    "query": "SELECT workflow_id, current_stage FROM workflows WHERE status = 'In Progress';"
  },
  {
    "prompt": "Retrieve the next stages of all repair workflows in progress.",
    "context": {
      "workflows": {
        "columns": [
          "workflow_id",
          "repair_id",
          "current_stage",
          "next_stage",
          "status",
          "start_date",
          "end_date"
        ]
      }
    },
    "query": "SELECT workflow_id, next_stage FROM workflows WHERE status = 'In Progress';"
  },
  {
    "prompt": "What are the next stages for all ongoing repair workflows?",
    "context": {
      "workflows": {
        "columns": [
          "workflow_id",
          "repair_id",
          "current_stage",
          "next_stage",
          "status",
          "start_date",
          "end_date"
        ]
      }
    },
    "query": "SELECT workflow_id, next_stage FROM workflows WHERE status = 'In Progress';"
  },
  {
    "prompt": "How many repair workflows were completed last month?",
    "context": {
      "workflows": {
        "columns": [
          "workflow_id",
          "repair_id",
          "current_stage",
          "next_stage",
          "status",
          "start_date",
          "end_date"
        ]
      }
    },
    "query": "SELECT COUNT(*) AS completed_workflows FROM workflows WHERE status = 'Completed' AND EXTRACT(MONTH FROM end_date) = EXTRACT(MONTH FROM SYSDATE) - 1;"
  },
  {
    "prompt": "Retrieve the count of repair workflows completed in the last month.",
    "context": {
      "workflows": {
        "columns": [
          "workflow_id",
          "repair_id",
          "current_stage",
          "next_stage",
          "status",
          "start_date",
          "end_date"
        ]
      }
    },
    "query": "SELECT COUNT(*) AS completed_workflows FROM workflows WHERE status = 'Completed' AND EXTRACT(MONTH FROM end_date) = EXTRACT(MONTH FROM SYSDATE) - 1;"
  },
  {
    "prompt": "List all tasks assigned to 'John Doe' and their statuses.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      },
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time",
          "cost",
          "assigned_employee_id",
          "status"
        ]
      }
    },
    "query": "SELECT rt.task_name, rt.status FROM repair_tasks rt JOIN employees e ON rt.assigned_employee_id = e.employee_id WHERE e.first_name = 'John' AND e.last_name = 'Doe';"
  },
  {
    "prompt": "What is the average time taken to complete a repair workflow?",
    "context": {
      "workflows": {
        "columns": [
          "workflow_id",
          "repair_id",
          "current_stage",
          "next_stage",
          "status",
          "start_date",
          "end_date"
        ]
      }
    },
    "query": "SELECT AVG(end_date - start_date) AS average_completion_time FROM workflows WHERE status = 'Completed';"
  },
  {
    "prompt": "Retrieve the status of all high-priority repair workflows.",
    "context": {
      "repairs": {
        "columns": [
          "repair_id",
          "ship_id",
          "start_date",
          "end_date",
          "status",
          "total_cost",
          "supervisor_id",
          "priority_level"
        ]
      },
      "workflows": {
        "columns": [
          "workflow_id",
          "repair_id",
          "current_stage",
          "next_stage",
          "status",
          "start_date",
          "end_date"
        ]
      }
    },
    "query": "SELECT w.workflow_id, w.status FROM workflows w JOIN repairs r ON w.repair_id = r.repair_id WHERE r.priority_level = 'High';"
  },
  {
    "prompt": "List all workflows that started but have no assigned end date.",
    "context": {
      "workflows": {
        "columns": [
          "workflow_id",
          "repair_id",
          "current_stage",
          "next_stage",
          "status",
          "start_date",
          "end_date"
        ]
      }
    },
    "query": "SELECT workflow_id, current_stage FROM workflows WHERE end_date IS NULL;"
  },
  {
    "prompt": "Retrieve details of tasks that were reassigned mid-workflow.",
    "context": {
      "repair_tasks": {
        "columns": [
          "task_id",
          "repair_id",
          "task_name",
          "description",
          "estimated_time",
          "actual_time",
          "cost",
          "assigned_employee_id",
          "status"
        ]
      }
    },
    "query": "SELECT task_id, task_name, repair_id FROM repair_tasks WHERE status = 'Reassigned';"
  },
  {
    "prompt": "List all employees who completed training in the last 6 months.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      },
      "employee_training": {
        "columns": [
          "training_id",
          "employee_id",
          "training_name",
          "certification",
          "completion_date"
        ],
        "foreign_keys": {
          "employee_id": "employees"
        }
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e JOIN employee_training et ON e.employee_id = et.employee_id WHERE et.completion_date >= ADD_MONTHS(SYSDATE, -6);"
  },
  {
    "prompt": "Which employees are certified in 'Drone Maintenance'?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name FROM employees WHERE certifications LIKE '%Drone Maintenance%';"
  },
  {
    "prompt": "Retrieve the certifications of employees in the 'Repair' department.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT e.first_name, e.last_name, e.certifications FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE d.department_name = 'Repair';"
  },
  {
    "prompt": "How many employees have certifications in more than three categories?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      }
    },
    "query": "SELECT COUNT(*) AS certified_employees FROM employees WHERE LENGTH(certifications) - LENGTH(REPLACE(certifications, ',', '')) >= 3;"
  },
  {
    "prompt": "List all employees with pending certifications.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      },
      "employee_training": {
        "columns": [
          "training_id",
          "employee_id",
          "training_name",
          "certification",
          "completion_date"
        ]
      }
    },
    "query": "SELECT e.first_name, e.last_name FROM employees e LEFT JOIN employee_training et ON e.employee_id = et.employee_id WHERE et.certification IS NULL;"
  },
  {
    "prompt": "Retrieve the names of employees who attended the most training sessions this year.",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      },
      "employee_training": {
        "columns": [
          "training_id",
          "employee_id",
          "training_name",
          "certification",
          "completion_date"
        ]
      }
    },
    "query": "SELECT e.first_name, e.last_name, COUNT(et.training_id) AS training_count FROM employees e JOIN employee_training et ON e.employee_id = et.employee_id WHERE EXTRACT(YEAR FROM et.completion_date) = EXTRACT(YEAR FROM SYSDATE) GROUP BY e.first_name, e.last_name ORDER BY training_count DESC FETCH FIRST 1 ROW ONLY;"
  },
  {
    "prompt": "Which certifications are most commonly held by employees?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      }
    },
    "query": "SELECT certifications, COUNT(*) AS certification_count FROM employees GROUP BY certifications ORDER BY certification_count DESC;"
  },
  {
    "prompt": "What are the upcoming training sessions planned for the 'AI' department?",
    "context": {
      "employee_training": {
        "columns": [
          "training_id",
          "employee_id",
          "training_name",
          "certification",
          "completion_date"
        ]
      },
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ],
        "foreign_keys": {
          "department_id": "departments"
        }
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT et.training_name, et.certification FROM employee_training et JOIN employees e ON et.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id WHERE d.department_name = 'AI' AND et.completion_date > SYSDATE;"
  },
  {
    "prompt": "List all inspections conducted for ship 'Poseidon.'",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      },
      "cradles": {
        "columns": [
          "cradle_id",
          "ship_id",
          "status",
          "inspection_date",
          "repair_cost"
        ],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT inspection_date, status FROM cradles WHERE ship_id = (SELECT ship_id FROM ships WHERE name = 'Poseidon');"
  },
  {
    "prompt": "Retrieve the remarks of inspections conducted last month.",
    "context": {
      "cradles": {
        "columns": [
          "cradle_id",
          "ship_id",
          "status",
          "inspection_date",
          "repair_cost"
        ]
      }
    },
    "query": "SELECT inspection_date, status FROM cradles WHERE EXTRACT(MONTH FROM inspection_date) = EXTRACT(MONTH FROM SYSDATE) - 1;"
  },
  {
    "prompt": "Which employees conducted inspections this year?",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      },
      "cradles": {
        "columns": [
          "cradle_id",
          "ship_id",
          "status",
          "inspection_date",
          "repair_cost"
        ]
      }
    },
    "query": "SELECT DISTINCT e.first_name, e.last_name FROM employees e JOIN cradles c ON e.employee_id = c.ship_id WHERE EXTRACT(YEAR FROM c.inspection_date) = EXTRACT(YEAR FROM SYSDATE);"
  },
  {
    "prompt": "List all ships with inspection scores below 60.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, inspection_score FROM ships WHERE inspection_score < 60;"
  },
  {
    "prompt": "How many inspections are scheduled for the next 30 days?",
    "context": {
      "cradles": {
        "columns": [
          "cradle_id",
          "ship_id",
          "status",
          "inspection_date",
          "repair_cost"
        ]
      }
    },
    "query": "SELECT COUNT(*) AS scheduled_inspections FROM cradles WHERE inspection_date BETWEEN SYSDATE AND SYSDATE + 30;"
  },
  {
    "prompt": "Retrieve the inspection costs for all cradles.",
    "context": {
      "cradles": {
        "columns": [
          "cradle_id",
          "ship_id",
          "status",
          "inspection_date",
          "repair_cost"
        ]
      }
    },
    "query": "SELECT cradle_id, repair_cost FROM cradles;"
  },
  {
    "prompt": "List inspection details for all lifts in 'operational' status.",
    "context": {
      "machinery": {
        "columns": [
          "machinery_id",
          "name",
          "type",
          "location",
          "status",
          "last_service_date",
          "repair_cost",
          "expected_lifetime"
        ]
      }
    },
    "query": "SELECT machinery_id, name, last_service_date FROM machinery WHERE status = 'Operational';"
  },
  {
    "prompt": "How many inspections have been conducted for drones?",
    "context": {
      "drones": {
        "columns": [
          "drone_id",
          "type",
          "status",
          "last_service_date",
          "battery_status",
          "repair_cost",
          "inspection_count"
        ]
      }
    },
    "query": "SELECT SUM(inspection_count) AS total_drone_inspections FROM drones;"
  },
  {
    "prompt": "List all inspections conducted for the ship 'Neptune.'",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      },
      "cradles": {
        "columns": [
          "cradle_id",
          "ship_id",
          "status",
          "inspection_date",
          "repair_cost"
        ],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT inspection_date, status FROM cradles WHERE ship_id = (SELECT ship_id FROM ships WHERE name = 'Neptune');"
  },
  {
    "prompt": "Show me all inspections for ships built before 2010.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      },
      "cradles": {
        "columns": [
          "cradle_id",
          "ship_id",
          "status",
          "inspection_date",
          "repair_cost"
        ],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT c.inspection_date, c.status FROM cradles c JOIN ships s ON c.ship_id = s.ship_id WHERE s.build_year < 2010;"
  },
  {
    "prompt": "Which inspections have a status of 'Pending'?",
    "context": {
      "cradles": {
        "columns": [
          "cradle_id",
          "ship_id",
          "status",
          "inspection_date",
          "repair_cost"
        ]
      }
    },
    "query": "SELECT cradle_id, inspection_date FROM cradles WHERE status = 'Pending';"
  },
  {
    "prompt": "List all operational ships with inspection scores above 80.",
    "context": {
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT name, inspection_score FROM ships WHERE status = 'Operational' AND inspection_score > 80;"
  },
  {
    "prompt": "How many inspections were conducted on cradles this year?",
    "context": {
      "cradles": {
        "columns": [
          "cradle_id",
          "ship_id",
          "status",
          "inspection_date",
          "repair_cost"
        ]
      }
    },
    "query": "SELECT COUNT(*) AS cradle_inspections FROM cradles WHERE EXTRACT(YEAR FROM inspection_date) = EXTRACT(YEAR FROM SYSDATE);"
  },
  {
    "prompt": "Retrieve details of inspections conducted on drones with low battery status.",
    "context": {
      "drones": {
        "columns": [
          "drone_id",
          "type",
          "status",
          "last_service_date",
          "battery_status",
          "repair_cost",
          "inspection_count"
        ]
      }
    },
    "query": "SELECT drone_id, inspection_count FROM drones WHERE battery_status < 20;"
  },
  {
    "prompt": "Show inspection remarks for all AI cameras on the ship 'Titanic.'",
    "context": {
      "ai_cameras": {
        "columns": [
          "camera_id",
          "ship_id",
          "location",
          "status",
          "last_service_date",
          "repair_cost",
          "task_assigned_id"
        ]
      },
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT camera_id, status FROM ai_cameras WHERE ship_id = (SELECT ship_id FROM ships WHERE name = 'Titanic');"
  },
  {
    "prompt": "List all ships inspected by employees certified in 'Structural Analysis.'",
    "context": {
      "employees": {
        "columns": [
          "employee_id",
          "first_name",
          "last_name",
          "department_id",
          "salary",
          "availability_status",
          "hire_date",
          "certifications",
          "increment_rate",
          "last_training_date"
        ]
      },
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      },
      "cradles": {
        "columns": [
          "cradle_id",
          "ship_id",
          "status",
          "inspection_date",
          "repair_cost"
        ],
        "foreign_keys": {
          "ship_id": "ships"
        }
      }
    },
    "query": "SELECT DISTINCT s.name FROM ships s JOIN cradles c ON s.ship_id = c.ship_id JOIN employees e ON c.ship_id = e.employee_id WHERE e.certifications LIKE '%Structural Analysis%';"
  },
  {
    "prompt": "What is the total cost of inspections conducted in the last quarter?",
    "context": {
      "cost_tracking": {
        "columns": [
          "cost_id",
          "type",
          "description",
          "amount",
          "date",
          "related_id",
          "related_type"
        ]
      }
    },
    "query": "SELECT SUM(amount) AS total_inspection_cost FROM cost_tracking WHERE type = 'Inspection' AND date >= ADD_MONTHS(SYSDATE, -3);"
  },
  {
    "prompt": "Retrieve the inspection schedules for all trolleys.",
    "context": {
      "trolleys": {
        "columns": [
          "trolley_id",
          "status",
          "last_maintenance_date",
          "repair_cost"
        ]
      }
    },
    "query": "SELECT trolley_id, last_maintenance_date FROM trolleys WHERE status = 'Scheduled';"
  },
  {
    "prompt": "Show the inspection dates and statuses for all sensors on the ship 'Endeavour.'",
    "context": {
      "sensors": {
        "columns": [
          "sensor_id",
          "type",
          "ship_id",
          "location",
          "status",
          "data_collected",
          "last_calibration_date"
        ]
      },
      "ships": {
        "columns": [
          "ship_id",
          "name",
          "owner",
          "type",
          "build_year",
          "status",
          "location",
          "ai_enabled",
          "inspection_score",
          "last_maintenance_date"
        ]
      }
    },
    "query": "SELECT sensor_id, last_calibration_date, status FROM sensors WHERE ship_id = (SELECT ship_id FROM ships WHERE name = 'Endeavour');"
  },
  {
    "prompt": "List all students and their contact details.",
    "context": {
      "students": {
        "columns": [
          "student_id",
          "first_name",
          "last_name",
          "dob",
          "email",
          "phone",
          "address",
          "enrollment_date",
          "program_id"
        ]
      }
    },
    "query": "SELECT first_name, last_name, email, phone, address FROM students;"
  },
  {
    "prompt": "Show contact information of all students.",
    "context": {
      "students": {
        "columns": [
          "student_id",
          "first_name",
          "last_name",
          "dob",
          "email",
          "phone",
          "address",
          "enrollment_date",
          "program_id"
        ]
      }
    },
    "query": "SELECT first_name, last_name, email, phone, address FROM students;"
  },
  {
    "prompt": "Retrieve the names and enrollment dates of students in the 'Computer Science' program.",
    "context": {
      "students": {
        "columns": [
          "student_id",
          "first_name",
          "last_name",
          "dob",
          "email",
          "phone",
          "address",
          "enrollment_date",
          "program_id"
        ]
      },
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT first_name, last_name, enrollment_date FROM students WHERE program_id = (SELECT program_id FROM programs WHERE program_name = 'Computer Science');"
  },
  {
    "prompt": "Which students are part of the 'Computer Science' program?",
    "context": {
      "students": {
        "columns": [
          "student_id",
          "first_name",
          "last_name",
          "dob",
          "email",
          "phone",
          "address",
          "enrollment_date",
          "program_id"
        ]
      },
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT first_name, last_name, enrollment_date FROM students WHERE program_id = (SELECT program_id FROM programs WHERE program_name = 'Computer Science');"
  },
  {
    "prompt": "Show students enrolled before 2020.",
    "context": {
      "students": {
        "columns": [
          "student_id",
          "first_name",
          "last_name",
          "dob",
          "email",
          "phone",
          "address",
          "enrollment_date",
          "program_id"
        ]
      }
    },
    "query": "SELECT first_name, last_name, enrollment_date FROM students WHERE enrollment_date < TO_DATE('2020-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Which students joined before the year 2020?",
    "context": {
      "students": {
        "columns": [
          "student_id",
          "first_name",
          "last_name",
          "dob",
          "email",
          "phone",
          "address",
          "enrollment_date",
          "program_id"
        ]
      }
    },
    "query": "SELECT first_name, last_name, enrollment_date FROM students WHERE enrollment_date < TO_DATE('2020-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Which students are enrolled in the 'Engineering' department?",
    "context": {
      "students": {
        "columns": [
          "student_id",
          "first_name",
          "last_name",
          "dob",
          "email",
          "phone",
          "address",
          "enrollment_date",
          "program_id"
        ]
      },
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT first_name, last_name FROM students WHERE program_id IN (SELECT program_id FROM programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering'));"
  },
  {
    "prompt": "Retrieve email addresses of students born after 2000.",
    "context": {
      "students": {
        "columns": [
          "student_id",
          "first_name",
          "last_name",
          "dob",
          "email",
          "phone",
          "address",
          "enrollment_date",
          "program_id"
        ]
      }
    },
    "query": "SELECT email FROM students WHERE dob > TO_DATE('2000-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "List all students who have not enrolled in any courses.",
    "context": {
      "students": {
        "columns": [
          "student_id",
          "first_name",
          "last_name",
          "dob",
          "email",
          "phone",
          "address",
          "enrollment_date",
          "program_id"
        ]
      },
      "enrollments": {
        "columns": [
          "enrollment_id",
          "student_id",
          "course_id",
          "semester",
          "year",
          "grade"
        ]
      }
    },
    "query": "SELECT first_name, last_name FROM students WHERE student_id NOT IN (SELECT student_id FROM enrollments);"
  },
  {
    "prompt": "Show students who have no course enrollments.",
    "context": {
      "students": {
        "columns": [
          "student_id",
          "first_name",
          "last_name",
          "dob",
          "email",
          "phone",
          "address",
          "enrollment_date",
          "program_id"
        ]
      },
      "enrollments": {
        "columns": [
          "enrollment_id",
          "student_id",
          "course_id",
          "semester",
          "year",
          "grade"
        ]
      }
    },
    "query": "SELECT first_name, last_name FROM students WHERE student_id NOT IN (SELECT student_id FROM enrollments);"
  },
  {
    "prompt": "How many students are in the 'Mathematics' program?",
    "context": {
      "students": {
        "columns": [
          "student_id",
          "first_name",
          "last_name",
          "dob",
          "email",
          "phone",
          "address",
          "enrollment_date",
          "program_id"
        ]
      },
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT COUNT(*) FROM students WHERE program_id = (SELECT program_id FROM programs WHERE program_name = 'Mathematics');"
  },
  {
    "prompt": "Retrieve the addresses of all students.",
    "context": {
      "students": {
        "columns": [
          "student_id",
          "first_name",
          "last_name",
          "dob",
          "email",
          "phone",
          "address",
          "enrollment_date",
          "program_id"
        ]
      }
    },
    "query": "SELECT address FROM students;"
  },
  {
    "prompt": "List all programs and their durations.",
    "context": {
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT program_name, duration_years FROM programs;"
  },
  {
    "prompt": "Show the names and durations of all programs.",
    "context": {
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT program_name, duration_years FROM programs;"
  },
  {
    "prompt": "Retrieve the programs offered by the 'Science' department.",
    "context": {
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT program_name FROM programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Science');"
  },
  {
    "prompt": "Which programs belong to the 'Science' department?",
    "context": {
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT program_name FROM programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Science');"
  },
  {
    "prompt": "Show the total number of credits required for all programs.",
    "context": {
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT SUM(credits_required) AS total_credits FROM programs;"
  },
  {
    "prompt": "How many credits are required across all programs?",
    "context": {
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT SUM(credits_required) AS total_credits FROM programs;"
  },
  {
    "prompt": "Which programs have a duration of more than 4 years?",
    "context": {
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT program_name FROM programs WHERE duration_years > 4;"
  },
  {
    "prompt": "List all programs longer than 4 years.",
    "context": {
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT program_name FROM programs WHERE duration_years > 4;"
  },
  {
    "prompt": "Retrieve the name and duration of the program with ID 101.",
    "context": {
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT program_name, duration_years FROM programs WHERE program_id = 101;"
  },
  {
    "prompt": "Show details of the program with ID 101.",
    "context": {
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT program_name, duration_years FROM programs WHERE program_id = 101;"
  },
  {
    "prompt": "How many programs are offered by the 'Engineering' department?",
    "context": {
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT COUNT(*) FROM programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering');"
  },
  {
    "prompt": "How many programs are in the 'Engineering' department?",
    "context": {
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT COUNT(*) FROM programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering');"
  },
  {
    "prompt": "List all programs with fewer than 120 credits required.",
    "context": {
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT program_name FROM programs WHERE credits_required < 120;"
  },
  {
    "prompt": "Show programs requiring less than 120 credits.",
    "context": {
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT program_name FROM programs WHERE credits_required < 120;"
  },
  {
    "prompt": "Show all programs where the duration is exactly 2 years.",
    "context": {
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT program_name FROM programs WHERE duration_years = 2;"
  },
  {
    "prompt": "List programs with a 2-year duration.",
    "context": {
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT program_name FROM programs WHERE duration_years = 2;"
  },
  {
    "prompt": "List all departments and their budgets.",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT department_name, budget FROM departments;"
  },
  {
    "prompt": "Show all department names with their budgets.",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT department_name, budget FROM departments;"
  },
  {
    "prompt": "Retrieve the name of the head of each department.",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      },
      "faculty": {
        "columns": [
          "faculty_id",
          "first_name",
          "last_name",
          "title",
          "department_id",
          "email",
          "phone",
          "hire_date"
        ]
      }
    },
    "query": "SELECT department_name, (SELECT first_name || ' ' || last_name FROM faculty WHERE faculty_id = head_id) AS head_name FROM departments;"
  },
  {
    "prompt": "Who heads each department?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      },
      "faculty": {
        "columns": [
          "faculty_id",
          "first_name",
          "last_name",
          "title",
          "department_id",
          "email",
          "phone",
          "hire_date"
        ]
      }
    },
    "query": "SELECT department_name, (SELECT first_name || ' ' || last_name FROM faculty WHERE faculty_id = head_id) AS head_name FROM departments;"
  },
  {
    "prompt": "Show all departments with a budget greater than $1,000,000.",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT department_name, budget FROM departments WHERE budget > 1000000;"
  },
  {
    "prompt": "List departments with budgets exceeding $1,000,000.",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT department_name, budget FROM departments WHERE budget > 1000000;"
  },
  {
    "prompt": "Which departments have faculty with more than 5 years of experience?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      },
      "faculty": {
        "columns": [
          "faculty_id",
          "first_name",
          "last_name",
          "title",
          "department_id",
          "email",
          "phone",
          "hire_date"
        ]
      }
    },
    "query": "SELECT DISTINCT department_name FROM departments WHERE department_id IN (SELECT department_id FROM faculty WHERE SYSDATE - hire_date > 5 * 365);"
  },
  {
    "prompt": "Departments with faculty experienced over 5 years?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      },
      "faculty": {
        "columns": [
          "faculty_id",
          "first_name",
          "last_name",
          "title",
          "department_id",
          "email",
          "phone",
          "hire_date"
        ]
      }
    },
    "query": "SELECT DISTINCT department_name FROM departments WHERE department_id IN (SELECT department_id FROM faculty WHERE SYSDATE - hire_date > 5 * 365);"
  },
  {
    "prompt": "Retrieve the total number of departments in the university.",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT COUNT(*) AS total_departments FROM departments;"
  },
  {
    "prompt": "How many departments are in the university?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT COUNT(*) AS total_departments FROM departments;"
  },
  {
    "prompt": "Show the details of the department headed by 'Dr. Jane Smith.'",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      },
      "faculty": {
        "columns": [
          "faculty_id",
          "first_name",
          "last_name",
          "title",
          "department_id",
          "email",
          "phone",
          "hire_date"
        ]
      }
    },
    "query": "SELECT * FROM departments WHERE head_id = (SELECT faculty_id FROM faculty WHERE first_name = 'Jane' AND last_name = 'Smith');"
  },
  {
    "prompt": "Department led by 'Dr. Jane Smith'?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      },
      "faculty": {
        "columns": [
          "faculty_id",
          "first_name",
          "last_name",
          "title",
          "department_id",
          "email",
          "phone",
          "hire_date"
        ]
      }
    },
    "query": "SELECT * FROM departments WHERE head_id = (SELECT faculty_id FROM faculty WHERE first_name = 'Jane' AND last_name = 'Smith');"
  },
  {
    "prompt": "Which departments have no associated programs?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      },
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT department_name FROM departments WHERE department_id NOT IN (SELECT department_id FROM programs);"
  },
  {
    "prompt": "List departments without any programs.",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      },
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT department_name FROM departments WHERE department_id NOT IN (SELECT department_id FROM programs);"
  },
  {
    "prompt": "Show the total budget allocated across all departments.",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT SUM(budget) AS total_budget FROM departments;"
  },
  {
    "prompt": "What is the total budget for all departments?",
    "context": {
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT SUM(budget) AS total_budget FROM departments;"
  },
  {
    "prompt": "List all faculty members and their contact details.",
    "context": {
      "faculty": {
        "columns": [
          "faculty_id",
          "first_name",
          "last_name",
          "title",
          "department_id",
          "email",
          "phone",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, email, phone FROM faculty;"
  },
  {
    "prompt": "Retrieve names of faculty members in the 'Physics' department.",
    "context": {
      "faculty": {
        "columns": [
          "faculty_id",
          "first_name",
          "last_name",
          "title",
          "department_id",
          "email",
          "phone",
          "hire_date"
        ]
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT first_name, last_name FROM faculty WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Physics');"
  },
  {
    "prompt": "Show all faculty hired before 2015.",
    "context": {
      "faculty": {
        "columns": [
          "faculty_id",
          "first_name",
          "last_name",
          "title",
          "department_id",
          "email",
          "phone",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, hire_date FROM faculty WHERE hire_date < TO_DATE('2015-01-01', 'YYYY-MM-DD');"
  },
  {
    "prompt": "Which faculty members teach courses in the 'Mathematics' department?",
    "context": {
      "faculty": {
        "columns": [
          "faculty_id",
          "first_name",
          "last_name",
          "title",
          "department_id",
          "email",
          "phone",
          "hire_date"
        ]
      },
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT DISTINCT first_name, last_name FROM faculty WHERE faculty_id IN (SELECT faculty_id FROM courses WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Mathematics'));"
  },
  {
    "prompt": "Retrieve emails of all faculty titled 'Professor'.",
    "context": {
      "faculty": {
        "columns": [
          "faculty_id",
          "first_name",
          "last_name",
          "title",
          "department_id",
          "email",
          "phone",
          "hire_date"
        ]
      }
    },
    "query": "SELECT email FROM faculty WHERE title = 'Professor';"
  },
  {
    "prompt": "List faculty members with no courses assigned.",
    "context": {
      "faculty": {
        "columns": [
          "faculty_id",
          "first_name",
          "last_name",
          "title",
          "department_id",
          "email",
          "phone",
          "hire_date"
        ]
      },
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      }
    },
    "query": "SELECT first_name, last_name FROM faculty WHERE faculty_id NOT IN (SELECT DISTINCT faculty_id FROM courses);"
  },
  {
    "prompt": "How many faculty members are in the 'Computer Science' department?",
    "context": {
      "faculty": {
        "columns": [
          "faculty_id",
          "first_name",
          "last_name",
          "title",
          "department_id",
          "email",
          "phone",
          "hire_date"
        ]
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT COUNT(*) AS faculty_count FROM faculty WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Computer Science');"
  },
  {
    "prompt": "Show the hire dates of all faculty members.",
    "context": {
      "faculty": {
        "columns": [
          "faculty_id",
          "first_name",
          "last_name",
          "title",
          "department_id",
          "email",
          "phone",
          "hire_date"
        ]
      }
    },
    "query": "SELECT first_name, last_name, hire_date FROM faculty;"
  },
  {
    "prompt": "Faculty members in Physics department?",
    "context": {
      "faculty": {
        "columns": [
          "faculty_id",
          "first_name",
          "last_name",
          "title",
          "department_id",
          "email",
          "phone",
          "hire_date"
        ]
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT first_name, last_name FROM faculty WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Physics');"
  },
  {
    "prompt": "List faculty emails titled Professor.",
    "context": {
      "faculty": {
        "columns": [
          "faculty_id",
          "first_name",
          "last_name",
          "title",
          "department_id",
          "email",
          "phone",
          "hire_date"
        ]
      }
    },
    "query": "SELECT email FROM faculty WHERE title = 'Professor';"
  },
  {
    "prompt": "List all courses and their associated departments.",
    "context": {
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT course_name, (SELECT department_name FROM departments WHERE departments.department_id = courses.department_id) AS department_name FROM courses;"
  },
  {
    "prompt": "Retrieve names of courses taught by 'Dr. John Doe'.",
    "context": {
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      },
      "faculty": {
        "columns": [
          "faculty_id",
          "first_name",
          "last_name",
          "title",
          "department_id",
          "email",
          "phone",
          "hire_date"
        ]
      }
    },
    "query": "SELECT course_name FROM courses WHERE faculty_id = (SELECT faculty_id FROM faculty WHERE first_name = 'John' AND last_name = 'Doe');"
  },
  {
    "prompt": "Show courses with more than 3 credits.",
    "context": {
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      }
    },
    "query": "SELECT course_name, credits FROM courses WHERE credits > 3;"
  },
  {
    "prompt": "Which courses are offered by the 'Engineering' department?",
    "context": {
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT course_name FROM courses WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering');"
  },
  {
    "prompt": "Retrieve name and credits of the course with ID 202.",
    "context": {
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      }
    },
    "query": "SELECT course_name, credits FROM courses WHERE course_id = 202;"
  },
  {
    "prompt": "How many courses are offered in the 'Biology' department?",
    "context": {
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT COUNT(*) AS course_count FROM courses WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Biology');"
  },
  {
    "prompt": "List all courses with fewer than 4 credits.",
    "context": {
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      }
    },
    "query": "SELECT course_name, credits FROM courses WHERE credits < 4;"
  },
  {
    "prompt": "Show courses not assigned to any faculty member.",
    "context": {
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      }
    },
    "query": "SELECT course_name FROM courses WHERE faculty_id IS NULL;"
  },
  {
    "prompt": "Courses with credit value greater than 3?",
    "context": {
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      }
    },
    "query": "SELECT course_name, credits FROM courses WHERE credits > 3;"
  },
  {
    "prompt": "List courses from the Engineering department.",
    "context": {
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT course_name FROM courses WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering');"
  },
  {
    "prompt": "List all enrollments for the semester 'Fall 2023'.",
    "context": {
      "enrollments": {
        "columns": [
          "enrollment_id",
          "student_id",
          "course_id",
          "semester",
          "year",
          "grade"
        ]
      }
    },
    "query": "SELECT * FROM enrollments WHERE semester = 'Fall' AND year = 2023;"
  },
  {
    "prompt": "Retrieve grades of students enrolled in the course 'Algebra'.",
    "context": {
      "enrollments": {
        "columns": [
          "enrollment_id",
          "student_id",
          "course_id",
          "semester",
          "year",
          "grade"
        ]
      },
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      }
    },
    "query": "SELECT grade FROM enrollments WHERE course_id = (SELECT course_id FROM courses WHERE course_name = 'Algebra');"
  },
  {
    "prompt": "Show all enrollments for students in the 'Physics' program.",
    "context": {
      "enrollments": {
        "columns": [
          "enrollment_id",
          "student_id",
          "course_id",
          "semester",
          "year",
          "grade"
        ]
      },
      "students": {
        "columns": [
          "student_id",
          "first_name",
          "last_name",
          "dob",
          "email",
          "phone",
          "address",
          "enrollment_date",
          "program_id"
        ]
      },
      "programs": {
        "columns": [
          "program_id",
          "program_name",
          "department_id",
          "duration_years",
          "credits_required"
        ]
      }
    },
    "query": "SELECT * FROM enrollments WHERE student_id IN (SELECT student_id FROM students WHERE program_id = (SELECT program_id FROM programs WHERE program_name = 'Physics'));"
  },
  {
    "prompt": "Which students enrolled in courses in the year 2022?",
    "context": {
      "enrollments": {
        "columns": [
          "enrollment_id",
          "student_id",
          "course_id",
          "semester",
          "year",
          "grade"
        ]
      },
      "students": {
        "columns": [
          "student_id",
          "first_name",
          "last_name",
          "dob",
          "email",
          "phone",
          "address",
          "enrollment_date",
          "program_id"
        ]
      }
    },
    "query": "SELECT DISTINCT student_id FROM enrollments WHERE year = 2022;"
  },
  {
    "prompt": "Retrieve the name and semester of the course with the highest enrollments.",
    "context": {
      "enrollments": {
        "columns": [
          "enrollment_id",
          "student_id",
          "course_id",
          "semester",
          "year",
          "grade"
        ]
      },
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      }
    },
    "query": "SELECT course_name, semester FROM courses JOIN enrollments ON courses.course_id = enrollments.course_id GROUP BY course_name, semester ORDER BY COUNT(enrollment_id) DESC LIMIT 1;"
  },
  {
    "prompt": "How many students are enrolled in the course with ID 301?",
    "context": {
      "enrollments": {
        "columns": [
          "enrollment_id",
          "student_id",
          "course_id",
          "semester",
          "year",
          "grade"
        ]
      }
    },
    "query": "SELECT COUNT(*) AS student_count FROM enrollments WHERE course_id = 301;"
  },
  {
    "prompt": "List all enrollments where the grade is 'A'.",
    "context": {
      "enrollments": {
        "columns": [
          "enrollment_id",
          "student_id",
          "course_id",
          "semester",
          "year",
          "grade"
        ]
      }
    },
    "query": "SELECT * FROM enrollments WHERE grade = 'A';"
  },
  {
    "prompt": "Show all enrollments for students with no grades assigned.",
    "context": {
      "enrollments": {
        "columns": [
          "enrollment_id",
          "student_id",
          "course_id",
          "semester",
          "year",
          "grade"
        ]
      }
    },
    "query": "SELECT * FROM enrollments WHERE grade IS NULL;"
  },
  {
    "prompt": "Find courses with the highest enrollments.",
    "context": {
      "enrollments": {
        "columns": [
          "enrollment_id",
          "student_id",
          "course_id",
          "semester",
          "year",
          "grade"
        ]
      },
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      }
    },
    "query": "SELECT course_name, COUNT(*) AS total_enrollments FROM courses JOIN enrollments ON courses.course_id = enrollments.course_id GROUP BY course_name ORDER BY total_enrollments DESC;"
  },
  {
    "prompt": "Show enrollments from Fall 2023.",
    "context": {
      "enrollments": {
        "columns": [
          "enrollment_id",
          "student_id",
          "course_id",
          "semester",
          "year",
          "grade"
        ]
      }
    },
    "query": "SELECT * FROM enrollments WHERE semester = 'Fall' AND year = 2023;"
  },
  {
    "prompt": "List all exams and their associated courses.",
    "context": {
      "exams": {
        "columns": [
          "exam_id",
          "course_id",
          "exam_date",
          "location",
          "total_marks"
        ]
      },
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      }
    },
    "query": "SELECT exams.exam_id, courses.course_name, exams.exam_date, exams.location, exams.total_marks FROM exams JOIN courses ON exams.course_id = courses.course_id;"
  },
  {
    "prompt": "Retrieve the exam dates for the course 'Calculus'.",
    "context": {
      "exams": {
        "columns": [
          "exam_id",
          "course_id",
          "exam_date",
          "location",
          "total_marks"
        ]
      },
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      }
    },
    "query": "SELECT exam_date FROM exams WHERE course_id = (SELECT course_id FROM courses WHERE course_name = 'Calculus');"
  },
  {
    "prompt": "Show exams scheduled in the 'Main Hall'.",
    "context": {
      "exams": {
        "columns": [
          "exam_id",
          "course_id",
          "exam_date",
          "location",
          "total_marks"
        ]
      }
    },
    "query": "SELECT * FROM exams WHERE location = 'Main Hall';"
  },
  {
    "prompt": "Which exams are scheduled in the month of December?",
    "context": {
      "exams": {
        "columns": [
          "exam_id",
          "course_id",
          "exam_date",
          "location",
          "total_marks"
        ]
      }
    },
    "query": "SELECT * FROM exams WHERE TO_CHAR(exam_date, 'MM') = '12';"
  },
  {
    "prompt": "Retrieve the total marks for the exam with ID 401.",
    "context": {
      "exams": {
        "columns": [
          "exam_id",
          "course_id",
          "exam_date",
          "location",
          "total_marks"
        ]
      }
    },
    "query": "SELECT total_marks FROM exams WHERE exam_id = 401;"
  },
  {
    "prompt": "How many exams are scheduled for the 'Spring 2024' semester?",
    "context": {
      "exams": {
        "columns": [
          "exam_id",
          "course_id",
          "exam_date",
          "location",
          "total_marks"
        ]
      },
      "enrollments": {
        "columns": [
          "enrollment_id",
          "student_id",
          "course_id",
          "semester",
          "year",
          "grade"
        ]
      }
    },
    "query": "SELECT COUNT(*) AS total_exams FROM exams JOIN enrollments ON exams.course_id = enrollments.course_id WHERE enrollments.semester = 'Spring' AND enrollments.year = 2024;"
  },
  {
    "prompt": "List all exams where the total marks exceed 100.",
    "context": {
      "exams": {
        "columns": [
          "exam_id",
          "course_id",
          "exam_date",
          "location",
          "total_marks"
        ]
      }
    },
    "query": "SELECT * FROM exams WHERE total_marks > 100;"
  },
  {
    "prompt": "Show all exams scheduled for courses not offered in the 'Computer Science' department.",
    "context": {
      "exams": {
        "columns": [
          "exam_id",
          "course_id",
          "exam_date",
          "location",
          "total_marks"
        ]
      },
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      },
      "departments": {
        "columns": ["department_id", "department_name", "budget", "head_id"]
      }
    },
    "query": "SELECT * FROM exams WHERE course_id IN (SELECT course_id FROM courses WHERE department_id != (SELECT department_id FROM departments WHERE department_name = 'Computer Science'));"
  },
  {
    "prompt": "List all exam results for the course 'Physics 101.'",
    "context": {
      "exam_results": {
        "columns": ["result_id", "exam_id", "student_id", "marks_obtained"]
      },
      "exams": {
        "columns": [
          "exam_id",
          "course_id",
          "exam_date",
          "location",
          "total_marks"
        ]
      },
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      }
    },
    "query": "SELECT exam_results.* FROM exam_results JOIN exams ON exam_results.exam_id = exams.exam_id JOIN courses ON exams.course_id = courses.course_id WHERE courses.course_name = 'Physics 101';"
  },
  {
    "prompt": "Retrieve the marks obtained by 'Alice Johnson' in the exam with ID 502.",
    "context": {
      "exam_results": {
        "columns": ["result_id", "exam_id", "student_id", "marks_obtained"]
      },
      "students": {
        "columns": [
          "student_id",
          "first_name",
          "last_name",
          "dob",
          "email",
          "phone",
          "address",
          "enrollment_date",
          "program_id"
        ]
      }
    },
    "query": "SELECT marks_obtained FROM exam_results WHERE exam_id = 502 AND student_id = (SELECT student_id FROM students WHERE first_name = 'Alice' AND last_name = 'Johnson');"
  },
  {
    "prompt": "Show all exam results where marks obtained are greater than 90.",
    "context": {
      "exam_results": {
        "columns": ["result_id", "exam_id", "student_id", "marks_obtained"]
      }
    },
    "query": "SELECT * FROM exam_results WHERE marks_obtained > 90;"
  },
  {
    "prompt": "Which students scored less than 50 in the 'Mathematics' exam?",
    "context": {
      "exam_results": {
        "columns": ["result_id", "exam_id", "student_id", "marks_obtained"]
      },
      "exams": {
        "columns": [
          "exam_id",
          "course_id",
          "exam_date",
          "location",
          "total_marks"
        ]
      },
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      },
      "students": {
        "columns": ["student_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT students.first_name, students.last_name FROM students JOIN exam_results ON students.student_id = exam_results.student_id JOIN exams ON exam_results.exam_id = exams.exam_id JOIN courses ON exams.course_id = courses.course_id WHERE courses.course_name = 'Mathematics' AND exam_results.marks_obtained < 50;"
  },
  {
    "prompt": "Retrieve the names and marks of students with the highest score in 'Biology.'",
    "context": {
      "exam_results": {
        "columns": ["result_id", "exam_id", "student_id", "marks_obtained"]
      },
      "exams": {
        "columns": [
          "exam_id",
          "course_id",
          "exam_date",
          "location",
          "total_marks"
        ]
      },
      "courses": {
        "columns": [
          "course_id",
          "course_name",
          "department_id",
          "credits",
          "faculty_id"
        ]
      },
      "students": {
        "columns": ["student_id", "first_name", "last_name"]
      }
    },
    "query": "SELECT students.first_name, students.last_name, exam_results.marks_obtained FROM students JOIN exam_results ON students.student_id = exam_results.student_id JOIN exams ON exam_results.exam_id = exams.exam_id JOIN courses ON exams.course_id = courses.course_id WHERE courses.course_name = 'Biology' AND exam_results.marks_obtained = (SELECT MAX(marks_obtained) FROM exam_results JOIN exams ON exam_results.exam_id = exams.exam_id JOIN courses ON exams.course_id = courses.course_id WHERE courses.course_name = 'Biology');"
  },
  {
    "prompt": "How many students appeared for the exam with ID 601?",
    "context": {
      "exam_results": {
        "columns": ["result_id", "exam_id", "student_id", "marks_obtained"]
      }
    },
    "query": "SELECT COUNT(*) AS total_students FROM exam_results WHERE exam_id = 601;"
  },
  {
    "prompt": "List all exam results where the marks are exactly 100.",
    "context": {
      "exam_results": {
        "columns": ["result_id", "exam_id", "student_id", "marks_obtained"]
      }
    },
    "query": "SELECT * FROM exam_results WHERE marks_obtained = 100;"
  },
  {
    "prompt": "Show all results for exams held before 2023.",
    "context": {
      "exam_results": {
        "columns": ["result_id", "exam_id", "student_id", "marks_obtained"]
      },
      "exams": {
        "columns": [
          "exam_id",
          "course_id",
          "exam_date",
          "location",
          "total_marks"
        ]
      }
    },
    "query": "SELECT exam_results.* FROM exam_results JOIN exams ON exam_results.exam_id = exams.exam_id WHERE exams.exam_date < TO_DATE('2023-01-01', 'YYYY-MM-DD');"
  }
]